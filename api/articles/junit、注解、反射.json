{"title":"junit、反射","uid":"7ee1f34768cc2e04e0232a752344cda0","slug":"junit、注解、反射","date":"2022-06-19T12:28:37.000Z","updated":"2022-06-20T00:48:00.769Z","comments":true,"path":"api/articles/junit、注解、反射.json","keywords":null,"cover":"https://ts1.cn.mm.bing.net/th/id/R-C.e953db8584262c6d275ebb1f463e2664?rik=310ufjsemnBz1Q&riu=http%3a%2f%2fup.deskcity.org%2fpic_source%2fe9%2f53%2fdb%2fe953db8584262c6d275ebb1f463e2664.jpg&ehk=f4G2vlmXEKODWmUbTuTJbYW%2bLjy81wyNtMx3vLsrh8o%3d&risl=&pid=ImgRaw&r=0","content":"<h1 id=\"1-junit单元测试\"><a class=\"markdownIt-Anchor\" href=\"#1-junit单元测试\">#</a> 1、junit 单元测试</h1>\n<h2 id=\"11-测试分类\"><a class=\"markdownIt-Anchor\" href=\"#11-测试分类\">#</a> 1.1 测试分类：</h2>\n<ol>\n<li>黑盒测试：不用具体关注里面的代码内容，只要输入 input，经过代码的执行查看 output 是否达到预期，不需要写测试代码</li>\n<li>白盒测试：也需要 input 和 output，但是输入了之后代码的执行，代码的逻辑、算法、严谨度、效率等都要关注，需要写测试代码</li>\n</ol>\n<p>junit 就是白盒测试的一种</p>\n<h2 id=\"12-junit的使用\"><a class=\"markdownIt-Anchor\" href=\"#12-junit的使用\">#</a> 1.2 junit 的使用</h2>\n<ul>\n<li>\n<p>步骤</p>\n<ol>\n<li>定义一个测试类（测试用例）\n<ul>\n<li>建议：\n<ol>\n<li>测试类名：被测试类名 Test，如 CalculatorTest</li>\n<li>包名：xxx.xxx.xx.test，如 cn.itclass.test</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>定义测试方法：可以独立运行\n<ul>\n<li>建议：\n<ol>\n<li>方法名：test 测试方法名，如 testAdd ()</li>\n<li>返回值：void</li>\n<li>参数列表：空参</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>给这个方法加 @Test</li>\n<li>导入 Junit 依赖环境（点击红灯泡，添加 junit 到 classpath）—— 视频课包为 org.junit.Test，自己补全的为 <code>org.testng.annotations.Test;</code> ，但是能用\n<ul>\n<li>运行成功后会显示绿色 Test passed</li>\n<li>使用 junit 的时候看的不是输出的结果，看的是红色还是绿色，红色表示失败，绿色表示成功</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>判定结果</p>\n<ul>\n<li>红色：失败</li>\n<li>绿色：成功</li>\n<li>可以使用 Assert 对结果进行判定，如果判定结果成功就是绿色，结果与断言结果不一样是红色\n<ul>\n<li>Assert：静态类，使用 Assert.assertEquals (期望值，真实值)</li>\n<li>判定结果的时候一般不进行输出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>可以在一个 junit 类里面定义多个方法，然后点击对应方法的绿色小箭头单独运行</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>caculater</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">After</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>testng<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span></span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n     * 测试add方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.创建计算器对象</span>\n        caculater a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">caculater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.调用add方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.断言：我断言的结果是3，如果是一样的就是</span>\n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@After</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>补充\n<ul>\n<li>@Before：\n<ul>\n<li>修饰的方法会在测试方法之前被自动执行</li>\n</ul>\n</li>\n<li>@After：\n<ul>\n<li>修饰的方法会在测试方法执行之后被自动执行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：导包的时候一定要使用 <code>org.junit</code> ，如果导入的是 org.testng.annotations.Test，Test 可以正常使用，Before 和 After 不能</p></blockquote>\n<h1 id=\"2-反射框架设计的灵魂\"><a class=\"markdownIt-Anchor\" href=\"#2-反射框架设计的灵魂\">#</a> 2、反射：框架设计的灵魂</h1>\n<ul>\n<li>\n<p>框架：半成品软件。可以在框架的基础上进行软件的开发，简化编码</p>\n</li>\n<li>\n<p>反射：将类的各个组成部分封装为其他对象，这个过程称为<strong>反射机制</strong></p>\n</li>\n<li>\n<p>java 代码在计算机中运行的三个阶段：</p>\n<ol>\n<li>\n<p>Source 源代码阶段：写完一个类之后，使用 javac 进行编译，编译后成为一个 class 字节码文件，里面分三个区域，一个存档成员变量，一个存放构造方法，一个存放成员方法</p>\n</li>\n<li>\n<p>Class 类对象阶段：类加载器 ClassLoader 将字节码文件加载到内存中，内存中会有一个<strong> Class 类</strong>对象来描述字节码文件，这个对象中有成员变量、构造方法、成员方法，成员变量封装成<strong> Field</strong> 对象，构造方法封装为<strong> Constructor</strong> 对象，成员方法封装为<strong> Method</strong> 对象，这三个对象在 Class 类对象里面组成 Class 类，由于变量可能有多个，于是使用一个数组来描述成员内容如下</p>\n<ul>\n<li>Field [] fields</li>\n<li>Constructor[] cons</li>\n<li>Method[] methods</li>\n</ul>\n<p>这些组成一个类对象，之后可以使用这些类对象进行实例化等</p>\n</li>\n<li>\n<p>Runtime 运行阶段：Person 对象 new Person ();</p>\n</li>\n</ol>\n</li>\n<li>\n<p>好处：</p>\n<ol>\n<li>可以在程序运行过程中去操作这些对象。</li>\n<li>可以解耦，提高程序的可扩展性</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220619175957838.png\" alt=\"image-20220619175957838\"></p>\n<h2 id=\"21-获取class类对象的方式\"><a class=\"markdownIt-Anchor\" href=\"#21-获取class类对象的方式\">#</a> 2.1 获取 Class 类对象的方式</h2>\n<ol>\n<li><strong>Class.forName (“全类名”)</strong>：是将字节码文件加载进内存，返回 Class 对象\n<ul>\n<li>多用于配置文件，将类名可以定义在配置文件中。读取文件，加载类</li>\n</ul>\n</li>\n<li><strong>类名.class</strong>：通过类名的属性 class 来获取\n<ul>\n<li>多用于参数的传递</li>\n</ul>\n</li>\n<li><strong>对象.getClass ()</strong>：getClass () 方法在 Object 类中定义着\n<ul>\n<li>多用于对象的获取字节码的方式，有对象了想获取字节码文件对象</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>结论：同一个字节码文件 (*.class) 在一次程序的运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class 对象都是同一个</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Person</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo1</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//1.Class.forName(\"全类名\")</span>\n        <span class=\"token class-name\">Class</span> cls1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.itclass.domain.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.类名.class</span>\n        <span class=\"token class-name\">Class</span> cls2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.对象.getClass()</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> cls3 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//==比较这三个对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1 <span class=\"token operator\">==</span> cls2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1 <span class=\"token operator\">==</span> cls3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n        <span class=\"token class-name\">Class</span> cls4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1 <span class=\"token operator\">==</span> cls4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"22-class对象功能\"><a class=\"markdownIt-Anchor\" href=\"#22-class对象功能\">#</a> 2.2 Class 对象功能</h2>\n<ul>\n<li>获取功能：\n<ol>\n<li>获取成员变量们\n<ol>\n<li>Field [] getFields ()：获取所有<strong> public</strong> 修饰的成员变量</li>\n<li>Field getField (String name)：获取指定名称的<strong> public</strong> 修饰的成员变量</li>\n<li>Field [] getDeclaredFields ()：获取所有成员变量，<strong>不考虑访问修饰符</strong></li>\n<li>Field getDeclaredField (String name)：获取指定名称的成员变量，<strong>不考虑访问修饰符</strong></li>\n</ol>\n</li>\n<li>获取构造方法们\n<ol>\n<li>Constructer&lt;?&gt;[] getConstructors ()：获取所有<strong> public</strong> 修饰的构造方法</li>\n<li>Constructer&lt;T&gt; getConstructor (类 &lt;?&gt;… parameterTypes)：获取指定 public 修饰构造方法，这里要的参数是构造参数对象</li>\n<li>Constructer&lt;?&gt;[] getDeclaredConstructors ()：获取所有构造方法，<strong>不考虑访问修饰符</strong></li>\n<li>Constructer&lt;T&gt; getDeclaredConstructor (类 &lt;?&gt;… parameterTypes)：获取指定构造方法，<strong>不考虑访问修饰符</strong></li>\n</ol>\n</li>\n<li>获取成员方法们\n<ol>\n<li>Method [] getMethods ()：获取所有 public 修饰的方法</li>\n<li>Method getMethod ()：获取指定<strong> public</strong> 方法，参数为<strong>方法名和参数列表</strong></li>\n<li>Method [] getDeclaredMethods ()：获取所有方法，<strong>不考虑访问修饰符</strong></li>\n<li>Method getDeclaredMethod ()：获取指定方法，<strong>不考虑访问修饰符</strong>，参数为<strong>方法名和参数列表</strong></li>\n</ol>\n</li>\n<li>获取类名\n<ol>\n<li>String getName()</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Field：成员变量\n<ul>\n<li>操作：\n<ol>\n<li>设置值\n<ul>\n<li>set (Object obj, Object value)：给 obj 对象设置 value 值</li>\n</ul>\n</li>\n<li>获取值\n<ul>\n<li>get (Object obj)：获取指定对象的值，比如 get§，获取的是 p 里的这个成员变量的值</li>\n</ul>\n</li>\n<li>忽略访问权限修饰符的安全检查\n<ul>\n<li>setAccessible (true)：暴力反射，Field 对象中的方法</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Constructor：构造方法\n<ul>\n<li>创建对象：T newInstance (Object … initargs)</li>\n<li>如果使用空参数构造方法创建对象，操作可以简化：Class 对象的 newInstance</li>\n</ul>\n</li>\n<li>Method：方法\n<ul>\n<li>执行方法：invoke (Object obj, Object… args)，参数为对象和实际参数列表</li>\n<li>获取方法名称：\n<ul>\n<li>String getName：获取方法名</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>获取类名\n<ul>\n<li>Class 对象.getName; 获取的是全类名</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Person</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*获取成员变量*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//0.获取person的class对象</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.Field[] getFields()</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field<span class=\"token operator\">:</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//2.Field getField(String name)</span>\n        <span class=\"token class-name\">Field</span> a <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取成员变量a的值</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//3.Field[] getDeclaredFields()</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredFields <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> declaredFields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//4.Field getDeclaredField(String name)</span>\n        <span class=\"token class-name\">Field</span> d <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//忽略访问权限修饰符的安全检查</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//暴力反射</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Person</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*获取构造方法*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//0.获取Person的Class对象</span>\n        <span class=\"token class-name\">Class</span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.Constructer&lt;?>[] getConstructors()</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.Constructer\\&lt;T\\> getConstructor(类&lt;?>... parameterTypes)</span>\n        <span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建对象</span>\n        <span class=\"token class-name\">Object</span> person <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span> constructor1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> person2 <span class=\"token operator\">=</span> constructor1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//空参构造（已过时）</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Person</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectDemo4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> personClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         获取成员方法们\n\n         1. 获取所有方法：Method[] getMethods()\n         2. 获取指定方法：Method getMethod()\n         3. Method[] getDeclaredMethods()\n         4. Method getDeclaredMethod()\n         */</span>\n        <span class=\"token comment\">//获取指定名称的方法</span>\n        <span class=\"token class-name\">Method</span> eat <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eat<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Method</span> eat1 <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eat1<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取所有方法</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"23-反射案例\"><a class=\"markdownIt-Anchor\" href=\"#23-反射案例\">#</a> 2.3 反射案例</h2>\n<ul>\n<li>需求：写一个 &quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且可以执行任意类的方法\n<ul>\n<li>实现：\n<ol>\n<li>配置文件</li>\n<li>反射</li>\n</ol>\n</li>\n<li>步骤：\n<ol>\n<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li>\n<li>在程序中加载读取配置文件</li>\n<li>使用反射技术来加载类文件进内存</li>\n<li>创建对象</li>\n<li>执行方法</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 假设的框架类\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以创建任意类的对象，可以执行任意方法</span>\n\n        <span class=\"token comment\">/**\n         前提：不能改变该类的任何代码，可以创建任意类的对象，可以执行任意方法\n         */</span>\n<span class=\"token comment\">//        Person p = new Person();</span>\n<span class=\"token comment\">//        p.eat();</span>\n\n        <span class=\"token comment\">//1.加载配置文件</span>\n        <span class=\"token comment\">//1.1创建Properties对象</span>\n        <span class=\"token class-name\">Properties</span> pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//1.2加载配置文件，转换为一个集合</span>\n        <span class=\"token comment\">//1.2.1获取ckass目录下的配置文件</span>\n        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pro.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2.获取配置文件中定义的数据</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//3.加载该类进内存</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//4.创建对象</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//5.获取方法对象</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//6.执行方法</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：类加载器没学，回头补上</p></blockquote>\n<h1 id=\"3-注解\"><a class=\"markdownIt-Anchor\" href=\"#3-注解\">#</a> 3、注解</h1>\n<ul>\n<li>概念：说明程序的，给计算机看的</li>\n<li>注释：用文字描述程序的。给程序员看的</li>\n<li>概念描述：\n<ul>\n<li>JDK1.5 之后的新特性</li>\n<li>说明程序的</li>\n<li>使用注解：<strong>@注解名称</strong></li>\n</ul>\n</li>\n<li>作用分类：\n<ol>\n<li>编写文档：通过代码里标识的注解生成文档【生成文档 doc 文档】</li>\n<li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】——<strong> 经常使用</strong></li>\n<li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"31-jdk中预定义的一些注解\"><a class=\"markdownIt-Anchor\" href=\"#31-jdk中预定义的一些注解\">#</a> 3.1 JDK 中预定义的一些注解</h2>\n<ul>\n<li>@Override：监测点被该注解标注的方法是否是继承自父类（接口）的</li>\n<li>@Depreciated：该注解标注的内容已过时，</li>\n<li>@SuppressWarnings：压制警告 ——@SuppressWarnings (“all”)，一般传 all，写在类上</li>\n</ul>\n<h2 id=\"32-自定义注解\"><a class=\"markdownIt-Anchor\" href=\"#32-自定义注解\">#</a> 3.2 自定义注解</h2>\n<ul>\n<li>\n<p>格式：</p>\n<ul>\n<li>元注解</li>\n<li><strong>public @interface 注解名称 {属性列表}</strong></li>\n</ul>\n</li>\n<li>\n<p>本质：注解本质上就是一个接口，该接口默认继承 Annotation 接口</p>\n<ul>\n<li>public interface MyAnno extends java.lang.annotation.Annotation{}</li>\n</ul>\n</li>\n<li>\n<p>java 反编译命令：javap java.class 文件</p>\n</li>\n<li>\n<p>属性：接口中可以定义的一成员方法</p>\n<ul>\n<li>\n<p>要求：</p>\n<ol>\n<li>\n<p>属性的返回值类型有下列取值，其他不行</p>\n<ul>\n<li>\n<p>基本数据类型（void 不行）</p>\n</li>\n<li>\n<p>String</p>\n</li>\n<li>\n<p>枚举</p>\n</li>\n<li>\n<p>注解</p>\n</li>\n<li>\n<p>以上类型的数组</p>\n</li>\n</ul>\n</li>\n<li>\n<p>定义了属性，在使用时需要给属性赋值</p>\n<ol>\n<li>\n<p>如果定义属性时，使用 default 关键字给属性默认初始化值，则使用注解时可以不进行属性的赋值</p>\n</li>\n<li>\n<p>如果只有一个属性需要赋值，并且属性的名称是 value，则 value 可以省略，直接定义值即可</p>\n<p>定义：String name () default “张三”;\t使用：@MyAnno (name = “李四”);</p>\n</li>\n<li>\n<p>数组赋值时值使用大括号包裹。如果数组中只有一个值，则大括号可以省略</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>元注解：用于描述注解的注解</p>\n<ul>\n<li>@Target：描述注解能够作用的位置\n<ul>\n<li>ElementType 取值：\n<ul>\n<li>TYPE: 可以作用于类上</li>\n<li>METHOD: 可以作用于方法上</li>\n<li>FIELD: 可以作用于成员变量上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>@Retention：描述注解被保留的阶段\n<ul>\n<li>@Retention (RetentionPolicy.RUNTIME)：当前被描述的注解会保留到 class 字节码文件中并被 JVM 读取到</li>\n</ul>\n</li>\n<li>@Documented：描述注解是否被抽取到 API 文档中</li>\n<li>@Inherited：描述注解是否被类的子类继承</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>annocation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 元注解：用于描述注解的注解\n     - @Target：描述注解能够作用的位置\n     - @Retention：描述注解被保留的阶段\n     - @Documented：描述注解是否被抽取到API文档中\n     - @Inherited：描述注解是否被子类继承\n */</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//表示该MyAnno3只能作用于类上</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnno3</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"33-在程序中使用解析注解获取注解中定义的属性值\"><a class=\"markdownIt-Anchor\" href=\"#33-在程序中使用解析注解获取注解中定义的属性值\">#</a> 3.3 在程序中使用（解析）注解：获取注解中定义的属性值</h2>\n<ol>\n<li>获取注解定义的位置的对象\tClass/Method/Field 对象</li>\n<li>获取指定的注解\n<ul>\n<li>getAnnotation(Class)</li>\n<li>这行命令执行后其实就是在内存中生成了一个该注解接口的子类实现对象</li>\n</ul>\n</li>\n<li>调用注解中的抽象方法来获取配置的属性值</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>annocation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 假设的框架类\n */</span>\n<span class=\"token annotation punctuation\">@Pro</span><span class=\"token punctuation\">(</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.itclass.annocation.Demo1\"</span><span class=\"token punctuation\">,</span>methodName <span class=\"token operator\">=</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以创建任意类的对象，可以执行任意方法</span>\n\n        <span class=\"token comment\">/**\n         前提：不能改变该类的任何代码，可以创建任意类的对象，可以执行任意方法\n         */</span>\n        <span class=\"token comment\">//1.解析注解</span>\n        <span class=\"token comment\">//1.1获取该类的字节码文件对象</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">></span></span> reflectTestClass <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.获取上边的注释对象</span>\n        <span class=\"token comment\">//其实就是在内存中生成了一个该注解接口的子类实现对象</span>\n        <span class=\"token class-name\">Pro</span> annotation <span class=\"token operator\">=</span> reflectTestClass<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pro</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3.调用注解对象中定义的抽象方法，获取返回值</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//下面与reflect一样</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>itclass<span class=\"token punctuation\">.</span>annocation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 描述需要去执行的类名，和方法名\n */</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Pro</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"34-小结\"><a class=\"markdownIt-Anchor\" href=\"#34-小结\">#</a> 3.4 小结</h2>\n<ol>\n<li>以后大多数时候会使用注解，而不是自定义注解</li>\n<li>注解给谁用？\n<ol>\n<li>编译器</li>\n<li>给解析程序用</li>\n</ol>\n</li>\n<li>注解不是程序的一部分，可以理解为注解就是一个标签</li>\n</ol>\n","text":"# 1、junit 单元测试 # 1.1 测试分类： 黑盒测试：不用具体关注里面的代码内容，只要输入 input，经过代码的执行查看 output 是否达到预期，不需要写测试代码 白盒测试：也需要 input 和 output，但是输入了之后代码的执行，代码的逻辑、算法、严谨度、...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":4,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":4,"path":"api/tags/JavaWeb.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\"> 1、junit 单元测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB\"><span class=\"toc-text\"> 1.1 测试分类：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-junit%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\"> 1.2 junit 的使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%8F%8D%E5%B0%84%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%81%B5%E9%AD%82\"><span class=\"toc-text\"> 2、反射：框架设计的灵魂</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-%E8%8E%B7%E5%8F%96class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\"> 2.1 获取 Class 类对象的方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#22-class%E5%AF%B9%E8%B1%A1%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\"> 2.2 Class 对象功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-%E5%8F%8D%E5%B0%84%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\"> 2.3 反射案例</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\"> 3、注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#31-jdk%E4%B8%AD%E9%A2%84%E5%AE%9A%E4%B9%89%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\"> 3.1 JDK 中预定义的一些注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\"> 3.2 自定义注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#33-%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC\"><span class=\"toc-text\"> 3.3 在程序中使用（解析）注解：获取注解中定义的属性值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#34-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\"> 3.4 小结</span></a></li></ol></li></ol>","author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaWeb-数据库","uid":"bd2363725236602d9ed430e1445ce7eb","slug":"JavaWeb-数据库","date":"2022-06-20T15:09:13.000Z","updated":"2022-06-22T06:02:08.921Z","comments":true,"path":"api/articles/JavaWeb-数据库.json","keywords":null,"cover":"https://ts1.cn.mm.bing.net/th/id/R-C.dc69fd9bf76ae273c6dbc1dbd590a5dd?rik=%2fGezoiUOC4ayoA&riu=http%3a%2f%2fup.deskcity.org%2fpic%2ff5%2f5c%2f51%2ff55c51b50fd0f34c85aea3e33c3a1268.jpg&ehk=urqzVnXj2dRJ41bArufFBbDV2lHH5hL27%2f%2bZsG7i3%2f8%3d&risl=&pid=ImgRaw&r=0","text":"JavaWeb - 数据库 # 1、数据库的相关概念 数据库 数据库管理系统 SQL 常见的关系型数据库管理系统 数据库： 存储数据的仓库，数据是有组织进行存储 英文：DataBase，简称 DB 数据库管理系统： 管理数据库的大型软件 英文：DataBase Managemen...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":4,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":4,"path":"api/tags/JavaWeb.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"计算机组成原理-数据的表示和运算-2","uid":"460b9e3a35727b706e187bd7c49b4015","slug":"计算机组成原理-数据的表示和运算-2","date":"2022-06-12T00:58:10.000Z","updated":"2022-06-12T07:43:58.840Z","comments":true,"path":"api/articles/计算机组成原理-数据的表示和运算-2.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-452a1031e8ad081d6a4442b90122b618_r.jpg?source=172ae18b","text":"# 移位运算 # 算数移位 移动小数点相当于改变每个位的位权 移位：通过改变各个数码位和小数点的相对位置，从而改变各个数码位的位权。可以用移位运算实现乘法、除法 # 原码的算数移位 原码的算数移位：符号位保持不变，仅对数值位进行移位 右移：高位补 0，低位舍弃，若舍弃的位等于 0...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/tags/计算机组成原理.json"},{"name":"408","slug":"408","count":2,"path":"api/tags/408.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}