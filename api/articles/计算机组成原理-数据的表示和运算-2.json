{"title":"计算机组成原理-数据的表示和运算-2","uid":"460b9e3a35727b706e187bd7c49b4015","slug":"计算机组成原理-数据的表示和运算-2","date":"2022-06-12T00:58:10.000Z","updated":"2022-06-12T07:43:58.840Z","comments":true,"path":"api/articles/计算机组成原理-数据的表示和运算-2.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-452a1031e8ad081d6a4442b90122b618_r.jpg?source=172ae18b","content":"<h2 id=\"移位运算\"><a class=\"markdownIt-Anchor\" href=\"#移位运算\">#</a> 移位运算</h2>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091441213.png\" alt=\"image-20220612091441213\"></p>\n<h3 id=\"算数移位\"><a class=\"markdownIt-Anchor\" href=\"#算数移位\">#</a> 算数移位</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091509237.png\" alt=\"image-20220612091509237\"></p>\n<ul>\n<li>移动小数点相当于改变每个位的位权</li>\n<li>移位：通过改变各个数码位和小数点的相对位置，从而改变各个数码位的位权。可以用移位运算实现乘法、除法</li>\n</ul>\n<h4 id=\"原码的算数移位\"><a class=\"markdownIt-Anchor\" href=\"#原码的算数移位\">#</a> 原码的算数移位</h4>\n<p><strong>原码</strong>的算数移位：符号位保持不变，仅对数值位进行移位</p>\n<p>右移：高位补 0，低位舍弃，若舍弃的位等于 0，则相当于除以 2，若舍弃的位不等于 0，则会<strong>丢失精度</strong></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091854920.png\" alt=\"image-20220612091854920\"></p>\n<p>左移：低位补 0，高位舍弃，若舍弃的位等于 0，则相当于 ×2，若舍弃的位不等于 0，则会出现<strong>严重误差</strong></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092040274.png\" alt=\"image-20220612092040274\"></p>\n<p>原码表示的定点小数与定点整数一个效果</p>\n<h4 id=\"反码的算数移位\"><a class=\"markdownIt-Anchor\" href=\"#反码的算数移位\">#</a> 反码的算数移位</h4>\n<p>正数的反码移位：正数的反码与原码的表示一模一样，因此正数不论是左移还是右移，表示方法都与原码一样</p>\n<p>负数的反码移位</p>\n<ul>\n<li>反码尾数部分和原码是完全相反的，</li>\n<li>右移：高位补 1，低位舍弃</li>\n<li>左移：低位补 1，高位舍弃</li>\n</ul>\n<h4 id=\"补码的算数移位\"><a class=\"markdownIt-Anchor\" href=\"#补码的算数移位\">#</a> 补码的算数移位</h4>\n<p>正数的补码移位：正数的补码与原码的表示一模一样，因此正数不论是左移还是右移，表示方法都与原码一样</p>\n<p>负数的补码移位</p>\n<ul>\n<li>补码是从反码的基础上末位 + 1 得到的</li>\n<li>补码的规律为：从右往左到第一个 1 为止，后半部分与原码相同，前半部分和反码相同</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092435504.png\" alt=\"image-20220612092435504\"></p>\n<ul>\n<li>右移：高位补 1，低位舍弃</li>\n<li>左移：低位补 0，高位舍弃</li>\n</ul>\n<h4 id=\"算数移位总结\"><a class=\"markdownIt-Anchor\" href=\"#算数移位总结\">#</a> 算数移位总结</h4>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092734964.png\" alt=\"image-20220612092734964\"></p>\n<h4 id=\"算数移位的应用举例\"><a class=\"markdownIt-Anchor\" href=\"#算数移位的应用举例\">#</a> 算数移位的应用举例</h4>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092859987.png\" alt=\"image-20220612092859987\"></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093100771.png\" alt=\"image-20220612093100771\"></p>\n<h3 id=\"循环移位\"><a class=\"markdownIt-Anchor\" href=\"#循环移位\">#</a> 循环移位</h3>\n<p>在循环移位的时候整个二进制字符串是进行循环补位的</p>\n<ul>\n<li>循环左移</li>\n<li>带进位位的循环左移</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093301410.png\" alt=\"image-20220612093301410\"></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093420410.png\" alt=\"image-20220612093420410\"></p>\n<p>循环移位的操作很适合把一个数字的低字节和高字节进行调换</p>\n<h3 id=\"知识点回顾\"><a class=\"markdownIt-Anchor\" href=\"#知识点回顾\">#</a> 知识点回顾</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093457421.png\" alt=\"image-20220612093457421\"></p>\n<h2 id=\"定点数原码乘法运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数原码乘法运算\">#</a> 定点数原码乘法运算</h2>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093540527.png\" alt=\"image-20220612093540527\"></p>\n<p>手算乘法（十进制）</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093701093.png\" alt=\"image-20220612093701093\"></p>\n<p>手算乘法（二进制）</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093901732.png\" alt=\"image-20220612093901732\"></p>\n<p>考虑用及其实现：</p>\n<ul>\n<li>实际数字有正负，符号位如何处理？</li>\n<li>乘积的位数扩大一倍，如何处理？</li>\n<li>4 个位积都要保存下来最后统一相加？</li>\n</ul>\n<h3 id=\"原码一位乘法\"><a class=\"markdownIt-Anchor\" href=\"#原码一位乘法\">#</a> 原码一位乘法</h3>\n<p>符号位单独处理：符号位等于 x 的符号位异或 y 的符号位</p>\n<p>数值位取绝对值进行乘法计算</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612094309832.png\" alt=\"image-20220612094309832\"></p>\n<ul>\n<li>MQ 存放乘数和积的低位</li>\n<li>X 里存放被乘数</li>\n<li>ACC 存放乘积高位</li>\n<li>如果 MQ 的最低位为 1，ACC 就加上 X 中的值，如果 MQ 的最低位为 0，就不进行相加</li>\n<li>相加结束之后 ACC 和 MQ 整体右移一位，循环上述操作</li>\n<li>乘数的符号位不用参与运算</li>\n<li>小数点隐含在积的符号位的右边</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612094735002.png\" alt=\"image-20220612094735002\"></p>\n<h3 id=\"原码一位乘法手算模拟\"><a class=\"markdownIt-Anchor\" href=\"#原码一位乘法手算模拟\">#</a> 原码一位乘法（手算模拟）</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612095005360.png\" alt=\"image-20220612095005360\"></p>\n<p>原码整数的乘法与小数的运算方法是一致的，注意一下小数点的位置即可</p>\n<h2 id=\"定点数补码的乘法运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数补码的乘法运算\">#</a> 定点数补码的乘法运算</h2>\n<h3 id=\"补码的一位乘法\"><a class=\"markdownIt-Anchor\" href=\"#补码的一位乘法\">#</a> 补码的一位乘法</h3>\n<p>设机器字长为 5 位（含符号位，n=4），x=-0.1101, y=+0.1011，采用 Booth 算法求 x・y</p>\n<p><strong>原码一位乘法</strong></p>\n<ul>\n<li>进行 n 轮加法、移位</li>\n<li>每轮可能加 x 绝对值，可能加 0，具体要看 MQ 的最低位的值</li>\n<li>每次移位是 “逻辑右移”</li>\n<li>符号位不参与运算</li>\n</ul>\n<p><strong>补码一位乘法</strong></p>\n<ul>\n<li>进行 n 论加法、移位，<strong>最后再多来一次加法</strong></li>\n<li>可能加 0，可能加 [x] 补，可能加 [-x] 补，根据当前 MQ 的最低位和辅助位来确定加什么\n<ul>\n<li>辅助位 - MQ 中最低位 = 1 时，(ACC)+[X] 补</li>\n<li>辅助位 - MQ 中最低位 = 0 时，(ACC)+0</li>\n<li>辅助位 - MQ 中最低位 =-1 时，(ACC)+[-X] 补</li>\n</ul>\n</li>\n<li>每次移位是 “补码的算数右移”—— 算数右移：<strong>符号位保持不动，数字右移</strong></li>\n<li>符号位参与运算</li>\n</ul>\n<p>补码的一位乘法（手算模拟）</p>\n<p>MQ 需要多一位做辅助位，辅助位初始为 0，每次右移会使 MQ 的最低位顶替原本的辅助位，随之 ACC 和 X 都是双符号位</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612100052150.png\" alt=\"image-20220612100052150\"></p>\n<h2 id=\"定点数原码除法运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数原码除法运算\">#</a> 定点数原码除法运算</h2>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101148749.png\" alt=\"image-20220612101148749\"></p>\n<h3 id=\"手算除法十进制\"><a class=\"markdownIt-Anchor\" href=\"#手算除法十进制\">#</a> 手算除法（十进制）</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101517616.png\" alt=\"image-20220612101517616\"></p>\n<p>手算除法（二进制）</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101848739.png\" alt=\"image-20220612101848739\"></p>\n<h3 id=\"原码除法恢复余数法\"><a class=\"markdownIt-Anchor\" href=\"#原码除法恢复余数法\">#</a> 原码除法：恢复余数法</h3>\n<p>符号位单独处理：被除数和除数的符号位异或</p>\n<p>数值拉取绝对值进行除法计算</p>\n<p>写出 x,y 的原码，y 的补码，[-y] 补</p>\n<ul>\n<li>\n<p>每次上商的时候默认会商 1，然后会把 ACC 和通用寄存器的值相减后的结果再放回 ACC 中（(ACC)+[-y] 补），如果减法运算之后符号位为 1，说明此时余数小于除数，应该商 0 的，之后计算机再将上商的值改为 0，这时 ACC 的值已经放了之前的负数，要在返回原样，就要再加上除数 [y] 补，再次覆盖 ACC</p>\n</li>\n<li>\n<p>把 ACC 和 MQ 的内容全部左移一位，进行一个错位，重复上述步骤</p>\n</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103014428.png\" alt=\"image-20220612103014428\"></p>\n<p>小数点默认在第一个 0 后面，余数 = 0.0111X2^{-n}，n=4</p>\n<h3 id=\"原码除法恢复余数法手算\"><a class=\"markdownIt-Anchor\" href=\"#原码除法恢复余数法手算\">#</a> 原码除法：恢复余数法（手算）</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103403524.png\" alt=\"image-20220612103403524\"></p>\n<h3 id=\"原码除法加减交替法不恢复余数法\"><a class=\"markdownIt-Anchor\" href=\"#原码除法加减交替法不恢复余数法\">#</a> 原码除法：加减交替法（不恢复余数法）</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103659376.png\" alt=\"image-20220612103659376\"></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103926714.png\" alt=\"image-20220612103926714\"></p>\n<p>思路：上商为 1 相减之后出现负数直接上商 0，然后逻辑左移，加 y 补</p>\n<h2 id=\"定点数补码除法运算\"><a class=\"markdownIt-Anchor\" href=\"#定点数补码除法运算\">#</a> 定点数补码除法运算</h2>\n<h3 id=\"补码除法加减交替法\"><a class=\"markdownIt-Anchor\" href=\"#补码除法加减交替法\">#</a> 补码除法：加减交替法</h3>\n<ul>\n<li>符号位直接参与运算，因此不用写绝对值的补码，直接写原数的补码</li>\n<li>采用双符号位</li>\n<li>被除数和除数同号，则被除数减去除数；异号则被除数加上除数</li>\n<li>余数和除数同号，商 1，余数左移一位减去除数</li>\n<li>余数和除数异号，商 0，余数左移一位加上除数</li>\n<li>重复 n 次</li>\n</ul>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612104643534.png\" alt=\"image-20220612104643534\"></p>\n<p>末位商恒置为 1</p>\n<h2 id=\"除法运算总结回顾\"><a class=\"markdownIt-Anchor\" href=\"#除法运算总结回顾\">#</a> 除法运算总结回顾</h2>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612104845577.png\" alt=\"image-20220612104845577\"></p>\n<h2 id=\"c语言类型转换\"><a class=\"markdownIt-Anchor\" href=\"#c语言类型转换\">#</a> C 语言类型转换</h2>\n<p>C 语言中的定点整数，如 int short long 都是用<strong>补码</strong>存储的</p>\n<p>unsigned 表示无符号整数</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612133529322.png\" alt=\"image-20220612133529322\"></p>\n<h2 id=\"数据的存储和排列\"><a class=\"markdownIt-Anchor\" href=\"#数据的存储和排列\">#</a> 数据的存储和排列</h2>\n<h3 id=\"大小端模式\"><a class=\"markdownIt-Anchor\" href=\"#大小端模式\">#</a> 大小端模式</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612142235582.png\" alt=\"image-20220612142235582\"></p>\n<p>大端：将高有效字节放在低地址，适合人类阅读</p>\n<p>小端：将高有效字节放在高地址，适合机器处理</p>\n<h3 id=\"边界对齐\"><a class=\"markdownIt-Anchor\" href=\"#边界对齐\">#</a> 边界对齐</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612142441722.png\" alt=\"image-20220612142441722\"></p>\n<p>转换地址就逻辑左移右移即可，每次访存只能读取一个字，且不能跨行读取</p>\n<h2 id=\"浮点数的表示\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的表示\">#</a> 浮点数的表示</h2>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612143258457.png\" alt=\"image-20220612143258457\"></p>\n<p>定点数的局限性：当所需表示的数值较大时，定点数就不能正确表示</p>\n<p>定点数可表示的数字范围有限，但我们不能无限制地增加数据的长度</p>\n<p>科学计数法：+11+3.026</p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612143558714.png\" alt=\"image-20220612143558714\"></p>\n<p>尾数部分越短能表示的精度就越低，阶码表示对应进制的多少次方</p>\n<ul>\n<li>阶码反映数值的大小，尾数反映精度</li>\n</ul>\n<h3 id=\"浮点数的表示-2\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的表示-2\">#</a> 浮点数的表示</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612144203332.png\" alt=\"image-20220612144203332\"></p>\n<ul>\n<li>r: 进制，E：阶码；M：尾数</li>\n</ul>\n<h3 id=\"浮点数尾数的规格化\"><a class=\"markdownIt-Anchor\" href=\"#浮点数尾数的规格化\">#</a> 浮点数尾数的规格化</h3>\n<p>尾数的最高位如果是 0 就没有意义，是无效值，会丧失精度</p>\n<p><strong>左规</strong>：当浮点数运算的结果为非规格化时要进行规格化处理，将<strong>尾数算数左移一位，阶码减 1</strong></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612144701482.png\" alt=\"image-20220612144701482\"></p>\n<p><strong>右规</strong>：当浮点数运算结果的尾数出现溢出（双符号位为 01 或 10,）时，将<strong>尾数算数右移一位，阶码加 1</strong></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145037770.png\" alt=\"image-20220612145037770\"></p>\n<p>注：采用双符号位，当溢出发生时，可以挽救。更高的符号位是正确符号位</p>\n<h3 id=\"规格化浮点数的特点\"><a class=\"markdownIt-Anchor\" href=\"#规格化浮点数的特点\">#</a> 规格化浮点数的特点</h3>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145524638.png\" alt=\"image-20220612145524638\"></p>\n<p><img src=\"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145611648.png\" alt=\"image-20220612145611648\"></p>\n<h2 id=\"浮点数标准ieee-754\"><a class=\"markdownIt-Anchor\" href=\"#浮点数标准ieee-754\">#</a> 浮点数标准 IEEE 754</h2>\n","feature":true,"text":"# 移位运算 # 算数移位 移动小数点相当于改变每个位的位权 移位：通过改变各个数码位和小数点的相对位置，从而改变各个数码位的位权。可以用移位运算实现乘法、除法 # 原码的算数移位 原码的算数移位：符号位保持不变，仅对数值位进行移位 右移：高位补 0，低位舍弃，若舍弃的位等于 0...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/tags/计算机组成原理.json"},{"name":"408","slug":"408","count":2,"path":"api/tags/408.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\"> 移位运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\"> 算数移位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E7%9A%84%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\"> 原码的算数移位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E7%A0%81%E7%9A%84%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\"> 反码的算数移位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E7%9A%84%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\"> 补码的算数移位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D%E6%80%BB%E7%BB%93\"><span class=\"toc-text\"> 算数移位总结</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E7%A7%BB%E4%BD%8D%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\"> 算数移位的应用举例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D\"><span class=\"toc-text\"> 循环移位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\"> 知识点回顾</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E5%8E%9F%E7%A0%81%E4%B9%98%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\"> 定点数原码乘法运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95\"><span class=\"toc-text\"> 原码一位乘法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95%E6%89%8B%E7%AE%97%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\"> 原码一位乘法（手算模拟）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B9%98%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\"> 定点数补码的乘法运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E4%BD%8D%E4%B9%98%E6%B3%95\"><span class=\"toc-text\"> 补码的一位乘法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E5%8E%9F%E7%A0%81%E9%99%A4%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\"> 定点数原码除法运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E7%AE%97%E9%99%A4%E6%B3%95%E5%8D%81%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\"> 手算除法（十进制）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E9%99%A4%E6%B3%95%E6%81%A2%E5%A4%8D%E4%BD%99%E6%95%B0%E6%B3%95\"><span class=\"toc-text\"> 原码除法：恢复余数法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E9%99%A4%E6%B3%95%E6%81%A2%E5%A4%8D%E4%BD%99%E6%95%B0%E6%B3%95%E6%89%8B%E7%AE%97\"><span class=\"toc-text\"> 原码除法：恢复余数法（手算）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81%E9%99%A4%E6%B3%95%E5%8A%A0%E5%87%8F%E4%BA%A4%E6%9B%BF%E6%B3%95%E4%B8%8D%E6%81%A2%E5%A4%8D%E4%BD%99%E6%95%B0%E6%B3%95\"><span class=\"toc-text\"> 原码除法：加减交替法（不恢复余数法）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E7%82%B9%E6%95%B0%E8%A1%A5%E7%A0%81%E9%99%A4%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\"> 定点数补码除法运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81%E9%99%A4%E6%B3%95%E5%8A%A0%E5%87%8F%E4%BA%A4%E6%9B%BF%E6%B3%95\"><span class=\"toc-text\"> 补码除法：加减交替法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%A4%E6%B3%95%E8%BF%90%E7%AE%97%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\"> 除法运算总结回顾</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\"> C 语言类型转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E6%8E%92%E5%88%97\"><span class=\"toc-text\"> 数据的存储和排列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 大小端模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E7%95%8C%E5%AF%B9%E9%BD%90\"><span class=\"toc-text\"> 边界对齐</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\"> 浮点数的表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA-2\"><span class=\"toc-text\"> 浮点数的表示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%B0%BE%E6%95%B0%E7%9A%84%E8%A7%84%E6%A0%BC%E5%8C%96\"><span class=\"toc-text\"> 浮点数尾数的规格化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E6%A0%BC%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\"> 规格化浮点数的特点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%87%E5%87%86ieee-754\"><span class=\"toc-text\"> 浮点数标准 IEEE 754</span></a></li></ol>","author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"junit、反射","uid":"7ee1f34768cc2e04e0232a752344cda0","slug":"junit、注解、反射","date":"2022-06-19T12:28:37.000Z","updated":"2022-06-20T00:48:00.769Z","comments":true,"path":"api/articles/junit、注解、反射.json","keywords":null,"cover":"https://ts1.cn.mm.bing.net/th/id/R-C.e953db8584262c6d275ebb1f463e2664?rik=310ufjsemnBz1Q&riu=http%3a%2f%2fup.deskcity.org%2fpic_source%2fe9%2f53%2fdb%2fe953db8584262c6d275ebb1f463e2664.jpg&ehk=f4G2vlmXEKODWmUbTuTJbYW%2bLjy81wyNtMx3vLsrh8o%3d&risl=&pid=ImgRaw&r=0","text":"# 1、junit 单元测试 # 1.1 测试分类： 黑盒测试：不用具体关注里面的代码内容，只要输入 input，经过代码的执行查看 output 是否达到预期，不需要写测试代码 白盒测试：也需要 input 和 output，但是输入了之后代码的执行，代码的逻辑、算法、严谨度、...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":2,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":2,"path":"api/tags/JavaWeb.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"计算机组成原理-数据的表示和运算","uid":"02e7efbd219a0c25e416f110675eb1a9","slug":"计算机组成原理-数据的表示和运算","date":"2022-06-11T03:21:41.000Z","updated":"2022-06-12T01:14:21.045Z","comments":true,"path":"api/articles/计算机组成原理-数据的表示和运算.json","keywords":null,"cover":"https://pic2.zhimg.com/v2-5c4e5da08a24c272eb7281c3bb967e2a_1440w.jpg?source=172ae18b","text":"# 无符号整数的表示和运算 # 无符号整数的加法 按位相加 # 无符号整数的减法 被减数不变，减数全部按位取反，末位 + 1，减法变加法 从最低位开始，按位相加，并往更高位进位 # 带符号整数的表示和运算 - 原反补 # 补码的加法运算 当负数参与加法运算时，要将两个数全部取补码...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/categories/计算机组成原理.json"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","count":2,"path":"api/tags/计算机组成原理.json"},{"name":"408","slug":"408","count":2,"path":"api/tags/408.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}